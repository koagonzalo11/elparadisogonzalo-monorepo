# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file

version: 2
updates:
  - package-ecosystem: "" # See documentation for possible values
    directory: "/" # Location of package manifests
    schedule:
      interval: "minutes"
require('dotenv').config();
const Web3 = require('web3');
const fs = require('fs');

// ✅ CONFIGURATION
const INFURA_RPC = process.env.INFURA_RPC || 'https://mainnet.infura.io/v3/429c528a2c524a0ba1fa538343d025b2';
const PRIVATE_KEY = process.env.PRIVATE_KEY; // 0x175d7bc38d4164a5162d92938f15569fe6f49087b691a366aecd3fe40fd9b21b
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS; // 0x4e8c73e7f243d12b7a5571200609523a4890beff

// Load ABI (assumed to be in same dir as this script)
const ABI = JSON.parse(fs.readFileSync('./abi.json'));

// ✅ SETUP WEB3 & ACCOUNT
const web3 = new Web3(new Web3.providers.HttpProvider(INFURA_RPC));
const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
web3.eth.accounts.wallet.add(account);

const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);

// ✅ WORKFLOW: Listen and React
const watchEventsAndReact = async () => {
  console.log(`[🤖] Listening to contract @ ${CONTRACT_ADDRESS}...`);

  contract.events
    .allEvents({ fromBlock: 'latest' })
    .on('data', async (event) => {
      console.log(`[📡] Event Detected: ${event.event}`);
      console.log(event.returnValues);

      // === Workflow Trigger Example ===
      if (event.event === 'Transfer') {
        const { from, to, value } = event.returnValues;
        if (Number(value) > 0) {
          console.log(`[💸] ${value} tokens transferred from ${from} to ${to}`);

          // === Example: Send back a small token amount to sender ===
          if (from.toLowerCase() !== account.address.toLowerCase()) {
            const tx = contract.methods.transfer(from, '1000000000000000'); // 0.001 token (adjust decimals)
            const gas = await tx.estimateGas({ from: account.address });
            const data = tx.encodeABI();
            const txData = {
              from: account.address,
              to: contract.options.address,
              data,
              gas,
            };
            const receipt = await web3.eth.sendTransaction(txData);
            console.log(`[✅] Auto-response TX sent: ${receipt.transactionHash}`);
          }
        }
      }
    })
    .on('error', (error) => {
      console.error(`[⚠️] Error:`, error);
    });
};

// ✅ RUN BOT
(async () => {
  try {
    await watchEventsAndReact();
  } catch (err) {
    console.error(`[🔥] Fatal error`, err);
  }
})();
