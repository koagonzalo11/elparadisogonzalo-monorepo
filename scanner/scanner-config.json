const { ethers } = require('ethers');

const chains = [
  {
    name: 'Ethereum Mainnet',
    symbol: 'ETH',
    rpc: 'https://mainnet.infura.io/v3/429c528a2c524a0ba1fa538343d025b2',
  },
  {
    name: 'Binance Smart Chain',
    symbol: 'BNB',
    rpc: 'https://bsc-dataseed.binance.org/',
  },
  {
    name: 'Polygon (Matic)',
    symbol: 'MATIC',
    rpc: 'https://polygon-rpc.com/',
  },
  {
    name: 'Avalanche C-Chain',
    symbol: 'AVAX',
    rpc: 'https://api.avax.network/ext/bc/C/rpc',
  },
  {
    name: 'Arbitrum One',
    symbol: 'ETH',
    rpc: 'https://arb1.arbitrum.io/rpc',
  },
  {
    name: 'Optimism',
    symbol: 'ETH',
    rpc: 'https://mainnet.optimism.io',
  }
];

async function scanWallet(address) {
  console.log(`üîç Scanning wallet: ${address}\n`);

  for (const chain of chains) {
    console.log(`--- ${chain.name} ---`);
    try {
      const provider = new ethers.providers.JsonRpcProvider(chain.rpc);
      const balance = await provider.getBalance(address);
      const formatted = ethers.utils.formatEther(balance);
      console.log(`Balance: ${formatted} ${chain.symbol}\n`);
    } catch (error) {
      console.log(`‚ùå Error fetching data: ${error.message}\n`);
    }
  }
}

const walletAddress = process.argv[2];
if (!walletAddress) {
  console.error('Usage: node multi_chain_scanner.js <wallet_address>');
  process.exit(1);
}

scanWallet(walletAddress);

