web3.eth.blockNumber           // Current block number
eth.syncing                    // Check if node is syncing
net.peerCount                  // Number of peers connected
web3.version                   // Web3 version infoweb3.eth
web3.eth.getBlock("latest")
web3.eth.getBalance("0x802ba6a112f4a7bbbc2d63c8ef4bc14dfcbe6245")
var abi = [/* your ABI JSON here */]
var addr = "0x4e8c73e7f243d12b7a5571200609523a4890beff"
var contract = eth.contract(abi).at(addr)
// Example: Read-only call
contract.yourMethodName.call()
txpool.status
var abi = [ /* your ABI here */ ]}],"type":"function"}];
var addr = "0x4e8c73e7f243d12b7a5571200609523a4890beff";
var contract = eth.contract(abi).at(addr);
contract.name.call();
var abi = [
];
var abi = [
var contract = eth.contract(abi).at("0x4e8c73e7f243d12b7a5571200609523a4890beff");
web3.toAscii(contract.name.call());
web3.toAscii(contract.symbol.call());
contract.totalSupply.call();
contract.balanceOf.call("0x802ba6a112f4a7bbbc2d63c8ef4bc14dfcbe6245");
{
  "remappings": [
    "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
    "@uniswap/v3-core/=lib/v3-core/",
    "@uniswap/v3-periphery/=lib/v3-periphery/",
    "ds-test/=lib/solmate/lib/ds-test/src/",
    "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
    "forge-std/=lib/forge-std/src/",
    "murky/=lib/murky/",
    "openzeppelin-contracts/=lib/openzeppelin-contracts/",
    "openzeppelin/=lib/openzeppelin-contracts/contracts/",
    "solady/=lib/solady/src/",
    "solmate/=lib/solmate/src/",
    "swap-router-contracts/=lib/swap-router-contracts/contracts/",
    "v3-core/=lib/v3-core/contracts/",
    "v3-periphery/=lib/v3-periphery/contracts/"
  ],
  "optimizer": {
    "enabled": true,
    "runs": 1000
  },
  "metadata": {
    "useLiteralContent": false,
    "bytecodeHash": "ipfs",
    "appendCBOR": true
  },
  "outputSelection": {
    "*": {
      "*": [
        "evm.bytecode",
        "evm.deployedBytecode",
        "devdoc",
        "userdoc",
        "metadata",
        "abi"
      ]
    }
  },
  "evmVersion": "london",
  "viaIR": true,
  "libraries": {},
  "language": "Solidity"
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25; // or your exact compiler version
eth.accounts
eth.getBalance(eth.accounts[0])
echo "your-passphrase-here" > password.txt
eth.accounts
eth.getBalance(eth.accounts[0])
eth.accounts
eth.getBalance(eth.accounts[0])
geth --http --mine --allow-insecure-unlock \
> eth.accounts
eth.accounts
eth.getBalance(eth.accounts[0])
nano deploy.js
personal.exportRawKey(eth.accounts[0], "Slaytune11$")
pkill geth
personal.listAccounts
pkill geth
geth --http \
eth.accounts
personal.exportRawKey(eth.accounts[0], "testpass")
pkill geth
eth.accounts
personal.exportRawKey(eth.accounts[0], "testpass")
eth.accounts
personal.exportRawKey(eth.accounts[0], "testpass")
pkill geth
personal.listAccounts
pkill geth
geth attach http://127.0.0.1:8545
pkill geth
geth --datadir ~/geth-data \