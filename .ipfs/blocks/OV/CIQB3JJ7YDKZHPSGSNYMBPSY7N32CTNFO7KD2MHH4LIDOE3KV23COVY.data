tring.prototype.includes = function(search, start) {
        if (typeof start !== 'number') {
          start = 0;
        }
        if (start + search.length > this.length) {
          return false;
        } else {
          return this.indexOf(search, start) !== -1;
        }
      };
    }
    if (!Array.prototype.flat) {
      Object.defineProperty(Array.prototype, 'flat', {
        configurable: true,
        value: function flat() {
          var depth = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
          return depth ? Array.prototype.reduce.call(this, function(acc, cur) {
            if (Array.isArray(cur)) {
              acc.push.apply(acc, flat.call(cur, depth - 1));
            } else {
              acc.push(cur);
            }
            return acc;
          }, []) : Array.prototype.slice.call(this);
        },
        writable: true
      });
    }
    if (window.Node && !('isConnected' in window.Node.prototype)) {
      Object.defineProperty(window.Node.prototype, 'isConnected', {
        get: function get() {
          return !this.ownerDocument || !(this.ownerDocument.compareDocumentPosition(this) & this.DOCUMENT_POSITION_DISCONNECTED);
        }
      });
    }
    var import_css_selector_parser2 = __toModule(require_lib());
    var import_dot = __toModule(require_doT());
    var import_memoizee2 = __toModule(require_memoizee());
    function multiplyMatrices(A, B) {
      var m3 = A.length;
      if (!Array.isArray(A[0])) {
        A = [ A ];
      }
      if (!Array.isArray(B[0])) {
        B = B.map(function(x) {
          return [ x ];
        });
      }
      var p2 = B[0].length;
      var B_cols = B[0].map(function(_, i) {
        return B.map(function(x) {
          return x[i];
        });
      });
      var product = A.map(function(row) {
        return B_cols.map(function(col) {
          var ret = 0;
          if (!Array.isArray(row)) {
            var _iterator6 = _createForOfIteratorHelper(col), _step6;
            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                var c4 = _step6.value;
                ret += row * c4;
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
            return ret;
          }
          for (var _i15 = 0; _i15 < row.length; _i15++) {
            ret += row[_i15] * (col[_i15] || 0);
          }
          return ret;
        });
      });
      if (m3 === 1) {
        product = product[0];
      }
      if (p2 === 1) {
        return product.map(function(x) {
          return x[0];
        });
      }
      return product;
    }
    function isString(str) {
      return type(str) === 'string';
    }
    function type(o) {
      var str = Object.prototype.toString.call(o);
      return (str.match(/^\[object\s+(.*?)\]$/)[1] || '').toLowerCase();
    }
    function toPrecision(n2, precision) {
      n2 = +n2;
      precision = +precision;
      var integerLength = (Math.floor(n2) + '').length;
      if (precision > integerLength) {
        return +n2.toFixed(precision - integerLength);
      } else {
        var p10 = Math.pow(10, integerLength - precision);
        return Math.round(n2 / p10) * p10;
      }
    }
    function parseFunction(str) {
      if (!str) {
        return;
      }
      str = str.trim();
      var isFunctionRegex = /^([a-z]+)\((.+?)\)$/i;
      var isNumberRegex = /^-?[\d.]+$/;
      var parts = str.match(isFunctionRegex);
      if (parts) {
        var args = [];
        parts[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g, function($0, arg) {
          if (/%$/.test(arg)) {
            arg = new Number(arg.slice(0, -1) / 100);
            arg.type = '<percentage>';
          } else if (/deg$/.test(arg)) {
            arg = new Number(+arg.slice(0, -3));
            arg.type = '<angle>';
            arg.unit = 'deg';
          } else if (isNumberRegex.test(arg)) {
            arg = new Number(arg);
            arg.type = '<number>';
          }
          if ($0.startsWith('/')) {
            arg = arg instanceof Number ? arg : new Number(arg);
            arg.alpha = true;
          }
          args.push(arg);
        });
        return {
          name: parts[1].toLowerCase(),
          rawName: parts[1],
          rawArgs: parts[2],
          args: args
        };
      }
    }
    function last(arr) {
      return arr[arr.length - 1];
    }
    function interpolate(start, end, p2) {
      if (isNaN(start)) {
        return end;
      }
      if (isNaN(end)) {
        return start;
      }
      return start + (end - start) * p2;
    }
    function interpolateInv(start, end, value) {
      return (value - start) / (end - start);
    }
    function mapRange(from, to2, value) {
      return interpolate(to2[0], to2[1], interpolateInv(from[0], from[1], value));
    }
    function parseCoordGrammar(coordGrammars) {
      return coordGrammars.map(function(coordGrammar2) {
        return coordGrammar2.split('|').map(function(type2) {
          type2 = type2.trim();
          var range2 = type2.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);
          if (range2) {
            var ret = new String(range2[1]);
            ret.range = [ +range2[2], +range2[3] ];
            return ret;
          }
          return type2;
        });
      });
    }
    var util = Object.freeze({
      __proto__: null,
      isString: isString,
      type: type,
      toPrecision: toPrecision,
      parseFunction: parseFunction,
      last: last,
      interpolate: interpolate,
      interpolateInv: interpolateInv,
      mapRange: mapRange,
      parseCoordGrammar: parseCoordGrammar,
      multiplyMatrices: multiplyMatrices
    });
    var Hooks = function() {
      function Hooks() {
        _classCallCheck(this, Hooks);
      }
      return _createClass(Hooks, [ {
        key: 'add',
        value: function add(name, callback, first) {
          if (typeof arguments[0] != 'string') {
            for (var name in arguments[0]) {
              this.add(name, arguments[0][name], arguments[1]);
            }
            return;
          }
          (Array.isArray(name) ? name : [ name ]).forEach(function(name2) {
            this[name2] = this[name2] || [];
            if (callback) {
              this[name2][first ? 'unshift' : 'push'](callback);
            }
          }, this);
        }
      }, {
        key: 'run',
        value: function run(name, env) {
          this[name] = this[name] || [];
          this[name].forEach(function(callback) {
            callback.call(env && env.context ? env.context : env, env);
          });
        }
      } ]);
    }();
    var hooks = new Hooks();
    var defaults = {
      gamut_mapping: 'lch.c',
      precision: 5,
      deltaE: '76'
    };
    var WHITES = {
      D50: [ .3457 / .3585, 1, (1 - .3457 - .3585) / .3585 ],
      D65: [ .3127 / .329, 1, (1 - .3127 - .329) / .329 ]
    };
    function getWhite(name) {
      if (Array.isArray(name)) {
        return name;
      }
      return WHITES[name];
    }
    function adapt$1(W1, W2, XYZ) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      W1 = getWhite(W1);
      W2 = getWhite(W2);
      if (!W1 || !W2) {
        throw new TypeError('Missing white point to convert '.concat(!W1 ? 'from' : '').concat(!W1 && !W2 ? '/' : '').concat(!W2 ? 'to' : ''));
      }
      if (W1 === W2) {
        return XYZ;
      }
      var env = {
        W1: W1,
        W2: W2,
        XYZ: XYZ,
        options: options
      };
      hooks.run('chromatic-adaptation-start', env);
      if (!env.M) {
        if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {
          env.M = [ [ 1.0479298208405488, .022946793341019088, -.05019222954313557 ], [ .029627815688159344, .990434484573249, -.01707382502938514 ], [ -.009243058152591178, .015055144896577895, .7518742899580008 ] ];
        } else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {
          env.M = [ [ .9554734527042182, -.023098536874261423, .0632593086610217 ], [ -.028369706963208136, 1.0099954580058226, .021041398966943008 ], [ .012314001688319899, -.020507696433477912, 1.3303659366080753 ] ];
        }
      }
      hooks.run('chromatic-adaptation-end', env);
      if (env.M) {
        return multiplyMatrices(env.M, env.XYZ);
      } else {
        throw new TypeError('Only Bradford CAT with white points D50 and D65 supported for now.');
      }
    }
    var \u03b5$4 = 75e-6;
    var _ColorSpace2 = (_Class_brand = new WeakSet(), _path = new WeakMap(), function() {
      function _ColorSpace(options) {
        var _options$coords, _ref38, _options$white, _options$formats, _this$formats$functio, _this$formats, _this$formats2;
        _classCallCheck(this, _ColorSpace);
        _classPrivateMethodInitSpec(this, _Class_brand);
        _classPrivateFieldInitSpec(this, _path, void 0);
        this.id = options.id;
        this.name = options.name;
        this.base = options.base ? _ColorSpace2.get(options.base) : null;
        this.aliases = options.aliases;
        if (this.base) {
          this.fromBase = options.fromBase;
          this.toBase = options.toBase;
        }
        var _coords = (_options$coords = options.coords) !== null && _options$coords !== void 0 ? _options$coords : this.base.coords;
        this.coords = _coords;
        var white2 = (_ref38 = (_options$white = options.white) !== null && _options$white !== void 0 ? _options$white : this.base.white) !== null && _ref38 !== void 0 ? _ref38 : 'D65';
        this.white = getWhite(white2);
        this.formats = (_options$formats = options.formats) !== null && _options$formats !== void 0 ? _options$formats : {};
        for (var name in this.formats) {
          var format = this.formats[name];
          format.type || (format.type = 'function');
          format.name || (format.name = name);
        }
        if (options.cssId && !((_this$formats$functio = this.formats.functions) !== null && _this$formats$functio !== void 0 && _this$formats$functio.color)) {
          this.formats.color = {
            id: options.cssId
          };
          Object.defineProperty(this, 'cssId', {
            value: options.cssId
          });
        } else if ((_this$formats = this.formats) !== null && _this$formats !== void 0 && _this$formats.color && !((_this$formats2 = this.formats) !== null && _this$formats2 !== void 0 && _this$formats2.color.id)) {
          this.formats.color.id = this.id;
        }
        this.referred = options.referred;
        _classPrivateFieldSet(_path, this, _assertClassBrand(_Class_brand, this, _getPath).call(this).reverse());
        hooks.run('colorspace-init-end', this);
      }
      return _createClass(_ColorSpace, [ {
        key: 'inGamut',
        value: function inGamut(coords) {
          var _ref39 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref39$epsilon = _ref39.epsilon, epsilon = _ref39$epsilon === void 0 ? \u03b5$4 : _ref39$epsilon;
          if (this.isPolar) {
            coords = this.toBase(coords);
            return this.base.inGamut(coords, {
              epsilon: epsilon
            });
          }
          var coordMeta = Object.values(this.coords);
          return coords.every(function(c4, i) {
            var meta = coordMeta[i];
            if (meta.type !== 'angle' && meta.range) {
              if (Number.isNaN(c4)) {
                return true;
              }
              var _meta$range = _slicedToArray(meta.range, 2), min = _meta$range[0], max2 = _meta$range[1];
              return (min === void 0 || c4 >= min - epsilon) && (max2 === void 0 || c4 <= max2 + epsilon);
            }
            return true;
          });
        }
      }, {
        key: 'cssId',
        get: function get() {
          var _this$formats$functio2;
          return ((_this$formats$functio2 = this.formats.functions) === null || _this$formats$functio2 === void 0 || (_this$formats$functio2 = _this$formats$functio2.color) === null || _this$formats$functio2 === void 0 ? void 0 : _this$formats$functio2.id) || this.id;
        }
      }, {
        key: 'isPolar',
        get: function get() {
          for (var id in this.coords) {
            if (this.coords[id].type === 'angle') {
              return true;
            }
          }
          return false;
        }
      }, {
        key: 'getFormat',
        value: function getFormat(format) {
          if (_typeof(format) === 'object') {
            format = _assertClassBrand(_Class_brand, this, _processFormat).call(this, format);
            return format;
          }
          var ret;
          if (format === 'default') {
            ret = Object.values(this.formats)[0];
          } else {
            ret = this.formats[format];
          }
          if (ret) {
            ret = _assertClassBrand(_Class_brand, this, _processFormat).call(this, ret);
            return ret;
          }
          return null;
        }
      }, {
        key: 'to',
        value: function to(space, coords) {
          if (arguments.length === 1) {
            var _ref40 = [ space.space, space.coords ];
            space = _ref40[0];
            coords = _ref40[1];
          }
          space = _ColorSpace2.get(space);
          if (this === space) {
            return coords;
          }
          coords = coords.map(function(c4) {
            return Number.isNaN(c4) ? 0 : c4;
          });
          var myPath = _classPrivateFieldGet(_path, this);
          var otherPath = _classPrivateFieldGet(_path, space);
          var connectionSpace, connectionSpaceIndex;
          for (var _i16 = 0; _i16 < myPath.length; _i16++) {
            if (myPath[_i16] === otherPath[_i16]) {
              connectionSpace = myPath[_i16];
              connectionSpaceIndex = _i16;
            } else {
              break;
            }
          }
          if (!connectionSpace) {
            throw new Error('Cannot convert between color spaces '.concat(this, ' and ').concat(space, ': no connection space was found'));
          }
          for (var _i17 = myPath.length - 1; _i17 > connectionSpaceIndex; _i17--) {
            coords = myPath[_i17].toBase(coords);
          }
          for (var _i18 = connectionSpaceIndex + 1; _i18 < otherPath.length; _i18++) {
            coords = otherPath[_i18].fromBase(coords);
          }
          return coords;
        }
      }, {
        key: 'from',
        value: function from(space, coords) {
          if (arguments.length === 1) {
            var _ref41 = [ space.space, space.coords ];
            space = _ref41[0];
            coords = _ref41[1];
          }
          space = _ColorSpace2.get(space);
          return space.to(this, coords);
        }
      }, {
        key: 'toString',
        value: function toString() {
          return ''.concat(this.name, ' (').concat(this.id, ')');
        }
      }, {
        key: 'getMinCoords',
        value: function getMinCoords() {
          var ret = [];
          for (var id in this.coords) {
            var _range2$min;
            var meta = this.coords[id];
            var range2 = meta.range || meta.refRange;
            ret.push((_range2$min = range2 === null || range2 === void 0 ? void 0 : range2.min) !== null && _range2$min !== void 0 ? _range2$min : 0);
          }
          return ret;
        }
      } ], [ {
        key: 'all',
        get: function get() {
          return _toConsumableArray(new Set(Object.values(_ColorSpace2.registry)));
        }
      }, {
        key: 'register',
        value: function register(id, space) {
          if (arguments.length === 1) {
            space = arguments[0];
            id = space.id;
          }
          space = this.get(space);
          if (this.registry[id] && this.registry[id] !== space) {
            throw new Error('Duplicate color space registration: \''.concat(id, '\''));
          }
          this.registry[id] = space;
          if (arguments.length === 1 && space.aliases) {
            var _iterator7 = _createForOfIteratorHelper(space.aliases), _step7;
            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                var alias = _step7.value;
                this.register(alias, space);
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }
          return space;
        }
      }, {
        key: 'get',
        value: function get(space) {
          if (!space || space instanceof _ColorSpace2) {
            return space;
          }
          var argType = type(space);
          if (argType === 'string') {
            var ret = _ColorSpace2.registry[space.toLowerCase()];
            if (!ret) {
              throw new TypeError('No color space found with id = "'.concat(space, '"'));
            }
            return ret;
          }
          for (var _len2 = arguments.length, alternatives = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            alternatives[_key2 - 1] = arguments[_key2];
          }
          if (alternatives.length) {
            return _ColorSpace2.get.apply(_ColorSpace2, alternatives);
          }
          throw new TypeError(''.concat(space, ' is not a valid color space'));
        }
      }, {
        key: 'resolveCoord',
        value: function resolveCoord(ref, workingSpace) {
          var coordType = type(ref);
          var space, coord;
          if (coordType === 'string') {
            if (ref.includes('.')) {
              var _ref$split = ref.split('.');
              var _ref$split2 = _slicedToArray(_ref$split, 2);
              space = _ref$split2[0];
              coord = _ref$split2[1];
            } else {
              space = void 0;
              coord = ref;
            }
          } else if (Array.isArray(ref)) {
            var _ref42 = _slicedToArray(ref, 2);
            space = _ref42[0];
            coord = _ref42[1];
          } else {
            space = ref.space;
            coord = ref.coordId;
          }
          space = _ColorSpace2.get(space);
          if (!space) {
            space = workingSpace;
          }
          if (!space) {
            throw new TypeError('Cannot resolve coordinate reference '.concat(ref, ': No color space specified and relative references are not allowed here'));
          }
          coordType = type(coord);
          if (coordType === 'number' || coordType === 'string' && coord >= 0) {
            var meta = Object.entries(space.coords)[coord];
            if (meta) {
              return _extends({
                space: space,
                id: meta[0],
                index: coord
              }, meta[1]);
            }
          }
          space = _ColorSpace2.get(space);
          var normalizedCoord = coord.toLowerCase();
          var i = 0;
          for (var id in space.coords) {
            var _meta$name;
            var _meta = space.coords[id];
            if (id.toLowerCase() === normalizedCoord || ((_meta$name = _meta.name) === null || _meta$name === void 0 ? void 0 : _meta$name.toLowerCase()) === normalizedCoord) {
              return _extends({
                space: space,
                id: id,
                index: i
              }, _meta);
            }
            i++;
          }
          throw new TypeError('No "'.concat(coord, '" coordinate found in ').concat(space.name, '. Its coordinates are: ').concat(Object.keys(space.coords).join(', ')));
        }
      } ]);
    }());
    function _processFormat(format) {
      if (format.coords && !format.coordGrammar) {
        format.type || (format.type = 'function');
        format.name || (format.name = 'color');
        format.coordGrammar = parseCoordGrammar(format.coords);
        var coordFormats = Object.entries(this.coords).map(function(_ref150, i) {
          var _ref151 = _slicedToArray(_ref150, 2), id = _ref151[0], coordMeta = _ref151[1];
          var outputType = format.coordGrammar[i][0];
          var fromRange = coordMeta.range || coordMeta.refRange;
          var toRange = outputType.range, suffix = '';
          if (outputType == '<percentage>') {
            toRange = [ 0, 100 ];
            suffix = '%';
          } else if (outputType == '<angle>') {
            suffix = 'deg';
          }
          return {
            fromRange: fromRange,
            toRange: toRange,
            suffix: suffix
          };
        });
        format.serializeCoords = function(coords, precision) {
          return coords.map(function(c4, i) {
            var _coordFormats$i = coordFormats[i], fromRange = _coordFormats$i.fromRange, toRange = _coordFormats$i.toRange, suffix = _coordFormats$i.suffix;
            if (fromRange && toRange) {
              c4 = mapRange(fromRange, toRange, c4);
            }
            c4 = toPrecision(c4, precision);
            if (suffix) {
              c4 += suffix;
            }
            return c4;
          });
        };
      }
      return format;
    }
    function _getPath() {
      var ret = [ this ];
      for (var _space2 = this; _space2 = _space2.base; ) {
        ret.push(_space2);
      }
      return ret;
    }
    var ColorSpace = _ColorSpace2;
    __publicField(ColorSpace, 'registry', {});
    __publicField(ColorSpace, 'DEFAULT_FORMAT', {
      type: 'functions',
      name: 'color'
    });
    var XYZ_D65 = new ColorSpace({
      id: 'xyz-d65',
      name: 'XYZ D65',
      coords: {
        x: {
          name: 'X'
        },
        y: {
          name: 'Y'
        },
        z: {
          name: 'Z'
        }
      },
      white: 'D65',
      formats: {
        color: {
          ids: [ 'xyz-d65', 'xyz' ]
        }
      },
      aliases: [ 'xyz' ]
    });
    var RGBColorSpace = function(_ColorSpace3) {
      function RGBColorSpace(options) {
        var _options$referred;
        var _this;
        _classCallCheck(this, RGBColorSpace);
        if (!options.coords) {
          options.coords = {
            r: {
              range: [ 0, 1 ],
              name: 'Red'
            },
            g: {
              range: [ 0, 1 ],
              name: 'Green'
            },
            b: {
              range: [ 0, 1 ],
              name: 'Blue'
            }
          };
        }
        if (!options.base) {
          options.base = XYZ_D65;
        }
        if (options.toXYZ_M && options.fromXYZ_M) {
          var _options$toBase, _options$fromBase;
          (_options$toBase = options.toBase) !== null && _options$toBase !== void 0 ? _options$toBase : options.toBase = function(rgb) {
            var xyz = multiplyMatrices(options.toXYZ_M, rgb);
            if (_this.white !== _this.base.white) {
              xyz = adapt$1(_this.white, _this.base.white, xyz);
            }
            return xyz;
          };
          (_options$fromBase = options.fromBase) !== null && _options$fromBase !== void 0 ? _options$fromBase : options.fromBase = function(xyz) {
            xyz = adapt$1(_this.base.white, _this.white, xyz);
            return multiplyMatrices(options.fromXYZ_M, xyz);
          };
        }
        (_options$referred = options.referred) !== null && _options$referred !== void 0 ? _options$referred : options.referred = 'display';
        return _this = _callSuper(this, RGBColorSpace, [ options ]);
      }
      _inherits(RGBColorSpace, _ColorSpace3);
      return _createClass(RGBColorSpace);
    }(ColorSpace);
    function parse2(str) {
      var _String;
      var env = {
        str: (_String = String(str)) === null || _String === void 0 ? void 0 : _String.trim()
      };
      hooks.run('parse-start', env);
      if (env.color) {
        return env.color;
      }
      env.parsed = parseFunction(env.str);
      if (env.parsed) {
        var name = env.parsed.name;
        if (name === 'color') {
          var id = env.parsed.args.shift();
          var alpha = env.parsed.rawArgs.indexOf('/') > 0 ? env.parsed.args.pop() : 1;
          var _iterator8 = _createForOfIteratorHelper(ColorSpace.all), _step8;
          try {
            var _loop5 = function _loop5() {
              var space = _step8.value;
              var colorSpec = space.getFormat('color');
              if (colorSpec) {
                var _colorSpec$ids;
                if (id === colorSpec.id || (_colorSpec$ids = colorSpec.ids) !== null && _colorSpec$ids !== void 0 && _colorSpec$ids.includes(id)) {
                  var argCount = Object.keys(space.coords).length;
                  var coords = Array(argCount).fill(0);
                  coords.forEach(function(_, i) {
                    return coords[i] = env.parsed.args[i] || 0;
                  });
                  return {
                    v: {
                      spaceId: space.id,
                      coords: coords,
                      alpha: alpha
                    }
                  };
                }
              }
            }, _ret2;
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
              _ret2 = _loop5();
              if (_ret2) {
                return _ret2.v;
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
          var didYouMean = '';
          if (id in ColorSpace.registry) {
            var _ColorSpace$registry$;
            var cssId = (_ColorSpace$registry$ = ColorSpace.registry[id].formats) === null || _ColorSpace$registry$ === void 0 || (_ColorSpace$registry$ = _ColorSpace$registry$.functions) === null || _ColorSpace$registry$ === void 0 || (_ColorSpace$registry$ = _ColorSpace$registry$.color) === null || _ColorSpace$registry$ === void 0 ? void 0 : _ColorSpace$registry$.id;
            if (cssId) {
              didYouMean = 'Did you mean color('.concat(cssId, ')?');
            }
          }
          throw new TypeError('Cannot parse color('.concat(id, '). ') + (didYouMean || 'Missing a plugin?'));
        } else {
          var _iterator9 = _createForOfIteratorHelper(ColorSpace.all), _step9;
          try {
            var _loop6 = function _loop6() {
              var space = _step9.value;
              var format = space.getFormat(name);
              if (format && format.type === 'function') {
                var _alpha = 1;
                if (format.lastAlpha || last(env.parsed.args).alpha) {
                  _alpha = env.parsed.args.pop();
                }
                var coords = env.parsed.args;
                if (format.coordGrammar) {
                  Object.entries(space.coords).forEach(function(_ref43, i) {
                    var _coords$i;
                    var _ref44 = _slicedToArray(_ref43, 2), id = _ref44[0], coordMeta = _ref44[1];
                    var coordGrammar2 = format.coordGrammar[i];
                    var providedType = (_coords$i = coords[i]) === null || _coords$i === void 0 ? void 0 : _coords$i.type;
                    coordGrammar2 = coordGrammar2.find(function(c4) {
                      return c4 == providedType;
                    });
                    if (!coordGrammar2) {
                      var coordName = coordMeta.name || id;
                      throw new TypeError(''.concat(providedType, ' not allowed for ').concat(coordName, ' in ').concat(name, '()'));
                    }
                    var fromRange = coordGrammar2.range;
                    if (providedType === '<percentage>') {
                      fromRange || (fromRange = [ 0, 1 ]);
                    }
                    var toRange = coordMeta.range || coordMeta.refRange;
                    if (fromRange && toRange) {
                      coords[i] = mapRange(fromRange, toRange, coords[i]);
                    }
                  });
                }
                return {
                  v: {
                    spaceId: space.id,
                    coords: coords,
                    alpha: _alpha
                  }
                };
              }
            }, _ret3;
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
              _ret3 = _loop6();
              if (_ret3) {
                return _ret3.v;
              }
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        }
      } else {
        var _iterator10 = _createForOfIteratorHelper(ColorSpace.all), _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
            var space = _step10.value;
            for (var formatId in space.formats) {
              var format = space.formats[formatId];
              if (format.type !== 'custom') {
                continue;
              }
              if (format.test && !format.test(env.str)) {
                continue;
              }
              var color = format.parse(env.str);
              if (color) {
                var _color$alpha;
                (_color$alpha = color.alpha) !== null && _color$alpha !== void 0 ? _color$alpha : color.alpha = 1;
                return color;
              }
            }
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }
      throw new TypeError('Could not parse '.concat(str, ' as a color. Missing a plugin?'));
    }
    function getColor(color) {
      if (!color) {
        throw new TypeError('Empty color reference');
      }
      if (isString(color)) {
        color = parse2(color);
      }
      var space = color.space || color.spaceId;
      if (!(space instanceof ColorSpace)) {
        color.space = ColorSpace.get(space);
      }
      if (color.alpha === void 0) {
        color.alpha = 1;
      }
      return color;
    }
    function getAll(color, space) {
      space = ColorSpace.get(space);
      return space.from(color);
    }
    function get(color, prop) {
      var _ColorSpace$resolveCo = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo.space, index = _ColorSpace$resolveCo.index;
      var coords = getAll(color, space);
      return coords[index];
    }
    function setAll(color, space, coords) {
      space = ColorSpace.get(space);
      color.coords = space.to(color.space, coords);
      return color;
    }
    function set(color, prop, value) {
      color = getColor(color);
      if (arguments.length === 2 && type(arguments[1]) === 'object') {
        var object = arguments[1];
        for (var p2 in object) {
          set(color, p2, object[p2]);
        }
      } else {
        if (typeof value === 'function') {
          value = value(get(color, prop));
        }
        var _ColorSpace$resolveCo2 = ColorSpace.resolveCoord(prop, color.space), space = _ColorSpace$resolveCo2.space, index = _ColorSpace$resolveCo2.index;
        var coords = getAll(color, space);
        coords[index] = value;
        setAll(color, space, coords);
      }
      return color;
    }
    var XYZ_D50 = new ColorSpace({
      id: 'xyz-d50',
      name: 'XYZ D50',
      white: 'D50',
      base: XYZ_D65,
      fromBase: function fromBase(coords) {
        return adapt$1(XYZ_D65.white, 'D50', coords);
      },
      toBase: function toBase(coords) {
        return adapt$1('D50', XYZ_D65.white, coords);
      },
      formats: {
        color: {}
      }
    });
    var \u03b5$3 = 216 / 24389;
    var \u03b53$1 = 24 / 116;
    var \u03ba$1 = 24389 / 27;
    var white$1 = WHITES.D50;
    var lab = new ColorSpace({
      id: 'lab',
      name: 'Lab',
      coords: {
        l: {
          refRange: [ 0, 100 ],
          name: 'L'
        },
        a: {
          refRange: [ -125, 125 ]
        },
        b: {
          refRange: [ -125, 125 ]
        }
      },
      white: white$1,
      base: XYZ_D50,
      fromBase: function fromBase(XYZ) {
        var xyz = XYZ.map(function(value, i) {
          return value / white$1[i];
        });
        var f = xyz.map(function(value) {
          return value > \u03b5$3 ? Math.cbrt(value) : (\u03ba$1 * value + 16) / 116;
        });
        return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];
      },
      toBase: function toBase(Lab) {
        var f = [];
        f[1] = (Lab[0] + 16) / 116;
        f[0] = Lab[1] / 500 + f[1];
        f[2] = f[1] - Lab[2] / 200;
        var xyz = [ f[0] > \u03b53$1 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / \u03ba$1, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \u03ba$1, f[2] > \u03b53$1 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / \u03ba$1 ];
        return xyz.map(function(value, i) {
          return value * white$1[i];
        });
      },
      formats: {
        lab: {
          coords: [ '<number> | <percentage>', '<number>', '<number>' ]
        }
      }
    });
    function constrain(angle) {
      return (angle % 360 + 360) % 360;
    }
    function adjust(arc, angles) {
      if (arc === 'raw') {
        return angles;
      }
      var _angles$map = angles.map(constrain), _angles$map2 = _slicedToArray(_angles$map, 2), a1 = _angles$map2[0], a2 = _angles$map2[1];
      var angleDiff = a2 - a1;
      if (arc === 'increasing') {
        if (angleDiff < 0) {
          a2 += 360;
        }
      } else if (arc === 'decreasing') {
        if (angleDiff > 0) {
          a1 += 360;
        }
      } else if (arc === 'longer') {
        if (-180 < angleDiff && angleDiff < 180) {
          if (angleDiff > 0) {
            a2 += 360;
          } else {
            a1 += 360;
          }
        }
      } else if (arc === 'shorter') {
        if (angleDiff > 180) {
          a1 += 360;
        } else if (angleDiff < -180) {
          a2 += 360;
        }
      }
      return [ a1, a2 ];
    }
    var lch = new ColorSpace({
      id: 'lch',
      name: 'LCH',
      coords: {
        l: {
          refRange: [ 0, 100 ],
          name: 'Lightness'
        },
        c: {
          refRange: [ 0, 150 ],
          name: 'Chroma'
        },
        h: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        }
      },
      base: lab,
      fromBase: function fromBase(Lab) {
        var _Lab = _slicedToArray(Lab, 3), L = _Lab[0], a2 = _Lab[1], b2 = _Lab[2];
        var hue;
        var \u03b52 = .02;
        if (Math.abs(a2) < \u03b52 && Math.abs(b2) < \u03b52) {
          hue = NaN;
        } else {
          hue = Math.atan2(b2, a2) * 180 / Math.PI;
        }
        return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(hue) ];
      },
      toBase: function toBase(LCH) {
        var _LCH = _slicedToArray(LCH, 3), Lightness = _LCH[0], Chroma = _LCH[1], Hue = _LCH[2];
        if (Chroma < 0) {
          Chroma = 0;
        }
        if (isNaN(Hue)) {
          Hue = 0;
        }
        return [ Lightness, Chroma * Math.cos(Hue * Math.PI / 180), Chroma * Math.sin(Hue * Math.PI / 180) ];
      },
      formats: {
        lch: {
          coords: [ '<number> | <percentage>', '<number>', '<number> | <angle>' ]
        }
      }
    });
    var Gfactor = Math.pow(25, 7);
    var \u03c0$1 = Math.PI;
    var r2d = 180 / \u03c0$1;
    var d2r$1 = \u03c0$1 / 180;
    function deltaE2000(color, sample) {
      var _ref45 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref45$kL = _ref45.kL, kL = _ref45$kL === void 0 ? 1 : _ref45$kL, _ref45$kC = _ref45.kC, kC = _ref45$kC === void 0 ? 1 : _ref45$kC, _ref45$kH = _ref45.kH, kH = _ref45$kH === void 0 ? 1 : _ref45$kH;
      var _lab$from = lab.from(color), _lab$from2 = _slicedToArray(_lab$from, 3), L1 = _lab$from2[0], a1 = _lab$from2[1], b1 = _lab$from2[2];
      var C1 = lch.from(lab, [ L1, a1, b1 ])[1];
      var _lab$from3 = lab.from(sample), _lab$from4 = _slicedToArray(_lab$from3, 3), L2 = _lab$from4[0], a2 = _lab$from4[1], b2 = _lab$from4[2];
      var C2 = lch.from(lab, [ L2, a2, b2 ])[1];
      if (C1 < 0) {
        C1 = 0;
      }
      if (C2 < 0) {
        C2 = 0;
      }
      var Cbar = (C1 + C2) / 2;
      var C7 = Math.pow(Cbar, 7);
      var G = .5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));
      var adash1 = (1 + G) * a1;
      var adash2 = (1 + G) * a2;
      var Cdash1 = Math.sqrt(Math.pow(adash1, 2) + Math.pow(b1, 2));
      var Cdash2 = Math.sqrt(Math.pow(adash2, 2) + Math.pow(b2, 2));
      var h1 = adash1 === 0 && b1 === 0 ? 0 : Math.atan2(b1, adash1);
      var h2 = adash2 === 0 && b2 === 0 ? 0 : Math.atan2(b2, adash2);
      if (h1 < 0) {
        h1 += 2 * \u03c0$1;
      }
      if (h2 < 0) {
        h2 += 2 * \u03c0$1;
      }
      h1 *= r2d;
      h2 *= r2d;
      var \u0394L = L2 - L1;
      var \u0394C = Cdash2 - Cdash1;
      var hdiff = h2 - h1;
      var hsum = h1 + h2;
      var habs = Math.abs(hdiff);
      var \u0394h;
      if (Cdash1 * Cdash2 === 0) {
        \u0394h = 0;
      } else if (habs <= 180) {
        \u0394h = hdiff;
      } else if (hdiff > 180) {
        \u0394h = hdiff - 360;
      } else if (hdiff < -180) {
        \u0394h = hdiff + 360;
      } else {
        console.log('the unthinkable has happened');
      }
      var \u0394H = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(\u0394h * d2r$1 / 2);
      var Ldash = (L1 + L2) / 2;
      var Cdash = (Cdash1 + Cdash2) / 2;
      var Cdash7 = Math.pow(Cdash, 7);
      var hdash;
      if (Cdash1 * Cdash2 === 0) {
        hdash = hsum;
      } else if (habs <= 180) {
        hdash = hsum / 2;
      } else if (hsum < 360) {
        hdash = (hsum + 360) / 2;
      } else {
        hdash = (hsum - 360) / 2;
      }
      var lsq = Math.pow(Ldash - 50, 2);
      var SL = 1 + .015 * lsq / Math.sqrt(20 + lsq);
      var SC = 1 + .045 * Cdash;
      var T = 1;
      T -= .17 * Math.cos((hdash - 30) * d2r$1);
      T += .24 * Math.cos(2 * hdash * d2r$1);
      T += .32 * Math.cos((3 * hdash + 6) * d2r$1);
      T -= .2 * Math.cos((4 * hdash - 63) * d2r$1);
      var SH = 1 + .015 * Cdash * T;
      var \u0394\u03b8 = 30 * Math.exp(-1 * Math.pow((hdash - 275) / 25, 2));
      var RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));
      var RT = -1 * Math.sin(2 * \u0394\u03b8 * d2r$1) * RC;
      var dE = Math.pow(\u0394L / (kL * SL), 2);
      dE += Math.pow(\u0394C / (kC * SC), 2);
      dE += Math.pow(\u0394H / (kH * SH), 2);
      dE += RT * (\u0394C / (kC * SC)) * (\u0394H / (kH * SH));
      return Math.sqrt(dE);
    }
    var \u03b5$2 = 75e-6;
    function inGamut(color) {
      var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : color.space;
      var _ref46 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref46$epsilon = _ref46.epsilon, epsilon = _ref46$epsilon === void 0 ? \u03b5$2 : _ref46$epsilon;
      color = getColor(color);
      space = ColorSpace.get(space);
      var coords = color.coords;
      if (space !== color.space) {
        coords = space.from(color);
      }
      return space.inGamut(coords, {
        epsilon: epsilon
      });
    }
    function clone2(color) {
      return {
        space: color.space,
        coords: color.coords.slice(),
        alpha: color.alpha
      };
    }
    function toGamut(color) {
      var _ref47 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref47$method = _ref47.method, method = _ref47$method === void 0 ? defaults.gamut_mapping : _ref47$method, _ref47$space = _ref47.space, space = _ref47$space === void 0 ? color.space : _ref47$space;
      if (isString(arguments[1])) {
        space = arguments[1];
      }
      space = ColorSpace.get(space);
      if (inGamut(color, space, {
        epsilon: 0
      })) {
        return color;
      }
      var spaceColor = to(color, space);
      if (method !== 'clip' && !inGamut(color, space)) {
        var clipped = toGamut(clone2(spaceColor), {
          method: 'clip',
          space: space
        });
        if (deltaE2000(color, clipped) > 2) {
          var coordMeta = ColorSpace.resolveCoord(method);
          var mapSpace = coordMeta.space;
          var coordId = coordMeta.id;
          var mappedColor = to(spaceColor, mapSpace);
          var bounds = coordMeta.range || coordMeta.refRange;
          var min = bounds[0];
          var \u03b52 = .01;
          var low = min;
          var high = get(mappedColor, coordId);
          while (high - low > \u03b52) {
            var clipped2 = clone2(mappedColor);
            clipped2 = toGamut(clipped2, {
              space: space,
              method: 'clip'
            });
            var deltaE2 = deltaE2000(mappedColor, clipped2);
            if (deltaE2 - 2 < \u03b52) {
              low = get(mappedColor, coordId);
            } else {
              high = get(mappedColor, coordId);
            }
            set(mappedColor, coordId, (low + high) / 2);
          }
          spaceColor = to(mappedColor, space);
        } else {
          spaceColor = clipped;
        }
      }
      if (method === 'clip' || !inGamut(spaceColor, space, {
        epsilon: 0
      })) {
        var _bounds = Object.values(space.coords).map(function(c4) {
          return c4.range || [];
        });
        spaceColor.coords = spaceColor.coords.map(function(c4, i) {
          var _bounds$i = _slicedToArray(_bounds[i], 2), min = _bounds$i[0], max2 = _bounds$i[1];
          if (min !== void 0) {
            c4 = Math.max(min, c4);
          }
          if (max2 !== void 0) {
            c4 = Math.min(c4, max2);
          }
          return c4;
        });
      }
      if (space !== color.space) {
        spaceColor = to(spaceColor, color.space);
      }
      color.coords = spaceColor.coords;
      return color;
    }
    toGamut.returns = 'color';
    function to(color, space) {
      var _ref48 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, inGamut2 = _ref48.inGamut;
      color = getColor(color);
      space = ColorSpace.get(space);
      var coords = space.from(color);
      var ret = {
        space: space,
        coords: coords,
        alpha: color.alpha
      };
      if (inGamut2) {
        ret = toGamut(ret);
      }
      return ret;
    }
    to.returns = 'color';
    function serialize(color) {
      var _ref50, _color$space$getForma;
      var _ref49 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _ref49$precision = _ref49.precision, precision = _ref49$precision === void 0 ? defaults.precision : _ref49$precision, _ref49$format = _ref49.format, format = _ref49$format === void 0 ? 'default' : _ref49$format, _ref49$inGamut = _ref49.inGamut, inGamut$1 = _ref49$inGamut === void 0 ? true : _ref49$inGamut, customOptions = _objectWithoutProperties(_ref49, _excluded9);
      var ret;
      color = getColor(color);
      var formatId = format;
      format = (_ref50 = (_color$space$getForma = color.space.getFormat(format)) !== null && _color$space$getForma !== void 0 ? _color$space$getForma : color.space.getFormat('default')) !== null && _ref50 !== void 0 ? _ref50 : ColorSpace.DEFAULT_FORMAT;
      inGamut$1 || (inGamut$1 = format.toGamut);
      var coords = color.coords;
      coords = coords.map(function(c4) {
        return c4 ? c4 : 0;
      });
      if (inGamut$1 && !inGamut(color)) {
        coords = toGamut(clone2(color), inGamut$1 === true ? void 0 : inGamut$1).coords;
      }
      if (format.type === 'custom') {
        customOptions.precision = precision;
        if (format.serialize) {
          ret = format.serialize(coords, color.alpha, customOptions);
        } else {
          throw new TypeError('format '.concat(formatId, ' can only be used to parse colors, not for serialization'));
        }
      } else {
        var name = format.name || 'color';
        if (format.serializeCoords) {
          coords = format.serializeCoords(coords, precision);
        } else {
          if (precision !== null) {
            coords = coords.map(function(c4) {
              return toPrecision(c4, precision);
            });
          }
        }
        var args = _toConsumableArray(coords);
        if (name === 'color') {
          var _format$ids;
          var cssId = format.id || ((_format$ids = format.ids) === null || _format$ids === void 0 ? void 0 : _format$ids[0]) || color.space.id;
          args.unshift(cssId);
        }
        var alpha = color.alpha;
        if (precision !== null) {
          alpha = toPrecision(alpha, precision);
        }
        var strAlpha = color.alpha < 1 && !format.noAlpha ? ''.concat(format.commas ? ',' : ' /', ' ').concat(alpha) : '';
        ret = ''.concat(name, '(').concat(args.join(format.commas ? ', ' : ' ')).concat(strAlpha, ')');
      }
      return ret;
    }
    var toXYZ_M$5 = [ [ .6369580483012914, .14461690358620832, .1688809751641721 ], [ .2627002120112671, .6779980715188708, .05930171646986196 ], [ 0, .028072693049087428, 1.060985057710791 ] ];
    var fromXYZ_M$5 = [ [ 1.716651187971268, -.355670783776392, -.25336628137366 ], [ -.666684351832489, 1.616481236634939, .0157685458139111 ], [ .017639857445311, -.042770613257809, .942103121235474 ] ];
    var REC2020Linear = new RGBColorSpace({
      id: 'rec2020-linear',
      name: 'Linear REC.2020',
      white: 'D65',
      toXYZ_M: toXYZ_M$5,
      fromXYZ_M: fromXYZ_M$5,
      formats: {
        color: {}
      }
    });
    var \u03b1 = 1.09929682680944;
    var \u03b2 = .018053968510807;
    var REC2020 = new RGBColorSpace({
      id: 'rec2020',
      name: 'REC.2020',
      base: REC2020Linear,
      toBase: function toBase(RGB) {
        return RGB.map(function(val) {
          if (val < \u03b2 * 4.5) {
            return val / 4.5;
          }
          return Math.pow((val + \u03b1 - 1) / \u03b1, 1 / .45);
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(val) {
          if (val >= \u03b2) {
            return \u03b1 * Math.pow(val, .45) - (\u03b1 - 1);
          }
          return 4.5 * val;
        });
      },
      formats: {
        color: {}
      }
    });
    var toXYZ_M$4 = [ [ .4865709486482162, .26566769316909306, .1982172852343625 ], [ .2289745640697488, .6917385218365064, .079286914093745 ], [ 0, .04511338185890264, 1.043944368900976 ] ];
    var fromXYZ_M$4 = [ [ 2.493496911941425, -.9313836179191239, -.40271078445071684 ], [ -.8294889695615747, 1.7626640603183463, .023624685841943577 ], [ .03584583024378447, -.07617238926804182, .9568845240076872 ] ];
    var P3Linear = new RGBColorSpace({
      id: 'p3-linear',
      name: 'Linear P3',
      white: 'D65',
      toXYZ_M: toXYZ_M$4,
      fromXYZ_M: fromXYZ_M$4
    });
    var toXYZ_M$3 = [ [ .41239079926595934, .357584339383878, .1804807884018343 ], [ .21263900587151027, .715168678767756, .07219231536073371 ], [ .01933081871559182, .11919477979462598, .9505321522496607 ] ];
    var fromXYZ_M$3 = [ [ 3.2409699419045226, -1.537383177570094, -.4986107602930034 ], [ -.9692436362808796, 1.8759675015077202, .04155505740717559 ], [ .05563007969699366, -.20397695888897652, 1.0569715142428786 ] ];
    var sRGBLinear = new RGBColorSpace({
      id: 'srgb-linear',
      name: 'Linear sRGB',
      white: 'D65',
      toXYZ_M: toXYZ_M$3,
      fromXYZ_M: fromXYZ_M$3,
      formats: {
        color: {}
      }
    });
    var KEYWORDS = {
      aliceblue: [ 240 / 255, 248 / 255, 1 ],
      antiquewhite: [ 250 / 255, 235 / 255, 215 / 255 ],
      aqua: [ 0, 1, 1 ],
      aquamarine: [ 127 / 255, 1, 212 / 255 ],
      azure: [ 240 / 255, 1, 1 ],
      beige: [ 245 / 255, 245 / 255, 220 / 255 ],
      bisque: [ 1, 228 / 255, 196 / 255 ],
      black: [ 0, 0, 0 ],
      blanchedalmond: [ 1, 235 / 255, 205 / 255 ],
      blue: [ 0, 0, 1 ],
      blueviolet: [ 138 / 255, 43 / 255, 226 / 255 ],
      brown: [ 165 / 255, 42 / 255, 42 / 255 ],
      burlywood: [ 222 / 255, 184 / 255, 135 / 255 ],
      cadetblue: [ 95 / 255, 158 / 255, 160 / 255 ],
      chartreuse: [ 127 / 255, 1, 0 ],
      chocolate: [ 210 / 255, 105 / 255, 30 / 255 ],
      coral: [ 1, 127 / 255, 80 / 255 ],
      cornflowerblue: [ 100 / 255, 149 / 255, 237 / 255 ],
      cornsilk: [ 1, 248 / 255, 220 / 255 ],
      crimson: [ 220 / 255, 20 / 255, 60 / 255 ],
      cyan: [ 0, 1, 1 ],
      darkblue: [ 0, 0, 139 / 255 ],
      darkcyan: [ 0, 139 / 255, 139 / 255 ],
      darkgoldenrod: [ 184 / 255, 134 / 255, 11 / 255 ],
      darkgray: [ 169 / 255, 169 / 255, 169 / 255 ],
      darkgreen: [ 0, 100 / 255, 0 ],
      darkgrey: [ 169 / 255, 169 / 255, 169 / 255 ],
      darkkhaki: [ 189 / 255, 183 / 255, 107 / 255 ],
      darkmagenta: [ 139 / 255, 0, 139 / 255 ],
      darkolivegreen: [ 85 / 255, 107 / 255, 47 / 255 ],
      darkorange: [ 1, 140 / 255, 0 ],
      darkorchid: [ 153 / 255, 50 / 255, 204 / 255 ],
      darkred: [ 139 / 255, 0, 0 ],
      darksalmon: [ 233 / 255, 150 / 255, 122 / 255 ],
      darkseagreen: [ 143 / 255, 188 / 255, 143 / 255 ],
      darkslateblue: [ 72 / 255, 61 / 255, 139 / 255 ],
      darkslategray: [ 47 / 255, 79 / 255, 79 / 255 ],
      darkslategrey: [ 47 / 255, 79 / 255, 79 / 255 ],
      darkturquoise: [ 0, 206 / 255, 209 / 255 ],
      darkviolet: [ 148 / 255, 0, 211 / 255 ],
      deeppink: [ 1, 20 / 255, 147 / 255 ],
      deepskyblue: [ 0, 191 / 255, 1 ],
      dimgray: [ 105 / 255, 105 / 255, 105 / 255 ],
      dimgrey: [ 105 / 255, 105 / 255, 105 / 255 ],
      dodgerblue: [ 30 / 255, 144 / 255, 1 ],
      firebrick: [ 178 / 255, 34 / 255, 34 / 255 ],
      floralwhite: [ 1, 250 / 255, 240 / 255 ],
      forestgreen: [ 34 / 255, 139 / 255, 34 / 255 ],
      fuchsia: [ 1, 0, 1 ],
      gainsboro: [ 220 / 255, 220 / 255, 220 / 255 ],
      ghostwhite: [ 248 / 255, 248 / 255, 1 ],
      gold: [ 1, 215 / 255, 0 ],
      goldenrod: [ 218 / 255, 165 / 255, 32 / 255 ],
      gray: [ 128 / 255, 128 / 255, 128 / 255 ],
      green: [ 0, 128 / 255, 0 ],
      greenyellow: [ 173 / 255, 1, 47 / 255 ],
      grey: [ 128 / 255, 128 / 255, 128 / 255 ],
      honeydew: [ 240 / 255, 1, 240 / 255 ],
      hotpink: [ 1, 105 / 255, 180 / 255 ],
      indianred: [ 205 / 255, 92 / 255, 92 / 255 ],
      indigo: [ 75 / 255, 0, 130 / 255 ],
      ivory: [ 1, 1, 240 / 255 ],
      khaki: [ 240 / 255, 230 / 255, 140 / 255 ],
      lavender: [ 230 / 255, 230 / 255, 250 / 255 ],
      lavenderblush: [ 1, 240 / 255, 245 / 255 ],
      lawngreen: [ 124 / 255, 252 / 255, 0 ],
      lemonchiffon: [ 1, 250 / 255, 205 / 255 ],
      lightblue: [ 173 / 255, 216 / 255, 230 / 255 ],
      lightcoral: [ 240 / 255, 128 / 255, 128 / 255 ],
      lightcyan: [ 224 / 255, 1, 1 ],
      lightgoldenrodyellow: [ 250 / 255, 250 / 255, 210 / 255 ],
      lightgray: [ 211 / 255, 211 / 255, 211 / 255 ],
      lightgreen: [ 144 / 255, 238 / 255, 144 / 255 ],
      lightgrey: [ 211 / 255, 211 / 255, 211 / 255 ],
      lightpink: [ 1, 182 / 255, 193 / 255 ],
      lightsalmon: [ 1, 160 / 255, 122 / 255 ],
      lightseagreen: [ 32 / 255, 178 / 255, 170 / 255 ],
      lightskyblue: [ 135 / 255, 206 / 255, 250 / 255 ],
      lightslategray: [ 119 / 255, 136 / 255, 153 / 255 ],
      lightslategrey: [ 119 / 255, 136 / 255, 153 / 255 ],
      lightsteelblue: [ 176 / 255, 196 / 255, 222 / 255 ],
      lightyellow: [ 1, 1, 224 / 255 ],
      lime: [ 0, 1, 0 ],
      limegreen: [ 50 / 255, 205 / 255, 50 / 255 ],
      linen: [ 250 / 255, 240 / 255, 230 / 255 ],
      magenta: [ 1, 0, 1 ],
      maroon: [ 128 / 255, 0, 0 ],
      mediumaquamarine: [ 102 / 255, 205 / 255, 170 / 255 ],
      mediumblue: [ 0, 0, 205 / 255 ],
      mediumorchid: [ 186 / 255, 85 / 255, 211 / 255 ],
      mediumpurple: [ 147 / 255, 112 / 255, 219 / 255 ],
      mediumseagreen: [ 60 / 255, 179 / 255, 113 / 255 ],
      mediumslateblue: [ 123 / 255, 104 / 255, 238 / 255 ],
      mediumspringgreen: [ 0, 250 / 255, 154 / 255 ],
      mediumturquoise: [ 72 / 255, 209 / 255, 204 / 255 ],
      mediumvioletred: [ 199 / 255, 21 / 255, 133 / 255 ],
      midnightblue: [ 25 / 255, 25 / 255, 112 / 255 ],
      mintcream: [ 245 / 255, 1, 250 / 255 ],
      mistyrose: [ 1, 228 / 255, 225 / 255 ],
      moccasin: [ 1, 228 / 255, 181 / 255 ],
      navajowhite: [ 1, 222 / 255, 173 / 255 ],
      navy: [ 0, 0, 128 / 255 ],
      oldlace: [ 253 / 255, 245 / 255, 230 / 255 ],
      olive: [ 128 / 255, 128 / 255, 0 ],
      olivedrab: [ 107 / 255, 142 / 255, 35 / 255 ],
      orange: [ 1, 165 / 255, 0 ],
      orangered: [ 1, 69 / 255, 0 ],
      orchid: [ 218 / 255, 112 / 255, 214 / 255 ],
      palegoldenrod: [ 238 / 255, 232 / 255, 170 / 255 ],
      palegreen: [ 152 / 255, 251 / 255, 152 / 255 ],
      paleturquoise: [ 175 / 255, 238 / 255, 238 / 255 ],
      palevioletred: [ 219 / 255, 112 / 255, 147 / 255 ],
      papayawhip: [ 1, 239 / 255, 213 / 255 ],
      peachpuff: [ 1, 218 / 255, 185 / 255 ],
      peru: [ 205 / 255, 133 / 255, 63 / 255 ],
      pink: [ 1, 192 / 255, 203 / 255 ],
      plum: [ 221 / 255, 160 / 255, 221 / 255 ],
      powderblue: [ 176 / 255, 224 / 255, 230 / 255 ],
      purple: [ 128 / 255, 0, 128 / 255 ],
      rebeccapurple: [ 102 / 255, 51 / 255, 153 / 255 ],
      red: [ 1, 0, 0 ],
      rosybrown: [ 188 / 255, 143 / 255, 143 / 255 ],
      royalblue: [ 65 / 255, 105 / 255, 225 / 255 ],
      saddlebrown: [ 139 / 255, 69 / 255, 19 / 255 ],
      salmon: [ 250 / 255, 128 / 255, 114 / 255 ],
      sandybrown: [ 244 / 255, 164 / 255, 96 / 255 ],
      seagreen: [ 46 / 255, 139 / 255, 87 / 255 ],
      seashell: [ 1, 245 / 255, 238 / 255 ],
      sienna: [ 160 / 255, 82 / 255, 45 / 255 ],
      silver: [ 192 / 255, 192 / 255, 192 / 255 ],
      skyblue: [ 135 / 255, 206 / 255, 235 / 255 ],
      slateblue: [ 106 / 255, 90 / 255, 205 / 255 ],
      slategray: [ 112 / 255, 128 / 255, 144 / 255 ],
      slategrey: [ 112 / 255, 128 / 255, 144 / 255 ],
      snow: [ 1, 250 / 255, 250 / 255 ],
      springgreen: [ 0, 1, 127 / 255 ],
      steelblue: [ 70 / 255, 130 / 255, 180 / 255 ],
      tan: [ 210 / 255, 180 / 255, 140 / 255 ],
      teal: [ 0, 128 / 255, 128 / 255 ],
      thistle: [ 216 / 255, 191 / 255, 216 / 255 ],
      tomato: [ 1, 99 / 255, 71 / 255 ],
      turquoise: [ 64 / 255, 224 / 255, 208 / 255 ],
      violet: [ 238 / 255, 130 / 255, 238 / 255 ],
      wheat: [ 245 / 255, 222 / 255, 179 / 255 ],
      white: [ 1, 1, 1 ],
      whitesmoke: [ 245 / 255, 245 / 255, 245 / 255 ],
      yellow: [ 1, 1, 0 ],
      yellowgreen: [ 154 / 255, 205 / 255, 50 / 255 ]
    };
    var coordGrammar = Array(3).fill('<percentage> | <number>[0, 255]');
    var coordGrammarNumber = Array(3).fill('<number>[0, 255]');
    var sRGB = new RGBColorSpace({
      id: 'srgb',
      name: 'sRGB',
      base: sRGBLinear,
      fromBase: function fromBase(rgb) {
        return rgb.map(function(val) {
          var sign = val < 0 ? -1 : 1;
          var abs = val * sign;
          if (abs > .0031308) {
            return sign * (1.055 * Math.pow(abs, 1 / 2.4) - .055);
          }
          return 12.92 * val;
        });
      },
      toBase: function toBase(rgb) {
        return rgb.map(function(val) {
          var sign = val < 0 ? -1 : 1;
          var abs = val * sign;
          if (abs < .04045) {
            return val / 12.92;
          }
          return sign * Math.pow((abs + .055) / 1.055, 2.4);
        });
      },
      formats: {
        rgb: {
          coords: coordGrammar
        },
        rgb_number: {
          name: 'rgb',
          commas: true,
          coords: coordGrammarNumber,
          noAlpha: true
        },
        color: {},
        rgba: {
          coords: coordGrammar,
          commas: true,
          lastAlpha: true
        },
        rgba_number: {
          name: 'rgba',
          commas: true,
          coords: coordGrammarNumber
        },
        hex: {
          type: 'custom',
          toGamut: true,
          test: function test(str) {
            return /^#([a-f0-9]{3,4}){1,2}$/i.test(str);
          },
          parse: function parse(str) {
            if (str.length <= 5) {
              str = str.replace(/[a-f0-9]/gi, '$&$&');
            }
            var rgba = [];
            str.replace(/[a-f0-9]{2}/gi, function(component) {
              rgba.push(parseInt(component, 16) / 255);
            });
            return {
              spaceId: 'srgb',
              coords: rgba.slice(0, 3),
              alpha: rgba.slice(3)[0]
            };
          },
          serialize: function serialize(coords, alpha) {
            var _ref51 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref51$collapse = _ref51.collapse, collapse = _ref51$collapse === void 0 ? true : _ref51$collapse;
            if (alpha < 1) {
              coords.push(alpha);
            }
            coords = coords.map(function(c4) {
              return Math.round(c4 * 255);
            });
            var collapsible = collapse && coords.every(function(c4) {
              return c4 % 17 === 0;
            });
            var hex = coords.map(function(c4) {
              if (collapsible) {
                return (c4 / 17).toString(16);
              }
              return c4.toString(16).padStart(2, '0');
            }).join('');
            return '#' + hex;
          }
        },
        keyword: {
          type: 'custom',
          test: function test(str) {
            return /^[a-z]+$/i.test(str);
          },
          parse: function parse(str) {
            str = str.toLowerCase();
            var ret = {
              spaceId: 'srgb',
              coords: null,
              alpha: 1
            };
            if (str === 'transparent') {
              ret.coords = KEYWORDS.black;
              ret.alpha = 0;
            } else {
              ret.coords = KEYWORDS[str];
            }
            if (ret.coords) {
              return ret;
            }
          }
        }
      }
    });
    var P3 = new RGBColorSpace({
      id: 'p3',
      name: 'P3',
      base: P3Linear,
      fromBase: sRGB.fromBase,
      toBase: sRGB.toBase,
      formats: {
        color: {
          id: 'display-p3'
        }
      }
    });
    defaults.display_space = sRGB;
    if (typeof CSS !== 'undefined' && (_CSS = CSS) !== null && _CSS !== void 0 && _CSS.supports) {
      for (var _i19 = 0, _arr2 = [ lab, REC2020, P3 ]; _i19 < _arr2.length; _i19++) {
        var space = _arr2[_i19];
        var coords = space.getMinCoords();
        var color = {
          space: space,
          coords: coords,
          alpha: 1
        };
        var str = serialize(color);
        if (CSS.supports('color', str)) {
          defaults.display_space = space;
          break;
        }
      }
    }
    function _display(color) {
      var _CSS2;
      var _ref52 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _ref52$space = _ref52.space, space = _ref52$space === void 0 ? defaults.display_space : _ref52$space, options = _objectWithoutProperties(_ref52, _excluded10);
      var ret = serialize(color, options);
      if (typeof CSS === 'undefined' || (_CSS2 = CSS) !== null && _CSS2 !== void 0 && _CSS2.supports('color', ret) || !defaults.display_space) {
        ret = new String(ret);
        ret.color = color;
      } else {
        var fallbackColor = to(color, space);
        ret = new String(serialize(fallbackColor, options));
        ret.color = fallbackColor;
      }
      return ret;
    }
    function distance(color1, color2) {
      var space = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'lab';
      space = ColorSpace.get(space);
      var coords1 = space.from(color1);
      var coords2 = space.from(color2);
      return Math.sqrt(coords1.reduce(function(acc, c12, i) {
        var c22 = coords2[i];
        if (isNaN(c12) || isNaN(c22)) {
          return acc;
        }
        return acc + Math.pow(c22 - c12, 2);
      }, 0));
    }
    function equals(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      return color1.space === color2.space && color1.alpha === color2.alpha && color1.coords.every(function(c4, i) {
        return c4 === color2.coords[i];
      });
    }
    function getLuminance(color) {
      return get(color, [ XYZ_D65, 'y' ]);
    }
    function setLuminance(color, value) {
      set(color, [ XYZ_D65, 'y' ], value);
    }
    function register$2(Color3) {
      Object.defineProperty(Color3.prototype, 'luminance', {
        get: function get() {
          return getLuminance(this);
        },
        set: function set(value) {
          setLuminance(this, value);
        }
      });
    }
    var luminance = Object.freeze({
      __proto__: null,
      getLuminance: getLuminance,
      setLuminance: setLuminance,
      register: register$2
    });
    function contrastWCAG21(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      var Y1 = Math.max(getLuminance(color1), 0);
      var Y2 = Math.max(getLuminance(color2), 0);
      if (Y2 > Y1) {
        var _ref53 = [ Y2, Y1 ];
        Y1 = _ref53[0];
        Y2 = _ref53[1];
      }
      return (Y1 + .05) / (Y2 + .05);
    }
    var normBG = .56;
    var normTXT = .57;
    var revTXT = .62;
    var revBG = .65;
    var blkThrs = .022;
    var blkClmp = 1.414;
    var loClip = .1;
    var deltaYmin = 5e-4;
    var scaleBoW = 1.14;
    var loBoWoffset = .027;
    var scaleWoB = 1.14;
    function fclamp(Y) {
      if (Y >= blkThrs) {
        return Y;
      }
      return Y + Math.pow(blkThrs - Y, blkClmp);
    }
    function linearize(val) {
      var sign = val < 0 ? -1 : 1;
      var abs = Math.abs(val);
      return sign * Math.pow(abs, 2.4);
    }
    function contrastAPCA(background, foreground) {
      foreground = getColor(foreground);
      background = getColor(background);
      var S;
      var C;
      var Sapc;
      var R, G, B;
      foreground = to(foreground, 'srgb');
      var _foreground$coords = _slicedToArray(foreground.coords, 3);
      R = _foreground$coords[0];
      G = _foreground$coords[1];
      B = _foreground$coords[2];
      var lumTxt = linearize(R) * .2126729 + linearize(G) * .7151522 + linearize(B) * .072175;
      background = to(background, 'srgb');
      var _background$coords = _slicedToArray(background.coords, 3);
      R = _background$coords[0];
      G = _background$coords[1];
      B = _background$coords[2];
      var lumBg = linearize(R) * .2126729 + linearize(G) * .7151522 + linearize(B) * .072175;
      var Ytxt = fclamp(lumTxt);
      var Ybg = fclamp(lumBg);
      var BoW = Ybg > Ytxt;
      if (Math.abs(Ybg - Ytxt) < deltaYmin) {
        C = 0;
      } else {
        if (BoW) {
          S = Math.pow(Ybg, normBG) - Math.pow(Ytxt, normTXT);
          C = S * scaleBoW;
        } else {
          S = Math.pow(Ybg, revBG) - Math.pow(Ytxt, revTXT);
          C = S * scaleWoB;
        }
      }
      if (Math.abs(C) < loClip) {
        Sapc = 0;
      } else if (C > 0) {
        Sapc = C - loBoWoffset;
      } else {
        Sapc = C + loBoWoffset;
      }
      return Sapc * 100;
    }
    function contrastMichelson(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      var Y1 = Math.max(getLuminance(color1), 0);
      var Y2 = Math.max(getLuminance(color2), 0);
      if (Y2 > Y1) {
        var _ref54 = [ Y2, Y1 ];
        Y1 = _ref54[0];
        Y2 = _ref54[1];
      }
      var denom = Y1 + Y2;
      return denom === 0 ? 0 : (Y1 - Y2) / denom;
    }
    var max = 5e4;
    function contrastWeber(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      var Y1 = Math.max(getLuminance(color1), 0);
      var Y2 = Math.max(getLuminance(color2), 0);
      if (Y2 > Y1) {
        var _ref55 = [ Y2, Y1 ];
        Y1 = _ref55[0];
        Y2 = _ref55[1];
      }
      return Y2 === 0 ? max : (Y1 - Y2) / Y2;
    }
    function contrastLstar(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      var L1 = get(color1, [ lab, 'l' ]);
      var L2 = get(color2, [ lab, 'l' ]);
      return Math.abs(L1 - L2);
    }
    var \u03b5$1 = 216 / 24389;
    var \u03b53 = 24 / 116;
    var \u03ba = 24389 / 27;
    var white = WHITES.D65;
    var lab_d65 = new ColorSpace({
      id: 'lab-d65',
      name: 'Lab D65',
      coords: {
        l: {
          refRange: [ 0, 100 ],
          name: 'L'
        },
        a: {
          refRange: [ -125, 125 ]
        },
        b: {
          refRange: [ -125, 125 ]
        }
      },
      white: white,
      base: XYZ_D65,
      fromBase: function fromBase(XYZ) {
        var xyz = XYZ.map(function(value, i) {
          return value / white[i];
        });
        var f = xyz.map(function(value) {
          return value > \u03b5$1 ? Math.cbrt(value) : (\u03ba * value + 16) / 116;
        });
        return [ 116 * f[1] - 16, 500 * (f[0] - f[1]), 200 * (f[1] - f[2]) ];
      },
      toBase: function toBase(Lab) {
        var f = [];
        f[1] = (Lab[0] + 16) / 116;
        f[0] = Lab[1] / 500 + f[1];
        f[2] = f[1] - Lab[2] / 200;
        var xyz = [ f[0] > \u03b53 ? Math.pow(f[0], 3) : (116 * f[0] - 16) / \u03ba, Lab[0] > 8 ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / \u03ba, f[2] > \u03b53 ? Math.pow(f[2], 3) : (116 * f[2] - 16) / \u03ba ];
        return xyz.map(function(value, i) {
          return value * white[i];
        });
      },
      formats: {
        'lab-d65': {
          coords: [ '<number> | <percentage>', '<number>', '<number>' ]
        }
      }
    });
    var phi = Math.pow(5, .5) * .5 + .5;
    function contrastDeltaPhi(color1, color2) {
      color1 = getColor(color1);
      color2 = getColor(color2);
      var Lstr1 = get(color1, [ lab_d65, 'l' ]);
      var Lstr2 = get(color2, [ lab_d65, 'l' ]);
      var deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));
      var contrast2 = Math.pow(deltaPhiStar, 1 / phi) * Math.SQRT2 - 40;
      return contrast2 < 7.5 ? 0 : contrast2;
    }
    var contrastMethods = Object.freeze({
      __proto__: null,
      contrastWCAG21: contrastWCAG21,
      contrastAPCA: contrastAPCA,
      contrastMichelson: contrastMichelson,
      contrastWeber: contrastWeber,
      contrastLstar: contrastLstar,
      contrastDeltaPhi: contrastDeltaPhi
    });
    function contrast(background, foreground) {
      var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (isString(o)) {
        o = {
          algorithm: o
        };
      }
      var _o = o, algorithm = _o.algorithm, rest = _objectWithoutProperties(_o, _excluded11);
      if (!algorithm) {
        var algorithms = Object.keys(contrastMethods).map(function(a2) {
          return a2.replace(/^contrast/, '');
        }).join(', ');
        throw new TypeError('contrast() function needs a contrast algorithm. Please specify one of: '.concat(algorithms));
      }
      background = getColor(background);
      foreground = getColor(foreground);
      for (var a2 in contrastMethods) {
        if ('contrast' + algorithm.toLowerCase() === a2.toLowerCase()) {
          return contrastMethods[a2](background, foreground, rest);
        }
      }
      throw new TypeError('Unknown contrast algorithm: '.concat(algorithm));
    }
    function uv(color) {
      var _getAll = getAll(color, XYZ_D65), _getAll2 = _slicedToArray(_getAll, 3), X = _getAll2[0], Y = _getAll2[1], Z = _getAll2[2];
      var denom = X + 15 * Y + 3 * Z;
      return [ 4 * X / denom, 9 * Y / denom ];
    }
    function xy(color) {
      var _getAll3 = getAll(color, XYZ_D65), _getAll4 = _slicedToArray(_getAll3, 3), X = _getAll4[0], Y = _getAll4[1], Z = _getAll4[2];
      var sum = X + Y + Z;
      return [ X / sum, Y / sum ];
    }
    function register$1(Color3) {
      Object.defineProperty(Color3.prototype, 'uv', {
        get: function get() {
          return uv(this);
        }
      });
      Object.defineProperty(Color3.prototype, 'xy', {
        get: function get() {
          return xy(this);
        }
      });
    }
    var chromaticity = Object.freeze({
      __proto__: null,
      uv: uv,
      xy: xy,
      register: register$1
    });
    function deltaE76(color, sample) {
      return distance(color, sample, 'lab');
    }
    var \u03c0 = Math.PI;
    var d2r = \u03c0 / 180;
    function deltaECMC(color, sample) {
      var _ref56 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref56$l = _ref56.l, l = _ref56$l === void 0 ? 2 : _ref56$l, _ref56$c = _ref56.c, c4 = _ref56$c === void 0 ? 1 : _ref56$c;
      var _lab$from5 = lab.from(color), _lab$from6 = _slicedToArray(_lab$from5, 3), L1 = _lab$from6[0], a1 = _lab$from6[1], b1 = _lab$from6[2];
      var _lch$from = lch.from(lab, [ L1, a1, b1 ]), _lch$from2 = _slicedToArray(_lch$from, 3), C1 = _lch$from2[1], H1 = _lch$from2[2];
      var _lab$from7 = lab.from(sample), _lab$from8 = _slicedToArray(_lab$from7, 3), L2 = _lab$from8[0], a2 = _lab$from8[1], b2 = _lab$from8[2];
      var C2 = lch.from(lab, [ L2, a2, b2 ])[1];
      if (C1 < 0) {
        C1 = 0;
      }
      if (C2 < 0) {
        C2 = 0;
      }
      var \u0394L = L1 - L2;
      var \u0394C = C1 - C2;
      var \u0394a = a1 - a2;
      var \u0394b = b1 - b2;
      var H2 = Math.pow(\u0394a, 2) + Math.pow(\u0394b, 2) - Math.pow(\u0394C, 2);
      var SL = .511;
      if (L1 >= 16) {
        SL = .040975 * L1 / (1 + .01765 * L1);
      }
      var SC = .0638 * C1 / (1 + .0131 * C1) + .638;
      var T;
      if (Number.isNaN(H1)) {
        H1 = 0;
      }
      if (H1 >= 164 && H1 <= 345) {
        T = .56 + Math.abs(.2 * Math.cos((H1 + 168) * d2r));
      } else {
        T = .36 + Math.abs(.4 * Math.cos((H1 + 35) * d2r));
      }
      var C4 = Math.pow(C1, 4);
      var F = Math.sqrt(C4 / (C4 + 1900));
      var SH = SC * (F * T + 1 - F);
      var dE = Math.pow(\u0394L / (l * SL), 2);
      dE += Math.pow(\u0394C / (c4 * SC), 2);
      dE += H2 / Math.pow(SH, 2);
      return Math.sqrt(dE);
    }
    var Yw$1 = 203;
    var XYZ_Abs_D65 = new ColorSpace({
      id: 'xyz-abs-d65',
      name: 'Absolute XYZ D65',
      coords: {
        x: {
          refRange: [ 0, 9504.7 ],
          name: 'Xa'
        },
        y: {
          refRange: [ 0, 1e4 ],
          name: 'Ya'
        },
        z: {
          refRange: [ 0, 10888.3 ],
          name: 'Za'
        }
      },
      base: XYZ_D65,
      fromBase: function fromBase(XYZ) {
        return XYZ.map(function(v) {
          return Math.max(v * Yw$1, 0);
        });
      },
      toBase: function toBase(AbsXYZ) {
        return AbsXYZ.map(function(v) {
          return Math.max(v / Yw$1, 0);
        });
      }
    });
    var b$1 = 1.15;
    var g = .66;
    var n$1 = 2610 / Math.pow(2, 14);
    var ninv$1 = Math.pow(2, 14) / 2610;
    var c1$2 = 3424 / Math.pow(2, 12);
    var c2$2 = 2413 / Math.pow(2, 7);
    var c3$2 = 2392 / Math.pow(2, 7);
    var p = 1.7 * 2523 / Math.pow(2, 5);
    var pinv = Math.pow(2, 5) / (1.7 * 2523);
    var d = -.56;
    var d0 = 16295499532821565e-27;
    var XYZtoCone_M = [ [ .41478972, .579999, .014648 ], [ -.20151, 1.120649, .0531008 ], [ -.0166008, .2648, .6684799 ] ];
    var ConetoXYZ_M = [ [ 1.9242264357876067, -1.0047923125953657, .037651404030618 ], [ .35031676209499907, .7264811939316552, -.06538442294808501 ], [ -.09098281098284752, -.3127282905230739, 1.5227665613052603 ] ];
    var ConetoIab_M = [ [ .5, .5, 0 ], [ 3.524, -4.066708, .542708 ], [ .199076, 1.096799, -1.295875 ] ];
    var IabtoCone_M = [ [ 1, .1386050432715393, .05804731615611886 ], [ .9999999999999999, -.1386050432715393, -.05804731615611886 ], [ .9999999999999998, -.09601924202631895, -.8118918960560388 ] ];
    var Jzazbz = new ColorSpace({
      id: 'jzazbz',
      name: 'Jzazbz',
      coords: {
        jz: {
          refRange: [ 0, 1 ],
          name: 'Jz'
        },
        az: {
          refRange: [ -.5, .5 ]
        },
        bz: {
          refRange: [ -.5, .5 ]
        }
      },
      base: XYZ_Abs_D65,
      fromBase: function fromBase(XYZ) {
        var _XYZ = _slicedToArray(XYZ, 3), Xa = _XYZ[0], Ya = _XYZ[1], Za = _XYZ[2];
        var Xm = b$1 * Xa - (b$1 - 1) * Za;
        var Ym = g * Ya - (g - 1) * Xa;
        var LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);
        var PQLMS = LMS.map(function(val) {
          var num = c1$2 + c2$2 * Math.pow(val / 1e4, n$1);
          var denom = 1 + c3$2 * Math.pow(val / 1e4, n$1);
          return Math.pow(num / denom, p);
        });
        var _multiplyMatrices = multiplyMatrices(ConetoIab_M, PQLMS), _multiplyMatrices2 = _slicedToArray(_multiplyMatrices, 3), Iz = _multiplyMatrices2[0], az = _multiplyMatrices2[1], bz = _multiplyMatrices2[2];
        var Jz = (1 + d) * Iz / (1 + d * Iz) - d0;
        return [ Jz, az, bz ];
      },
      toBase: function toBase(Jzazbz2) {
        var _Jzazbz = _slicedToArray(Jzazbz2, 3), Jz = _Jzazbz[0], az = _Jzazbz[1], bz = _Jzazbz[2];
        var Iz = (Jz + d0) / (1 + d - d * (Jz + d0));
        var PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);
        var LMS = PQLMS.map(function(val) {
          var num = c1$2 - Math.pow(val, pinv);
          var denom = c3$2 * Math.pow(val, pinv) - c2$2;
          var x = 1e4 * Math.pow(num / denom, ninv$1);
          return x;
        });
        var _multiplyMatrices3 = multiplyMatrices(ConetoXYZ_M, LMS), _multiplyMatrices4 = _slicedToArray(_multiplyMatrices3, 3), Xm = _multiplyMatrices4[0], Ym = _multiplyMatrices4[1], Za = _multiplyMatrices4[2];
        var Xa = (Xm + (b$1 - 1) * Za) / b$1;
        var Ya = (Ym + (g - 1) * Xa) / g;
        return [ Xa, Ya, Za ];
      },
      formats: {
        color: {}
      }
    });
    var jzczhz = new ColorSpace({
      id: 'jzczhz',
      name: 'JzCzHz',
      coords: {
        jz: {
          refRange: [ 0, 1 ],
          name: 'Jz'
        },
        cz: {
          refRange: [ 0, 1 ],
          name: 'Chroma'
        },
        hz: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        }
      },
      base: Jzazbz,
      fromBase: function fromBase(jzazbz) {
        var _jzazbz = _slicedToArray(jzazbz, 3), Jz = _jzazbz[0], az = _jzazbz[1], bz = _jzazbz[2];
        var hue;
        var \u03b52 = 2e-4;
        if (Math.abs(az) < \u03b52 && Math.abs(bz) < \u03b52) {
          hue = NaN;
        } else {
          hue = Math.atan2(bz, az) * 180 / Math.PI;
        }
        return [ Jz, Math.sqrt(Math.pow(az, 2) + Math.pow(bz, 2)), constrain(hue) ];
      },
      toBase: function toBase(jzczhz2) {
        return [ jzczhz2[0], jzczhz2[1] * Math.cos(jzczhz2[2] * Math.PI / 180), jzczhz2[1] * Math.sin(jzczhz2[2] * Math.PI / 180) ];
      },
      formats: {
        color: {}
      }
    });
    function deltaEJz(color, sample) {
      var _jzczhz$from = jzczhz.from(color), _jzczhz$from2 = _slicedToArray(_jzczhz$from, 3), Jz1 = _jzczhz$from2[0], Cz1 = _jzczhz$from2[1], Hz1 = _jzczhz$from2[2];
      var _jzczhz$from3 = jzczhz.from(sample), _jzczhz$from4 = _slicedToArray(_jzczhz$from3, 3), Jz2 = _jzczhz$from4[0], Cz2 = _jzczhz$from4[1], Hz2 = _jzczhz$from4[2];
      var \u0394J = Jz1 - Jz2;
      var \u0394C = Cz1 - Cz2;
      if (Number.isNaN(Hz1) && Number.isNaN(Hz2)) {
        Hz1 = 0;
        Hz2 = 0;
      } else if (Number.isNaN(Hz1)) {
        Hz1 = Hz2;
      } else if (Number.isNaN(Hz2)) {
        Hz2 = Hz1;
      }
      var \u0394h = Hz1 - Hz2;
      var \u0394H = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin(\u0394h / 2 * (Math.PI / 180));
      return Math.sqrt(Math.pow(\u0394J, 2) + Math.pow(\u0394C, 2) + Math.pow(\u0394H, 2));
    }
    var c1$1 = 3424 / 4096;
    var c2$1 = 2413 / 128;
    var c3$1 = 2392 / 128;
    var m1 = 2610 / 16384;
    var m2 = 2523 / 32;
    var im1 = 16384 / 2610;
    var im2 = 32 / 2523;
    var XYZtoLMS_M$1 = [ [ .3592, .6976, -.0358 ], [ -.1922, 1.1004, .0755 ], [ .007, .0749, .8434 ] ];
    var LMStoIPT_M = [ [ 2048 / 4096, 2048 / 4096, 0 ], [ 6610 / 4096, -13613 / 4096, 7003 / 4096 ], [ 17933 / 4096, -17390 / 4096, -543 / 4096 ] ];
    var IPTtoLMS_M = [ [ .9999888965628402, .008605050147287059, .11103437159861648 ], [ 1.00001110343716, -.008605050147287059, -.11103437159861648 ], [ 1.0000320633910054, .56004913547279, -.3206339100541203 ] ];
    var LMStoXYZ_M$1 = [ [ 2.0701800566956137, -1.326456876103021, .20661600684785517 ], [ .3649882500326575, .6804673628522352, -.04542175307585323 ], [ -.04959554223893211, -.04942116118675749, 1.1879959417328034 ] ];
    var ictcp = new ColorSpace({
      id: 'ictcp',
      name: 'ICTCP',
      coords: {
        i: {
          refRange: [ 0, 1 ],
          name: 'I'
        },
        ct: {
          refRange: [ -.5, .5 ],
          name: 'CT'
        },
        cp: {
          refRange: [ -.5, .5 ],
          name: 'CP'
        }
      },
      base: XYZ_Abs_D65,
      fromBase: function fromBase(XYZ) {
        var LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);
        return LMStoICtCp(LMS);
      },
      toBase: function toBase(ICtCp) {
        var LMS = ICtCptoLMS(ICtCp);
        return multiplyMatrices(LMStoXYZ_M$1, LMS);
      },
      formats: {
        color: {}
      }
    });
    function LMStoICtCp(LMS) {
      var PQLMS = LMS.map(function(val) {
        var num = c1$1 + c2$1 * Math.pow(val / 1e4, m1);
        var denom = 1 + c3$1 * Math.pow(val / 1e4, m1);
        return Math.pow(num / denom, m2);
      });
      return multiplyMatrices(LMStoIPT_M, PQLMS);
    }
    function ICtCptoLMS(ICtCp) {
      var PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);
      var LMS = PQLMS.map(function(val) {
        var num = Math.max(Math.pow(val, im2) - c1$1, 0);
        var denom = c2$1 - c3$1 * Math.pow(val, im2);
        return 1e4 * Math.pow(num / denom, im1);
      });
      return LMS;
    }
    function deltaEITP(color, sample) {
      var _ictcp$from = ictcp.from(color), _ictcp$from2 = _slicedToArray(_ictcp$from, 3), I1 = _ictcp$from2[0], T1 = _ictcp$from2[1], P1 = _ictcp$from2[2];
      var _ictcp$from3 = ictcp.from(sample), _ictcp$from4 = _slicedToArray(_ictcp$from3, 3), I2 = _ictcp$from4[0], T2 = _ictcp$from4[1], P2 = _ictcp$from4[2];
      return 720 * Math.sqrt(Math.pow(I1 - I2, 2) + .25 * Math.pow(T1 - T2, 2) + Math.pow(P1 - P2, 2));
    }
    var XYZtoLMS_M = [ [ .8190224432164319, .3619062562801221, -.12887378261216414 ], [ .0329836671980271, .9292868468965546, .03614466816999844 ], [ .048177199566046255, .26423952494422764, .6335478258136937 ] ];
    var LMStoXYZ_M = [ [ 1.2268798733741557, -.5578149965554813, .28139105017721583 ], [ -.04057576262431372, 1.1122868293970594, -.07171106666151701 ], [ -.07637294974672142, -.4214933239627914, 1.5869240244272418 ] ];
    var LMStoLab_M = [ [ .2104542553, .793617785, -.0040720468 ], [ 1.9779984951, -2.428592205, .4505937099 ], [ .0259040371, .7827717662, -.808675766 ] ];
    var LabtoLMS_M = [ [ .9999999984505198, .39633779217376786, .2158037580607588 ], [ 1.0000000088817609, -.10556134232365635, -.06385417477170591 ], [ 1.0000000546724108, -.08948418209496575, -1.2914855378640917 ] ];
    var OKLab = new ColorSpace({
      id: 'oklab',
      name: 'OKLab',
      coords: {
        l: {
          refRange: [ 0, 1 ],
          name: 'L'
        },
        a: {
          refRange: [ -.4, .4 ]
        },
        b: {
          refRange: [ -.4, .4 ]
        }
      },
      white: 'D65',
      base: XYZ_D65,
      fromBase: function fromBase(XYZ) {
        var LMS = multiplyMatrices(XYZtoLMS_M, XYZ);
        var LMSg = LMS.map(function(val) {
          return Math.cbrt(val);
        });
        return multiplyMatrices(LMStoLab_M, LMSg);
      },
      toBase: function toBase(OKLab2) {
        var LMSg = multiplyMatrices(LabtoLMS_M, OKLab2);
        var LMS = LMSg.map(function(val) {
          return Math.pow(val, 3);
        });
        return multiplyMatrices(LMStoXYZ_M, LMS);
      },
      formats: {
        oklab: {
          coords: [ '<number> | <percentage>', '<number>', '<number>' ]
        }
      }
    });
    function deltaEOK(color, sample) {
      var _OKLab$from = OKLab.from(color), _OKLab$from2 = _slicedToArray(_OKLab$from, 3), L1 = _OKLab$from2[0], a1 = _OKLab$from2[1], b1 = _OKLab$from2[2];
      var _OKLab$from3 = OKLab.from(sample), _OKLab$from4 = _slicedToArray(_OKLab$from3, 3), L2 = _OKLab$from4[0], a2 = _OKLab$from4[1], b2 = _OKLab$from4[2];
      var \u0394L = L1 - L2;
      var \u0394a = a1 - a2;
      var \u0394b = b1 - b2;
      return Math.sqrt(Math.pow(\u0394L, 2) + Math.pow(\u0394a, 2) + Math.pow(\u0394b, 2));
    }
    var deltaEMethods = Object.freeze({
      __proto__: null,
      deltaE76: deltaE76,
      deltaECMC: deltaECMC,
      deltaE2000: deltaE2000,
      deltaEJz: deltaEJz,
      deltaEITP: deltaEITP,
      deltaEOK: deltaEOK
    });
    function deltaE(c12, c22) {
      var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (isString(o)) {
        o = {
          method: o
        };
      }
      var _o2 = o, _o2$method = _o2.method, method = _o2$method === void 0 ? defaults.deltaE : _o2$method, rest = _objectWithoutProperties(_o2, _excluded12);
      c12 = getColor(c12);
      c22 = getColor(c22);
      for (var m3 in deltaEMethods) {
        if ('deltae' + method.toLowerCase() === m3.toLowerCase()) {
          return deltaEMethods[m3](c12, c22, rest);
        }
      }
      throw new TypeError('Unknown deltaE method: '.concat(method));
    }
    function lighten(color) {
      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .25;
      var space = ColorSpace.get('oklch', 'lch');
      var lightness = [ space, 'l' ];
      return set(color, lightness, function(l) {
        return l * (1 + amount);
      });
    }
    function darken(color) {
      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .25;
      var space = ColorSpace.get('oklch', 'lch');
      var lightness = [ space, 'l' ];
      return set(color, lightness, function(l) {
        return l * (1 - amount);
      });
    }
    var variations = Object.freeze({
      __proto__: null,
      lighten: lighten,
      darken: darken
    });
    function mix(c12, c22) {
      var p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .5;
      var o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var _ref57 = [ getColor(c12), getColor(c22) ];
      c12 = _ref57[0];
      c22 = _ref57[1];
      if (type(p2) === 'object') {
        var _ref58 = [ .5, p2 ];
        p2 = _ref58[0];
        o = _ref58[1];
      }
      var _o3 = o, space = _o3.space, outputSpace = _o3.outputSpace, premultiplied = _o3.premultiplied;
      var r = range(c12, c22, {
        space: space,
        outputSpace: outputSpace,
        premultiplied: premultiplied
      });
      return r(p2);
    }
    function steps(c12, c22) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var colorRange;
      if (isRange(c12)) {
        colorRange = c12;
        options = c22;
        var _colorRange$rangeArgs = _slicedToArray(colorRange.rangeArgs.colors, 2);
        c12 = _colorRange$rangeArgs[0];
        c22 = _colorRange$rangeArgs[1];
      }
      var _options2 = options, maxDeltaE = _options2.maxDeltaE, deltaEMethod = _options2.deltaEMethod, _options2$steps = _options2.steps, steps2 = _options2$steps === void 0 ? 2 : _options2$steps, _options2$maxSteps = _options2.maxSteps, maxSteps = _options2$maxSteps === void 0 ? 1e3 : _options2$maxSteps, rangeOptions = _objectWithoutProperties(_options2, _excluded13);
      if (!colorRange) {
        var _ref59 = [ getColor(c12), getColor(c22) ];
        c12 = _ref59[0];
        c22 = _ref59[1];
        colorRange = range(c12, c22, rangeOptions);
      }
      var totalDelta = deltaE(c12, c22);
      var actualSteps = maxDeltaE > 0 ? Math.max(steps2, Math.ceil(totalDelta / maxDeltaE) + 1) : steps2;
      var ret = [];
      if (maxSteps !== void 0) {
        actualSteps = Math.min(actualSteps, maxSteps);
      }
      if (actualSteps === 1) {
        ret = [ {
          p: .5,
          color: colorRange(.5)
        } ];
      } else {
        var step = 1 / (actualSteps - 1);
        ret = Array.from({
          length: actualSteps
        }, function(_, i) {
          var p2 = i * step;
          return {
            p: p2,
            color: colorRange(p2)
          };
        });
      }
      if (maxDeltaE > 0) {
        var maxDelta = ret.reduce(function(acc, cur, i) {
          if (i === 0) {
            return 0;
          }
          var \u0394\u0395 = deltaE(cur.color, ret[i - 1].color, deltaEMethod);
          return Math.max(acc, \u0394\u0395);
        }, 0);
        while (maxDelta > maxDeltaE) {
          maxDelta = 0;
          for (var _i20 = 1; _i20 < ret.length && ret.length < maxSteps; _i20++) {
            var prev = ret[_i20 - 1];
            var cur = ret[_i20];
            var p2 = (cur.p + prev.p) / 2;
            var _color = colorRange(p2);
            maxDelta = Math.max(maxDelta, deltaE(_color, prev.color), deltaE(_color, cur.color));
            ret.splice(_i20, 0, {
              p: p2,
              color: colorRange(p2)
            });
            _i20++;
          }
        }
      }
      ret = ret.map(function(a2) {
        return a2.color;
      });
      return ret;
    }
    function range(color1, color2) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (isRange(color1)) {
        var r = color1, options2 = color2;
        return range.apply(void 0, _toConsumableArray(r.rangeArgs.colors).concat([ _extends({}, r.rangeArgs.options, options2) ]));
      }
      var space = options.space, outputSpace = options.outputSpace, progression = options.progression, premultiplied = options.premultiplied;
      color1 = getColor(color1);
      color2 = getColor(color2);
      color1 = clone2(color1);
      color2 = clone2(color2);
      var rangeArgs = {
        colors: [ color1, color2 ],
        options: options
      };
      if (space) {
        space = ColorSpace.get(space);
      } else {
        space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;
      }
      outputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;
      color1 = to(color1, space);
      color2 = to(color2, space);
      color1 = toGamut(color1);
      color2 = toGamut(color2);
      if (space.coords.h && space.coords.h.type === 'angle') {
        var arc = options.hue = options.hue || 'shorter';
        var hue = [ space, 'h' ];
        var _ref60 = [ get(color1, hue), get(color2, hue) ], \u03b81 = _ref60[0], \u03b82 = _ref60[1];
        var _adjust = adjust(arc, [ \u03b81, \u03b82 ]);
        var _adjust2 = _slicedToArray(_adjust, 2);
        \u03b81 = _adjust2[0];
        \u03b82 = _adjust2[1];
        set(color1, hue, \u03b81);
        set(color2, hue, \u03b82);
      }
      if (premultiplied) {
        color1.coords = color1.coords.map(function(c4) {
          return c4 * color1.alpha;
        });
        color2.coords = color2.coords.map(function(c4) {
          return c4 * color2.alpha;
        });
      }
      return Object.assign(function(p2) {
        p2 = progression ? progression(p2) : p2;
        var coords = color1.coords.map(function(start, i) {
          var end = color2.coords[i];
          return interpolate(start, end, p2);
        });
        var alpha = interpolate(color1.alpha, color2.alpha, p2);
        var ret = {
          space: space,
          coords: coords,
          alpha: alpha
        };
        if (premultiplied) {
          ret.coords = ret.coords.map(function(c4) {
            return c4 / alpha;
          });
        }
        if (outputSpace !== space) {
          ret = to(ret, outputSpace);
        }
        return ret;
      }, {
        rangeArgs: rangeArgs
      });
    }
    function isRange(val) {
      return type(val) === 'function' && !!val.rangeArgs;
    }
    defaults.interpolationSpace = 'lab';
    function register(Color3) {
      Color3.defineFunction('mix', mix, {
        returns: 'color'
      });
      Color3.defineFunction('range', range, {
        returns: 'function<color>'
      });
      Color3.defineFunction('steps', steps, {
        returns: 'array<color>'
      });
    }
    var interpolation = Object.freeze({
      __proto__: null,
      mix: mix,
      steps: steps,
      range: range,
      isRange: isRange,
      register: register
    });
    var HSL = new ColorSpace({
      id: 'hsl',
      name: 'HSL',
      coords: {
        h: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        },
        s: {
          range: [ 0, 100 ],
          name: 'Saturation'
        },
        l: {
          range: [ 0, 100 ],
          name: 'Lightness'
        }
      },
      base: sRGB,
      fromBase: function fromBase(rgb) {
        var max2 = Math.max.apply(Math, _toConsumableArray(rgb));
        var min = Math.min.apply(Math, _toConsumableArray(rgb));
        var _rgb = _slicedToArray(rgb, 3), r = _rgb[0], g2 = _rgb[1], b2 = _rgb[2];
        var h = NaN, s = 0, l = (min + max2) / 2;
        var d2 = max2 - min;
        if (d2 !== 0) {
          s = l === 0 || l === 1 ? 0 : (max2 - l) / Math.min(l, 1 - l);
          switch (max2) {
           case r:
            h = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
            break;

           case g2:
            h = (b2 - r) / d2 + 2;
            break;

           case b2:
            h = (r - g2) / d2 + 4;
          }
          h = h * 60;
        }
        return [ h, s * 100, l * 100 ];
      },
      toBase: function toBase(hsl) {
        var _hsl = _slicedToArray(hsl, 3), h = _hsl[0], s = _hsl[1], l = _hsl[2];
        h = h % 360;
        if (h < 0) {
          h += 360;
        }
        s /= 100;
        l /= 100;
        function f(n2) {
          var k = (n2 + h / 30) % 12;
          var a2 = s * Math.min(l, 1 - l);
          return l - a2 * Math.max(-1, Math.min(k - 3, 9 - k, 1));
        }
        return [ f(0), f(8), f(4) ];
      },
      formats: {
        hsl: {
          toGamut: true,
          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ]
        },
        hsla: {
          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ],
          commas: true,
          lastAlpha: true
        }
      }
    });
    var HSV = new ColorSpace({
      id: 'hsv',
      name: 'HSV',
      coords: {
        h: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        },
        s: {
          range: [ 0, 100 ],
          name: 'Saturation'
        },
        v: {
          range: [ 0, 100 ],
          name: 'Value'
        }
      },
      base: HSL,
      fromBase: function fromBase(hsl) {
        var _hsl2 = _slicedToArray(hsl, 3), h = _hsl2[0], s = _hsl2[1], l = _hsl2[2];
        s /= 100;
        l /= 100;
        var v = l + s * Math.min(l, 1 - l);
        return [ h, v === 0 ? 0 : 200 * (1 - l / v), 100 * v ];
      },
      toBase: function toBase(hsv) {
        var _hsv = _slicedToArray(hsv, 3), h = _hsv[0], s = _hsv[1], v = _hsv[2];
        s /= 100;
        v /= 100;
        var l = v * (1 - s / 2);
        return [ h, l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l) * 100, l * 100 ];
      },
      formats: {
        color: {
          toGamut: true
        }
      }
    });
    var hwb = new ColorSpace({
      id: 'hwb',
      name: 'HWB',
      coords: {
        h: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        },
        w: {
          range: [ 0, 100 ],
          name: 'Whiteness'
        },
        b: {
          range: [ 0, 100 ],
          name: 'Blackness'
        }
      },
      base: HSV,
      fromBase: function fromBase(hsv) {
        var _hsv2 = _slicedToArray(hsv, 3), h = _hsv2[0], s = _hsv2[1], v = _hsv2[2];
        return [ h, v * (100 - s) / 100, 100 - v ];
      },
      toBase: function toBase(hwb2) {
        var _hwb = _slicedToArray(hwb2, 3), h = _hwb[0], w = _hwb[1], b2 = _hwb[2];
        w /= 100;
        b2 /= 100;
        var sum = w + b2;
        if (sum >= 1) {
          var gray = w / sum;
          return [ h, 0, gray * 100 ];
        }
        var v = 1 - b2;
        var s = v === 0 ? 0 : 1 - w / v;
        return [ h, s * 100, v * 100 ];
      },
      formats: {
        hwb: {
          toGamut: true,
          coords: [ '<number> | <angle>', '<percentage>', '<percentage>' ]
        }
      }
    });
    var toXYZ_M$2 = [ [ .5766690429101305, .1855582379065463, .1882286462349947 ], [ .29734497525053605, .6273635662554661, .07529145849399788 ], [ .02703136138641234, .07068885253582723, .9913375368376388 ] ];
    var fromXYZ_M$2 = [ [ 2.0415879038107465, -.5650069742788596, -.34473135077832956 ], [ -.9692436362808795, 1.8759675015077202, .04155505740717557 ], [ .013444280632031142, -.11836239223101838, 1.0151749943912054 ] ];
    var A98Linear = new RGBColorSpace({
      id: 'a98rgb-linear',
      name: 'Linear Adobe\xae 98 RGB compatible',
      white: 'D65',
      toXYZ_M: toXYZ_M$2,
      fromXYZ_M: fromXYZ_M$2
    });
    var a98rgb = new RGBColorSpace({
      id: 'a98rgb',
      name: 'Adobe\xae 98 RGB compatible',
      base: A98Linear,
      toBase: function toBase(RGB) {
        return RGB.map(function(val) {
          return Math.pow(Math.abs(val), 563 / 256) * Math.sign(val);
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(val) {
          return Math.pow(Math.abs(val), 256 / 563) * Math.sign(val);
        });
      },
      formats: {
        color: {
          id: 'a98-rgb'
        }
      }
    });
    var toXYZ_M$1 = [ [ .7977604896723027, .13518583717574031, .0313493495815248 ], [ .2880711282292934, .7118432178101014, 8565396060525902e-20 ], [ 0, 0, .8251046025104601 ] ];
    var fromXYZ_M$1 = [ [ 1.3457989731028281, -.25558010007997534, -.05110628506753401 ], [ -.5446224939028347, 1.5082327413132781, .02053603239147973 ], [ 0, 0, 1.2119675456389454 ] ];
    var ProPhotoLinear = new RGBColorSpace({
      id: 'prophoto-linear',
      name: 'Linear ProPhoto',
      white: 'D50',
      base: XYZ_D50,
      toXYZ_M: toXYZ_M$1,
      fromXYZ_M: fromXYZ_M$1
    });
    var Et = 1 / 512;
    var Et2 = 16 / 512;
    var prophoto = new RGBColorSpace({
      id: 'prophoto',
      name: 'ProPhoto',
      base: ProPhotoLinear,
      toBase: function toBase(RGB) {
        return RGB.map(function(v) {
          return v < Et2 ? v / 16 : Math.pow(v, 1.8);
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(v) {
          return v >= Et ? Math.pow(v, 1 / 1.8) : 16 * v;
        });
      },
      formats: {
        color: {
          id: 'prophoto-rgb'
        }
      }
    });
    var oklch = new ColorSpace({
      id: 'oklch',
      name: 'OKLCh',
      coords: {
        l: {
          refRange: [ 0, 1 ],
          name: 'Lightness'
        },
        c: {
          refRange: [ 0, .4 ],
          name: 'Chroma'
        },
        h: {
          refRange: [ 0, 360 ],
          type: 'angle',
          name: 'Hue'
        }
      },
      white: 'D65',
      base: OKLab,
      fromBase: function fromBase(oklab) {
        var _oklab = _slicedToArray(oklab, 3), L = _oklab[0], a2 = _oklab[1], b2 = _oklab[2];
        var h;
        var \u03b52 = 2e-4;
        if (Math.abs(a2) < \u03b52 && Math.abs(b2) < \u03b52) {
          h = NaN;
        } else {
          h = Math.atan2(b2, a2) * 180 / Math.PI;
        }
        return [ L, Math.sqrt(Math.pow(a2, 2) + Math.pow(b2, 2)), constrain(h) ];
      },
      toBase: function toBase(oklch2) {
        var _oklch = _slicedToArray(oklch2, 3), L = _oklch[0], C = _oklch[1], h = _oklch[2];
        var a2, b2;
        if (isNaN(h)) {
          a2 = 0;
          b2 = 0;
        } else {
          a2 = C * Math.cos(h * Math.PI / 180);
          b2 = C * Math.sin(h * Math.PI / 180);
        }
        return [ L, a2, b2 ];
      },
      formats: {
        oklch: {
          coords: [ '<number> | <percentage>', '<number>', '<number> | <angle>' ]
        }
      }
    });
    var Yw = 203;
    var n = 2610 / Math.pow(2, 14);
    var ninv = Math.pow(2, 14) / 2610;
    var m = 2523 / Math.pow(2, 5);
    var minv = Math.pow(2, 5) / 2523;
    var c1 = 3424 / Math.pow(2, 12);
    var c2 = 2413 / Math.pow(2, 7);
    var c3 = 2392 / Math.pow(2, 7);
    var rec2100Pq = new RGBColorSpace({
      id: 'rec2100pq',
      name: 'REC.2100-PQ',
      base: REC2020Linear,
      toBase: function toBase(RGB) {
        return RGB.map(function(val) {
          var x = Math.pow(Math.max(Math.pow(val, minv) - c1, 0) / (c2 - c3 * Math.pow(val, minv)), ninv);
          return x * 1e4 / Yw;
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(val) {
          var x = Math.max(val * Yw / 1e4, 0);
          var num = c1 + c2 * Math.pow(x, n);
          var denom = 1 + c3 * Math.pow(x, n);
          return Math.pow(num / denom, m);
        });
      },
      formats: {
        color: {
          id: 'rec2100-pq'
        }
      }
    });
    var a = .17883277;
    var b = .28466892;
    var c = .55991073;
    var scale = 3.7743;
    var rec2100Hlg = new RGBColorSpace({
      id: 'rec2100hlg',
      cssid: 'rec2100-hlg',
      name: 'REC.2100-HLG',
      referred: 'scene',
      base: REC2020Linear,
      toBase: function toBase(RGB) {
        return RGB.map(function(val) {
          if (val <= .5) {
            return Math.pow(val, 2) / 3 * scale;
          }
          return Math.exp((val - c) / a + b) / 12 * scale;
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(val) {
          val /= scale;
          if (val <= 1 / 12) {
            return Math.sqrt(3 * val);
          }
          return a * Math.log(12 * val - b) + c;
        });
      },
      formats: {
        color: {
          id: 'rec2100-hlg'
        }
      }
    });
    var CATs = {};
    hooks.add('chromatic-adaptation-start', function(env) {
      if (env.options.method) {
        env.M = adapt(env.W1, env.W2, env.options.method);
      }
    });
    hooks.add('chromatic-adaptation-end', function(env) {
      if (!env.M) {
        env.M = adapt(env.W1, env.W2, env.options.method);
      }
    });
    function defineCAT(_ref61) {
      var id = _ref61.id, toCone_M = _ref61.toCone_M, fromCone_M = _ref61.fromCone_M;
      CATs[id] = arguments[0];
    }
    function adapt(W1, W2) {
      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Bradford';
      var method = CATs[id];
      var _multiplyMatrices5 = multiplyMatrices(method.toCone_M, W1), _multiplyMatrices6 = _slicedToArray(_multiplyMatrices5, 3), \u03c1s = _multiplyMatrices6[0], \u03b3s = _multiplyMatrices6[1], \u03b2s = _multiplyMatrices6[2];
      var _multiplyMatrices7 = multiplyMatrices(method.toCone_M, W2), _multiplyMatrices8 = _slicedToArray(_multiplyMatrices7, 3), \u03c1d = _multiplyMatrices8[0], \u03b3d = _multiplyMatrices8[1], \u03b2d = _multiplyMatrices8[2];
      var scale2 = [ [ \u03c1d / \u03c1s, 0, 0 ], [ 0, \u03b3d / \u03b3s, 0 ], [ 0, 0, \u03b2d / \u03b2s ] ];
      var scaled_cone_M = multiplyMatrices(scale2, method.toCone_M);
      var adapt_M = multiplyMatrices(method.fromCone_M, scaled_cone_M);
      return adapt_M;
    }
    defineCAT({
      id: 'von Kries',
      toCone_M: [ [ .40024, .7076, -.08081 ], [ -.2263, 1.16532, .0457 ], [ 0, 0, .91822 ] ],
      fromCone_M: [ [ 1.8599364, -1.1293816, .2198974 ], [ .3611914, .6388125, -64e-7 ], [ 0, 0, 1.0890636 ] ]
    });
    defineCAT({
      id: 'Bradford',
      toCone_M: [ [ .8951, .2664, -.1614 ], [ -.7502, 1.7135, .0367 ], [ .0389, -.0685, 1.0296 ] ],
      fromCone_M: [ [ .9869929, -.1470543, .1599627 ], [ .4323053, .5183603, .0492912 ], [ -.0085287, .0400428, .9684867 ] ]
    });
    defineCAT({
      id: 'CAT02',
      toCone_M: [ [ .7328, .4296, -.1624 ], [ -.7036, 1.6975, .0061 ], [ .003, .0136, .9834 ] ],
      fromCone_M: [ [ 1.0961238, -.278869, .1827452 ], [ .454369, .4735332, .0720978 ], [ -.0096276, -.005698, 1.0153256 ] ]
    });
    defineCAT({
      id: 'CAT16',
      toCone_M: [ [ .401288, .650173, -.051461 ], [ -.250268, 1.204414, .045854 ], [ -.002079, .048952, .953127 ] ],
      fromCone_M: [ [ 1.862067855087233, -1.011254630531685, .1491867754444518 ], [ .3875265432361372, .6214474419314753, -.008973985167612518 ], [ -.01584149884933386, -.03412293802851557, 1.04996443687785 ] ]
    });
    Object.assign(WHITES, {
      A: [ 1.0985, 1, .35585 ],
      C: [ .98074, 1, 1.18232 ],
      D55: [ .95682, 1, .92149 ],
      D75: [ .94972, 1, 1.22638 ],
      E: [ 1, 1, 1 ],
      F2: [ .99186, 1, .67393 ],
      F7: [ .95041, 1, 1.08747 ],
      F11: [ 1.00962, 1, .6435 ]
    });
    WHITES.ACES = [ .32168 / .33767, 1, (1 - .32168 - .33767) / .33767 ];
    var toXYZ_M = [ [ .6624541811085053, .13400420645643313, .1561876870049078 ], [ .27222871678091454, .6740817658111484, .05368951740793705 ], [ -.005574649490394108, .004060733528982826, 1.0103391003129971 ] ];
    var fromXYZ_M = [ [ 1.6410233796943257, -.32480329418479, -.23642469523761225 ], [ -.6636628587229829, 1.6153315916573379, .016756347685530137 ], [ .011721894328375376, -.008284441996237409, .9883948585390215 ] ];
    var ACEScg = new RGBColorSpace({
      id: 'acescg',
      name: 'ACEScg',
      coords: {
        r: {
          range: [ 0, 65504 ],
          name: 'Red'
        },
        g: {
          range: [ 0, 65504 ],
          name: 'Green'
        },
        b: {
          range: [ 0, 65504 ],
          name: 'Blue'
        }
      },
      referred: 'scene',
      white: WHITES.ACES,
      toXYZ_M: toXYZ_M,
      fromXYZ_M: fromXYZ_M,
      formats: {
        color: {}
      }
    });
    var \u03b5 = Math.pow(2, -16);
    var ACES_min_nonzero = -.35828683;
    var ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52;
    var acescc = new RGBColorSpace({
      id: 'acescc',
      name: 'ACEScc',
      coords: {
        r: {
          range: [ ACES_min_nonzero, ACES_cc_max ],
          name: 'Red'
        },
        g: {
          range: [ ACES_min_nonzero, ACES_cc_max ],
          name: 'Green'
        },
        b: {
          range: [ ACES_min_nonzero, ACES_cc_max ],
          name: 'Blue'
        }
      },
      referred: 'scene',
      base: ACEScg,
      toBase: function toBase(RGB) {
        var low = (9.72 - 15) / 17.52;
        return RGB.map(function(val) {
          if (val <= low) {
            return (Math.pow(2, val * 17.52 - 9.72) - \u03b5) * 2;
          } else if (val < ACES_cc_max) {
            return Math.pow(2, val * 17.52 - 9.72);
          } else {
            return 65504;
          }
        });
      },
      fromBase: function fromBase(RGB) {
        return RGB.map(function(val) {
          if (val <= 0) {
            return (Math.log2(\u03b5) + 9.72) / 17.52;
          } else if (val < \u03b5) {
            return (Math.log2(\u03b5 + val * .5) + 9.72) / 17.52;
          } else {
            return (Math.log2(val) + 9.72) / 17.52;
          }
        });
      },
      formats: {
        color: {}
      }
    });
    var spaces = Object.freeze({
      __proto__: null,
      XYZ_D65: XYZ_D65,
      XYZ_D50: XYZ_D50,
      XYZ_ABS_D65: XYZ_Abs_D65,
      Lab_D65: lab_d65,
      Lab: lab,
      LCH: lch,
      sRGB_Linear: sRGBLinear,
      sRGB: sRGB,
      HSL: HSL,
      HWB: hwb,
      HSV: HSV,
      P3_Linear: P3Linear,
      P3: P3,
      A98RGB_Linear: A98Linear,
      A98RGB: a98rgb,
      ProPhoto_Linear: ProPhotoLinear,
      ProPhoto: prophoto,
      REC_2020_Linear: REC2020Linear,
      REC_2020: REC2020,
      OKLab: OKLab,
      OKLCH: oklch,
      Jzazbz: Jzazbz,
      JzCzHz: jzczhz,
      ICTCP: ictcp,
      REC_2100_PQ: rec2100Pq,
      REC_2100_HLG: rec2100Hlg,
      ACEScg: ACEScg,
      ACEScc: acescc
    });
    var _Color = (_space = new WeakMap(), function() {
      function Color() {
        var _this2 = this;
        _classCallCheck(this, Color);
        _classPrivateFieldInitSpec(this, _space, void 0);
        var color;
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        if (args.length === 1) {
          color = getColor(args[0]);
        }
        var space, coords, alpha;
        if (color) {
          space = color.space || color.spaceId;
          coords = color.coords;
          alpha = color.alpha;
        } else {
          space = args[0];
          coords = args[1];
          alpha = args[2];
        }
        _classPrivateFieldSet(_space, this, ColorSpace.get(space));
        this.coords = coords ? coords.slice() : [ 0, 0, 0 ];
        this.alpha = alpha < 1 ? alpha : 1;
        for (var _i21 = 0; _i21 < this.coords.length; _i21++) {
          if (this.coords[_i21] === 'NaN') {
            this.coords[_i21] = NaN;
          }
        }
        var _loop7 = function _loop7(id) {
          Object.defineProperty(_this2, id, {
            get: function get() {
              return _this2.get(id);
            },
            set: function set(value) {
              return _this2.set(id, value);
            }
          });
        };
        for (var id in _classPrivateFieldGet(_space, this).coords) {
          _loop7(id);
        }
      }
      return _createClass(Color, [ {
        key: 'space',
        get: function get() {
          return _classPrivateFieldGet(_space, this);
        }
      }, {
        key: 'spaceId',
        get: function get() {
          return _classPrivateFieldGet(_space, this).id;
        }
      }, {
        key: 'clone',
        value: function clone() {
          return new _Color(this.space, this.coords, this.alpha);
        }
      }, {
        key: 'toJSON',
        value: function toJSON() {
          return {
            spaceId: this.spaceId,
            coords: this.coords,
            alpha: this.alpha
          };
        }
      }, {
        key: 'display',
        value: function display() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          var ret = _display.apply(void 0, [ this ].concat(args));
          ret.color = new _Color(ret.color);
          return ret;
        }
      } ], [ {
        key: 'get',
        value: function get(color) {
          if (color instanceof _Color) {
            return color;
          }
          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
            args[_key5 - 1] = arguments[_key5];
          }
          return _construct(_Color, [ color ].concat(args));
        }
      }, {
        key: 'defineFunction',
        value: function defineFunction(name, code) {
          var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : code;
          var _o$instance = o.instance, instance = _o$instance === void 0 ? true : _o$instance, returns = o.returns;
          var func = function func() {
            var ret = code.apply(void 0, arguments);
            if (returns === 'color') {
              ret = _Color.get(ret);
            } else if (returns === 'function<color>') {
              var f = ret;
              ret = function ret() {
                var ret2 = f.apply(void 0, arguments);
                return _Color.get(ret2);
              };
              Object.assign(ret, f);
            } else if (returns === 'array<color>') {
              ret = ret.map(function(c4) {
                return _Color.get(c4);
              });
            }
            return ret;
          };
          if (!(name in _Color)) {
            _Color[name] = func;
          }
          if (instance) {
            _Color.prototype[name] = function() {
              for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                args[_key6] = arguments[_key6];
              }
              return func.apply(void 0, [ this ].concat(args));
            };
          }
        }
      }, {
        key: 'defineFunctions',
        value: function defineFunctions(o) {
          for (var name in o) {
            _Color.defineFunction(name, o[name], o[name]);
          }
        }
      }, {
        key: 'extend',
        value: function extend(exports) {
          if (exports.register) {
            exports.register(_Color);
          } else {
            for (var name in exports) {
              _Color.defineFunction(name, exports[name]);
            }
          }
        }
      } ]);
    }());
    _Color.defineFunctions({
      get: get,
      getAll: getAll,
      set: set,
      setAll: setAll,
      to: to,
      equals: equals,
      inGamut: inGamut,
      toGamut: toGamut,
      distance: distance,
      toString: serialize
    });
    Object.assign(_Color, {
      util: util,
      hooks: hooks,
      WHITES: WHITES,
      Space: ColorSpace,
      spaces: ColorSpace.registry,
      parse: parse2,
      defaults: defaults
    });
    for (var _i22 = 0, _Object$keys2 = Object.keys(spaces); _i22 < _Object$keys2.length; _i22++) {
      var key = _Object$keys2[_i22];
      ColorSpace.register(spaces[key]);
    }
    for (var id in ColorSpace.registry) {
      addSpaceAccessors(id, ColorSpace.registry[id]);
    }
    hooks.add('colorspace-init-end', function(space) {
      var _space$aliases;
      addSpaceAccessors(space.id, space);
      (_space$aliases = space.aliases) === null || _space$aliases === void 0 || _space$aliases.forEach(function(alias) {
        addSpaceAccessors(alias, space);
      });
    });
    function addSpaceAccessors(id, space) {
      Object.keys(space.coords);
      Object.values(space.coords).map(function(c4) {
        return c4.name;
      });
      var propId = id.replace(/-/g, '_');
      Object.defineProperty(_Color.prototype, propId, {
        get: function get() {
          var _this3 = this;
          var ret = this.getAll(id);
          if (typeof Proxy === 'undefined') {
            return ret;
          }
          return new Proxy(ret, {
            has: function has(obj, property) {
              try {
                ColorSpace.resolveCoord([ space, property ]);
                return true;
              } catch (e) {}
              return Reflect.has(obj, property);
            },
            get: function get(obj, property, receiver) {
              if (property && _typeof(property) !== 'symbol' && !(property in obj)) {
                var _ColorSpace$resolveCo3 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo3.index;
                if (index >= 0) {
                  return obj[index];
                }
              }
              return Reflect.get(obj, property, receiver);
            },
            set: function set(obj, property, value, receiver) {
              if (property && _typeof(property) !== 'symbol' && !(property in obj) || property >= 0) {
                var _ColorSpace$resolveCo4 = ColorSpace.resolveCoord([ space, property ]), index = _ColorSpace$resolveCo4.index;
                if (index >= 0) {
                  obj[index] = value;
                  _this3.setAll(id, obj);
                  return true;
                }
              }
              return Reflect.set(obj, property, value, receiver);
            }
          });
        },
        set: function set(coords) {
          this.setAll(id, coords);
        },
        configurable: true,
        enumerable: true
      });
    }
    _Color.extend(deltaEMethods);
    _Color.extend({
      deltaE: deltaE
    });
    _Color.extend(variations);
    _Color.extend({
      contrast: contrast
    });
    _Color.extend(chromaticity);
    _Color.extend(luminance);
    _Color.extend(interpolation);
    _Color.extend(contrastMethods);
    var import_from2 = __toModule(require_from4());
    import_dot['default'].templateSettings.strip = false;
    var hexRegex = /^#[0-9a-f]{3,8}$/i;
    var hslRegex = /hsl\(\s*([-\d.]+)(rad|turn)/;
    var _Color2 = (_r = new WeakMap(), _g = new WeakMap(), _b = new WeakMap(), _red = new WeakMap(), 
    _green = new WeakMap(), _blue = new WeakMap(), _Class3_brand = new WeakSet(), 
    function() {
      function Color2(red, green, blue) {
        var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        _classCallCheck(this, Color2);
        _classPrivateMethodInitSpec(this, _Class3_brand);
        _classPrivateFieldInitSpec(this, _r, void 0);
        _classPrivateFieldInitSpec(this, _g, void 0);
        _classPrivateFieldInitSpec(this, _b, void 0);
        _classPrivateFieldInitSpec(this, _red, void 0);
        _classPrivateFieldInitSpec(this, _green, void 0);
        _classPrivateFieldInitSpec(this, _blue, void 0);
        if (red instanceof _Color2) {
          var r = red.r, g2 = red.g, b2 = red.b;
          this.r = r;
          this.g = g2;
          this.b = b2;
          this.alpha = red.alpha;
          return;
        }
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
      }
      return _createClass(Color2, [ {
        key: 'r',
        get: function get() {
          return _classPrivateFieldGet(_r, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_r, this, value);
          _classPrivateFieldSet(_red, this, Math.round(clamp(value, 0, 1) * 255));
        }
      }, {
        key: 'g',
        get: function get() {
          return _classPrivateFieldGet(_g, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_g, this, value);
          _classPrivateFieldSet(_green, this, Math.round(clamp(value, 0, 1) * 255));
        }
      }, {
        key: 'b',
        get: function get() {
          return _classPrivateFieldGet(_b, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_b, this, value);
          _classPrivateFieldSet(_blue, this, Math.round(clamp(value, 0, 1) * 255));
        }
      }, {
        key: 'red',
        get: function get() {
          return _classPrivateFieldGet(_red, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_r, this, value / 255);
          _classPrivateFieldSet(_red, this, clamp(value, 0, 255));
        }
      }, {
        key: 'green',
        get: function get() {
          return _classPrivateFieldGet(_green, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_g, this, value / 255);
          _classPrivateFieldSet(_green, this, clamp(value, 0, 255));
        }
      }, {
        key: 'blue',
        get: function get() {
          return _classPrivateFieldGet(_blue, this);
        },
        set: function set(value) {
          _classPrivateFieldSet(_b, this, value / 255);
          _classPrivateFieldSet(_blue, this, clamp(value, 0, 255));
        }
      }, {
        key: 'toHexString',
        value: function toHexString() {
          var redString = Math.round(this.red).toString(16);
          var greenString = Math.round(this.green).toString(16);
          var blueString = Math.round(this.blue).toString(16);
          return '#' + (this.red > 15.5 ? redString : '0' + redString) + (this.green > 15.5 ? greenString : '0' + greenString) + (this.blue > 15.5 ? blueString : '0' + blueString);
        }
      }, {
        key: 'toJSON',
        value: function toJSON() {
          var red = this.red, green = this.green, blue = this.blue, alpha = this.alpha;
          return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha
          };
        }
      }, {
        key: 'parseString',
        value: function parseString(colorString) {
          colorString = colorString.replace(hslRegex, function(match, angle, unit) {
            var value = angle + unit;
            switch (unit) {
             case 'rad':
              return match.replace(value, radToDeg(angle));

             case 'turn':
              return match.replace(value, turnToDeg(angle));
            }
          });
          try {
            var prototypeArrayFrom;
            if ('Prototype' in window && 'Version' in window.Prototype) {
              prototypeArrayFrom = Array.from;
              Array.from = import_from2['default'];
            }
            var _color2 = new _Color(colorString).to('srgb');
            if (prototypeArrayFrom) {
              Array.from = prototypeArrayFrom;
              prototypeArrayFrom = null;
            }
            this.r = _color2.r;
            this.g = _color2.g;
            this.b = _color2.b;
            this.alpha = +_color2.alpha;
          } catch (_unused4) {
            throw new Error('Unable to parse color "'.concat(colorString, '"'));
          }
          return this;
        }
      }, {
        key: 'parseRgbString',
        value: function parseRgbString(colorString) {
          this.parseString(colorString);
        }
      }, {
        key: 'parseHexString',
        value: function parseHexString(colorString) {
          if (!colorString.match(hexRegex) || [ 6, 8 ].includes(colorString.length)) {
            return;
          }
          this.parseString(colorString);
        }
      }, {
        key: 'parseColorFnString',
        value: function parseColorFnString(colorString) {
          this.parseString(colorString);
        }
      }, {
        key: 'getRelativeLuminance',
        value: function getRelativeLuminance() {
          var rSRGB = this.r, gSRGB = this.g, bSRGB = this.b;
          var r = rSRGB <= .03928 ? rSRGB / 12.92 : Math.pow((rSRGB + .055) / 1.055, 2.4);
          var g2 = gSRGB <= .03928 ? gSRGB / 12.92 : Math.pow((gSRGB + .055) / 1.055, 2.4);
          var b2 = bSRGB <= .03928 ? bSRGB / 12.92 : Math.pow((bSRGB + .055) / 1.055, 2.4);
          return .2126 * r + .7152 * g2 + .0722 * b2;
        }
      }, {
        key: 'getLuminosity',
        value: function getLuminosity() {
          return .3 * this.r + .59 * this.g + .11 * this.b;
        }
      }, {
        key: 'setLuminosity',
        value: function setLuminosity(L) {
          var d2 = L - this.getLuminosity();
          return _assertClassBrand(_Class3_brand, this, _add).call(this, d2).clip();
        }
      }, {
        key: 'getSaturation',
        value: function getSaturation() {
          return Math.max(this.r, this.g, this.b) - Math.min(this.r, this.g, this.b);
        }
      }, {
        key: 'setSaturation',
        value: function setSaturation(s) {
          var C = new _Color2(this);
          var colorEntires = [ {
            name: 'r',
            value: C.r
          }, {
            name: 'g',
            value: C.g
          }, {
            name: 'b',
            value: C.b
          } ];
          var _colorEntires$sort = colorEntires.sort(function(a2, b2) {
            return a2.value - b2.value;
          }), _colorEntires$sort2 = _slicedToArray(_colorEntires$sort, 3), Cmin = _colorEntires$sort2[0], Cmid = _colorEntires$sort2[1], Cmax = _colorEntires$sort2[2];
          if (Cmax.value > Cmin.value) {
            Cmid.value = (Cmid.value - Cmin.value) * s / (Cmax.value - Cmin.value);
            Cmax.value = s;
          } else {
            Cmid.value = Cmax.value = 0;
          }
          Cmin.value = 0;
          C[Cmax.name] = Cmax.value;
          C[Cmin.name] = Cmin.value;
          C[Cmid.name] = Cmid.value;
          return C;
        }
      }, {
        key: 'clip',
        value: function clip() {
          var C = new _Color2(this);
          var L = C.getLuminosity();
          var n2 = Math.min(C.r, C.g, C.b);
          var x = Math.max(C.r, C.g, C.b);
          if (n2 < 0) {
            C.r = L + (C.r - L) * L / (L - n2);
            C.g = L + (C.g - L) * L / (L - n2);
            C.b = L + (C.b - L) * L / (L - n2);
          }
          if (x > 1) {
            C.r = L + (C.r - L) * (1 - L) / (x - L);
            C.g = L + (C.g - L) * (1 - L) / (x - L);
            C.b = L + (C.b - L) * (1 - L) / (x - L);
          }
          return C;
        }
      } ]);
    }());
    function _add(value) {
      var C = new _Color2(this);
      C.r += value;
      C.g += value;
      C.b += value;
      return C;
    }
    var color_default = _Color2;
    function clamp(value, min, max2) {
      return Math.min(Math.max(min, value), max2);
    }
    function radToDeg(rad) {
      return rad * 180 / Math.PI;
    }
    function turnToDeg(turn) {
      return turn * 360;
    }
    function getOwnBackgroundColor(elmStyle) {
      var bgColor = new color_default();
      bgColor.parseString(elmStyle.getPropertyValue('background-color'));
      if (bgColor.alpha !== 0) {
        var opacity = elmStyle.getPropertyValue('opacity');
        bgColor.alpha = bgColor.alpha * opacity;
      }
      return bgColor;
    }
    var get_own_background_color_default = getOwnBackgroundColor;
    function isOpaque(node) {
      var style = window.getComputedStyle(node);
      return element_has_image_default(node, style) || get_own_background_color_default(style).alpha === 1;
    }
    var is_opaque_default = isOpaque;
    function _isSkipLink(element) {
      if (!element.href) {
        return false;
      }
      var firstPageLink = cache_default.get('firstPageLink', generateFirstPageLink);
      if (!firstPageLink) {
        return true;
      }
      return element.compareDocumentPosition(firstPageLink.actualNode) === element.DOCUMENT_POSITION_FOLLOWING;
    }
    function generateFirstPageLink() {
      var firstPageLink;
      if (!window.location.origin) {
        firstPageLink = query_selector_all_default(axe._tree, 'a:not([href^="#"]):not([href^="/#"]):not([href^="javascript:"])')[0];
      } else {
        firstPageLink = query_selector_all_default(axe._tree, 'a[href]:not([href^="javascript:"])').find(function(link) {
          return !_isCurrentPageLink(link.actualNode);
        });
      }
      return firstPageLink || null;
    }
    var clipRegex2 = /rect\s*\(([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px,?\s*([0-9]+)px\s*\)/;
    var clipPathRegex2 = /(\w+)\((\d+)/;
    function isClipped(style) {
      var matchesClip = style.getPropertyValue('clip').match(clipRegex2);
      var matchesClipPath = style.getPropertyValue('clip-path').match(clipPathRegex2);
      if (matchesClip && matchesClip.length === 5) {
        var position = style.getPropertyValue('position');
        if ([ 'fixed', 'absolute' ].includes(position)) {
          return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;
        }
      }
      if (matchesClipPath) {
        var type2 = matchesClipPath[1];
        var value = parseInt(matchesClipPath[2], 10);
        switch (type2) {
         case 'inset':
          return value >= 50;

         case 'circle':
          return value === 0;

         default:
        }
      }
      return false;
    }
    function isAreaVisible(el, screenReader, recursed) {
      var mapEl = find_up_default(el, 'map');
      if (!mapEl) {
        return false;
      }
      var mapElName = mapEl.getAttribute('name');
      if (!mapElName) {
        return false;
      }
      var mapElRootNode = get_root_node_default2(el);
      if (!mapElRootNode || mapElRootNode.nodeType !== 9) {
        return false;
      }
      var refs = query_selector_all_default(axe._tree, 'img[usemap="#'.concat(escape_selector_default(mapElName), '"]'));
      if (!refs || !refs.length) {
        return false;
      }
      return refs.some(function(_ref62) {
        var actualNode = _ref62.actualNode;
        return isVisible(actualNode, screenReader, recursed);
      });
    }
    function isVisible(el, screenReader, recursed) {
      var _window$Node2;
      if (!el) {
        throw new TypeError('Cannot determine if element is visible for non-DOM nodes');
      }
      var vNode = el instanceof abstract_virtual_node_default ? el : get_node_from_tree_default(el);
      el = vNode ? vNode.actualNode : el;
      var cacheName = '_isVisible' + (screenReader ? 'ScreenReader' : '');
      var _ref63 = (_window$Node2 = window.Node) !== null && _window$Node2 !== void 0 ? _window$Node2 : {}, DOCUMENT_NODE = _ref63.DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE = _ref63.DOCUMENT_FRAGMENT_NODE;
      var nodeType = vNode ? vNode.props.nodeType : el.nodeType;
      var nodeName2 = vNode ? vNode.props.nodeName : el.nodeName.toLowerCase();
      if (vNode && typeof vNode[cacheName] !== 'undefined') {
        return vNode[cacheName];
      }
      if (nodeType === DOCUMENT_NODE) {
        return true;
      }
      if ([ 'style', 'script', 'noscript', 'template' ].includes(nodeName2)) {
        return false;
      }
      if (el && nodeType === DOCUMENT_FRAGMENT_NODE) {
        el = el.host;
      }
      if (screenReader) {
        var ariaHiddenValue = vNode ? vNode.attr('aria-hidden') : el.getAttribute('aria-hidden');
        if (ariaHiddenValue === 'true') {
          return false;
        }
      }
      if (!el) {
        var parent2 = vNode.parent;
        var visible3 = true;
        if (parent2) {
          visible3 = isVisible(parent2, screenReader, true);
        }
        if (vNode) {
          vNode[cacheName] = visible3;
        }
        return visible3;
      }
      var style = window.getComputedStyle(el, null);
      if (style === null) {
        return false;
      }
      if (nodeName2 === 'area') {
        return isAreaVisible(el, screenReader, recursed);
      }
      if (style.getPropertyValue('display') === 'none') {
        return false;
      }
      var elHeight = parseInt(style.getPropertyValue('height'));
      var elWidth = parseInt(style.getPropertyValue('width'));
      var scroll = get_scroll_default(el);
      var scrollableWithZeroHeight = scroll && elHeight === 0;
      var scrollableWithZeroWidth = scroll && elWidth === 0;
      var posAbsoluteOverflowHiddenAndSmall = style.getPropertyValue('position') === 'absolute' && (elHeight < 2 || elWidth < 2) && style.getPropertyValue('overflow') === 'hidden';
      if (!screenReader && (isClipped(style) || style.getPropertyValue('opacity') === '0' || scrollableWithZeroHeight || scrollableWithZeroWidth || posAbsoluteOverflowHiddenAndSmall)) {
        return false;
      }
      if (!recursed && (style.getPropertyValue('visibility') === 'hidden' || !screenReader && is_offscreen_default(el))) {
        return false;
      }
      var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;
      var visible2 = false;
      if (parent) {
        visible2 = isVisible(parent, screenReader, true);
      }
      if (vNode) {
        vNode[cacheName] = visible2;
      }
      return visible2;
    }
    var is_visible_default = isVisible;
    function reduceToElementsBelowFloating(elements, targetNode) {
      var floatingPositions = [ 'fixed', 'sticky' ];
      var finalElements = [];
      var targetFound = false;
      for (var index = 0; index < elements.length; ++index) {
        var currentNode = elements[index];
        if (currentNode === targetNode) {
          targetFound = true;
        }
        var style = window.getComputedStyle(currentNode);
        if (!targetFound && floatingPositions.indexOf(style.position) !== -1) {
          finalElements = [];
          continue;
        }
        finalElements.push(currentNode);
      }
      return finalElements;
    }
    var reduce_to_elements_below_floating_default = reduceToElementsBelowFloating;
    function _visuallyContains(node, parent) {
      var parentScrollAncestor = getScrollAncestor(parent);
      do {
        var nextScrollAncestor = getScrollAncestor(node);
        if (nextScrollAncestor === parentScrollAncestor || nextScrollAncestor === parent) {
          return contains2(node, parent);
        }
        node = nextScrollAncestor;
      } while (node);
      return false;
    }
    function getScrollAncestor(node) {
      var vNode = get_node_from_tree_default(node);
      var ancestor = vNode.parent;
      while (ancestor) {
        if (get_scroll_default(ancestor.actualNode)) {
          return ancestor.actualNode;
        }
        ancestor = ancestor.parent;
      }
    }
    function contains2(node, parent) {
      var style = window.getComputedStyle(parent);
      var overflow = style.getPropertyValue('overflow');
      if (style.getPropertyValue('display') === 'inline') {
        return true;
      }
      var clientRects = Array.from(node.getClientRects());
      var boundingRect = parent.getBoundingClientRect();
      var rect = {
        left: boundingRect.left,
        top: boundingRect.top,
        width: boundingRect.width,
        height: boundingRect.height
      };
      if ([ 'scroll', 'auto' ].includes(overflow) || parent instanceof window.HTMLHtmlElement) {
        rect.width = parent.scrollWidth;
        rect.height = parent.scrollHeight;
      }
      if (clientRects.length === 1 && overflow === 'hidden' && style.getPropertyValue('white-space') === 'nowrap') {
        clientRects[0] = rect;
      }
      return clientRects.some(function(clientRect) {
        return !(Math.ceil(clientRect.left) < Math.floor(rect.left) || Math.ceil(clientRect.top) < Math.floor(rect.top) || Math.floor(clientRect.left + clientRect.width) > Math.ceil(rect.left + rect.width) || Math.floor(clientRect.top + clientRect.height) > Math.ceil(rect.top + rect.height));
      });
    }
    function shadowElementsFromPoint(nodeX, nodeY) {
      var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      if (i > 999) {
        throw new Error('Infinite loop detected');
      }
      return Array.from(root.elementsFromPoint(nodeX, nodeY) || []).filter(function(nodes) {
        return get_root_node_default2(nodes) === root;
      }).reduce(function(stack, elm) {
        if (is_shadow_root_default(elm)) {
          var shadowStack = shadowElementsFromPoint(nodeX, nodeY, elm.shadowRoot, i + 1);
          stack = stack.concat(shadowStack);
          if (stack.length && _visuallyContains(stack[0], elm)) {
            stack.push(elm);
          }
        } else {
          stack.push(elm);
        }
        return stack;
      }, []);
    }
    var shadow_elements_from_point_default = shadowElementsFromPoint;
    function urlPropsFromAttribute(node, attribute) {
      if (!node.hasAttribute(attribute)) {
        return void 0;
      }
      var nodeName2 = node.nodeName.toUpperCase();
      var parser2 = node;
      if (![ 'A', 'AREA' ].includes(nodeName2) || node.ownerSVGElement) {
        parser2 = document.createElement('a');
        parser2.href = node.getAttribute(attribute);
      }
      var protocol = [ 'https:', 'ftps:' ].includes(parser2.protocol) ? parser2.protocol.replace(/s:$/, ':') : parser2.protocol;
      var parserPathname = /^\//.test(parser2.pathname) ? parser2.pathname : '/'.concat(parser2.pathname);
      var _getPathnameOrFilenam = getPathnameOrFilename(parserPathname), pathname = _getPathnameOrFilenam.pathname, filename = _getPathnameOrFilenam.filename;
      return {
        protocol: protocol,
        hostname: parser2.hostname,
        port: getPort(parser2.port),
        pathname: /\/$/.test(pathname) ? pathname : ''.concat(pathname, '/'),
        search: getSearchPairs(parser2.search),
        hash: getHashRoute(parser2.hash),
        filename: filename
      };
    }
    function getPort(port) {
      var excludePorts = [ '443', '80' ];
      return !excludePorts.includes(port) ? port : '';
    }
    function getPathnameOrFilename(pathname) {
      var filename = pathname.split('/').pop();
      if (!filename || filename.indexOf('.') === -1) {
        return {
          pathname: pathname,
          filename: ''
        };
      }
      return {
        pathname: pathname.replace(filename, ''),
        filename: /index./.test(filename) ? '' : filename
      };
    }
    function getSearchPairs(searchStr) {
      var query = {};
      if (!searchStr || !searchStr.length) {
        return query;
      }
      var pairs = searchStr.substring(1).split('&');
      if (!pairs || !pairs.length) {
        return query;
      }
      for (var index = 0; index < pairs.length; index++) {
        var pair = pairs[index];
        var _pair$split = pair.split('='), _pair$split2 = _slicedToArray(_pair$split, 2), _key7 = _pair$split2[0], _pair$split2$ = _pair$split2[1], value = _pair$split2$ === void 0 ? '' : _pair$split2$;
        query[decodeURIComponent(_key7)] = decodeURIComponent(value);
      }
      return query;
    }
    function getHashRoute(hash) {
      if (!hash) {
        return '';
      }
      var hashRegex = /#!?\/?/g;
      var hasMatch = hash.match(hashRegex);
      if (!hasMatch) {
        return '';
      }
      var _hasMatch = _slicedToArray(hasMatch, 1), matchedStr = _hasMatch[0];
      if (matchedStr === '#') {
        return '';
      }
      return hash;
    }
    var url_props_from_attribute_default = urlPropsFromAttribute;
    function visuallyOverlaps(rect, parent) {
      var parentRect = parent.getBoundingClientRect();
      var parentTop = parentRect.top;
      var parentLeft = parentRect.left;
      var parentScrollArea = {
        top: parentTop - parent.scrollTop,
        bottom: parentTop - parent.scrollTop + parent.scrollHeight,
        left: parentLeft - parent.scrollLeft,
        right: parentLeft - parent.scrollLeft + parent.scrollWidth
      };
      if (rect.left > parentScrollArea.right && rect.left > parentRect.right || rect.top > parentScrollArea.bottom && rect.top > parentRect.bottom || rect.right < parentScrollArea.left && rect.right < parentRect.left || rect.bottom < parentScrollArea.top && rect.bottom < parentRect.top) {
        return false;
      }
      var style = window.getComputedStyle(parent);
      if (rect.left > parentRect.right || rect.top > parentRect.bottom) {
        return style.overflow === 'scroll' || style.overflow === 'auto' || parent instanceof window.HTMLBodyElement || parent instanceof window.HTMLHtmlElement;
      }
      return true;
    }
    var visually_overlaps_default = visuallyOverlaps;
    var nodeIndex2 = 0;
    var VirtualNode = function(_abstract_virtual_nod) {
      function VirtualNode(node, parent, shadowId) {
        var _this4;
        _classCallCheck(this, VirtualNode);
        _this4 = _callSuper(this, VirtualNode);
        _this4.shadowId = shadowId;
        _this4.children = [];
        _this4.actualNode = node;
        _this4.parent = parent;
        if (!parent) {
          nodeIndex2 = 0;
        }
        _this4.nodeIndex = nodeIndex2++;
        _this4._isHidden = null;
        _this4._cache = {};
        _this4._isXHTML = is_xhtml_default(node.ownerDocument);
        if (node.nodeName.toLowerCase() === 'input') {
          var type2 = node.getAttribute('type');
          type2 = _this4._isXHTML ? type2 : (type2 || '').toLowerCase();
          if (!valid_input_type_default().includes(type2)) {
            type2 = 'text';
          }
          _this4._type = type2;
        }
        if (cache_default.get('nodeMap')) {
          cache_default.get('nodeMap').set(node, _this4);
        }
        return _this4;
      }
      _inherits(VirtualNode, _abstract_virtual_nod);
      return _createClass(VirtualNode, [ {
        key: 'props',
        get: function get() {
          if (!this._cache.hasOwnProperty('props')) {
            var _this$actualNode = this.actualNode, nodeType = _this$actualNode.nodeType, nodeName2 = _this$actualNode.nodeName, _id = _this$actualNode.id, nodeValue = _this$actualNode.nodeValue;
            this._cache.props = {
              nodeType: nodeType,
              nodeName: this._isXHTML ? nodeName2 : nodeName2.toLowerCase(),
              id: _id,
              type: this._type,
              nodeValue: nodeValue
            };
            if (nodeType === 1) {
              this._cache.props.multiple = this.actualNode.multiple;
              this._cache.props.value = this.actualNode.value;
              this._cache.props.selected = this.actualNode.selected;
              this._cache.props.checked = this.actualNode.checked;
              this._cache.props.indeterminate = this.actualNode.indeterminate;
            }
          }
          return this._cache.props;
        }
      }, {
        key: 'attr',
        value: function attr(attrName) {
          if (typeof this.actualNode.getAttribute !== 'function') {
            return null;
          }
          return this.actualNode.getAttribute(attrName);
        }
      }, {
        key: 'hasAttr',
        value: function hasAttr(attrName) {
          if (typeof this.actualNode.hasAttribute !== 'function') {
            return false;
          }
          return this.actualNode.hasAttribute(attrName);
        }
      }, {
        key: 'attrNames',
        get: function get() {
          if (!this._cache.hasOwnProperty('attrNames')) {
            var attrs;
            if (this.actualNode.attributes instanceof window.NamedNodeMap) {
              attrs = this.actualNode.attributes;
            } else {
              attrs = this.actualNode.cloneNode(false).attributes;
            }
            this._cache.attrNames = Array.from(attrs).map(function(attr) {
              return attr.name;
            });
          }
          return this._cache.attrNames;
        }
      }, {
        key: 'getComputedStylePropertyValue',
        value: function getComputedStylePropertyValue(property) {
          var key = 'computedStyle_' + property;
          if (!this._cache.hasOwnProperty(key)) {
            if (!this._cache.hasOwnProperty('computedStyle')) {
              this._cache.computedStyle = window.getComputedStyle(this.actualNode);
            }
            this._cache[key] = this._cache.computedStyle.getPropertyValue(property);
          }
          return this._cache[key];
        }
      }, {
        key: 'isFocusable',
        get: function get() {
          if (!this._cache.hasOwnProperty('isFocusable')) {
            this._cache.isFocusable = _isFocusable(this.actualNode);
          }
          return this._cache.isFocusable;
        }
      }, {
        key: 'tabbableElements',
        get: function get() {
          if (!this._cache.hasOwnProperty('tabbableElements')) {
            this._cache.tabbableElements = get_tabbable_elements_default(this);
          }
          return this._cache.tabbableElements;
        }
      }, {
        key: 'clientRects',
        get: function get() {
          if (!this._cache.hasOwnProperty('clientRects')) {
            this._cache.clientRects = Array.from(this.actualNode.getClientRects()).filter(function(rect) {
              return rect.width > 0;
            });
          }
          return this._cache.clientRects;
        }
      }, {
        key: 'boundingClientRect',
        get: function get() {
          if (!this._cache.hasOwnProperty('boundingClientRect')) {
            this._cache.boundingClientRect = this.actualNode.getBoundingClientRect();
          }
          return this._cache.boundingClientRect;
        }
      } ]);
    }(abstract_virtual_node_default);
    var virtual_node_default = VirtualNode;
    function tokenList(str) {
      return (str || '').trim().replace(/\s{2,}/g, ' ').split(' ');
    }
    var token_list_default = tokenList;
    var idsKey = ' [idsMap]';
    function getNodesMatchingExpression(domTree, expressions, filter) {
      var selectorMap = domTree[0]._selectorMap;
      if (!selectorMap) {
        return;
      }
      var shadowId = domTree[0].shadowId;
      for (var _i23 = 0; _i23 < expressions.length; _i23++) {
        if (expressions[_i23].length > 1 && expressions[_i23].some(function(expression) {
          return isGlobalSelector(expression);
        })) {
          return;
        }
      }
      var nodeSet = new Set();
      expressions.forEach(function(expression) {
        var _matchingNodes$nodes;
        var matchingNodes = findMatchingNodes(expression, selectorMap, shadowId);
        matchingNodes === null || matchingNodes === void 0 || (_matchingNodes$nodes = matchingNodes.nodes) === null || _matchingNodes$nodes === void 0 || _matchingNodes$nodes.forEach(function(node) {
          if (matchingNodes.isComplexSelector && !_matchesExpression(node, expression)) {
            return;
          }
          nodeSet.add(node);
        });
      });
      var matchedNodes = [];
      nodeSet.forEach(function(node) {
        return matchedNodes.push(node);
      });
      if (filter) {
        matchedNodes = matchedNodes.filter(filter);
      }
      return matchedNodes.sort(function(a2, b2) {
        return a2.nodeIndex - b2.nodeIndex;
      });
    }
    function findMatchingNodes(expression, selectorMap, shadowId) {
      var exp = expression[expression.length - 1];
      var nodes = null;
      var isComplexSelector = expression.length > 1 || !!exp.pseudos || !!exp.classes;
      if (isGlobalSelector(exp)) {
        nodes = selectorMap['*'];
      } else {
        if (exp.id) {
          var _selectorMap$idsKey$e;
          if (!selectorMap[idsKey] || !Object.hasOwn(selectorMap[idsKey], exp.id) || !((_selectorMap$idsKey$e = selectorMap[idsKey][exp.id]) !== null && _selectorMap$idsKey$e !== void 0 && _selectorMap$idsKey$e.length)) {
            return;
          }
          nodes = selectorMap[idsKey][exp.id].filter(function(node) {
            return node.shadowId === shadowId;
          });
        }
        if (exp.tag && exp.tag !== '*') {
          var _selectorMap$exp$tag;
          if (!((_selectorMap$exp$tag = selectorMap[exp.tag]) !== null && _selectorMap$exp$tag !== void 0 && _selectorMap$exp$tag.length)) {
            return;
          }
          var cachedNodes = selectorMap[exp.tag];
          nodes = nodes ? getSharedValues(cachedNodes, nodes) : cachedNodes;
        }
        if (exp.classes) {
          var _selectorMap$Class;
          if (!((_selectorMap$Class = selectorMap['[class]']) !== null && _selectorMap$Class !== void 0 && _selectorMap$Class.length)) {
            return;
          }
          var _cachedNodes = selectorMap['[class]'];
          nodes = nodes ? getSharedValues(_cachedNodes, nodes) : _cachedNodes;
        }
        if (exp.attributes) {
          for (var _i24 = 0; _i24 < exp.attributes.length; _i24++) {
            var _selectorMap;
            var attr = exp.attributes[_i24];
            if (attr.type === 'attrValue') {
              isComplexSelector = true;
            }
            if (!((_selectorMap = selectorMap['['.concat(attr.key, ']')]) !== null && _selectorMap !== void 0 && _selectorMap.length)) {
              return;
            }
            var _cachedNodes2 = selectorMap['['.concat(attr.key, ']')];
            nodes = nodes ? getSharedValues(_cachedNodes2, nodes) : _cachedNodes2;
          }
        }
      }
      return {
        nodes: nodes,
        isComplexSelector: isComplexSelector
      };
    }
    function isGlobalSelector(expression) {
      return expression.tag === '*' && !expression.attributes && !expression.id && !expression.classes;
    }
    function getSharedValues(a2, b2) {
      return a2.filter(function(node) {
        return b2.includes(node);
      });
    }
    function cacheSelector(key, vNode, map) {
      if (!Object.hasOwn(map, key)) {
        map[key] = [];
      }
      map[key].push(vNode);
    }
    function cacheNodeSelectors(vNode, selectorMap) {
      if (vNode.props.nodeType !== 1) {
        return;
      }
      cacheSelector(vNode.props.nodeName, vNode, selectorMap);
      cacheSelector('*', vNode, selectorMap);
      vNode.attrNames.forEach(function(attrName) {
        if (attrName === 'id') {
          selectorMap[idsKey] = selectorMap[idsKey] || {};
          token_list_default(vNode.attr(attrName)).forEach(function(value) {
            cacheSelector(value, vNode, selectorMap[idsKey]);
          });
        }
        cacheSelector('['.concat(attrName, ']'), vNode, selectorMap);
      });
    }
    var hasShadowRoot;
    function _getFlattenedTree() {
      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.documentElement;
      var shadowId = arguments.length > 1 ? arguments[1] : undefined;
      hasShadowRoot = false;
      var selectorMap = {};
      cache_default.set('nodeMap', new WeakMap());
      cache_default.set('selectorMap', selectorMap);
      var tree = flattenTree(node, shadowId, null);
      tree[0]._selectorMap = selectorMap;
      tree[0]._hasShadowRoot = hasShadowRoot;
      return tree;
    }
    function getSlotChildren(node) {
      var retVal = [];
      node = node.firstChild;
      while (node) {
        retVal.push(node);
        node = node.nextSibling;
      }
      return retVal;
    }
    function createNode(node, parent, shadowId) {
      var vNode = new virtual_node_default(node, parent, shadowId);
      cacheNodeSelectors(vNode, cache_default.get('selectorMap'));
      return vNode;
    }
    function flattenTree(node, shadowId, parent) {
      var retVal, realArray;
      function reduceShadowDOM(res, child, parentVNode) {
        var replacements = flattenTree(child, shadowId, parentVNode);
        if (replacements) {
          res = res.concat(replacements);
        }
        return res;
      }
      if (node.documentElement) {
        node = node.documentElement;
      }
      var nodeName2 = node.nodeName.toLowerCase();
      if (is_shadow_root_default(node)) {
        hasShadowRoot = true;
        retVal = createNode(node, parent, shadowId);
        shadowId = 'a' + Math.random().toString().substring(2);
        realArray = Array.from(node.shadowRoot.childNodes);
        retVal.children = realArray.reduce(function(res, child) {
          return reduceShadowDOM(res, child, retVal);
        }, []);
        return [ retVal ];
      } else {
        if (nodeName2 === 'content' && typeof node.getDistributedNodes === 'function') {
          realArray = Array.from(node.getDistributedNodes());
          return realArray.reduce(function(res, child) {
            return reduceShadowDOM(res, child, parent);
          }, []);
        } else if (nodeName2 === 'slot' && typeof node.assignedNodes === 'function') {
          realArray = Array.from(node.assignedNodes());
          if (!realArray.length) {
            realArray = getSlotChildren(node);
          }
          var styl = window.getComputedStyle(node);
          if (false) {
            retVal = createNode(node, parent, shadowId);
            retVal.children = realArray.reduce(function(res, child) {
              return reduceShadowDOM(res, child, retVal);
            }, []);
            return [ retVal ];
          } else {
            return realArray.reduce(function(res, child) {
              return reduceShadowDOM(res, child, parent);
            }, []);
          }
        } else {
          if (node.nodeType === 1) {
            retVal = createNode(node, parent, shadowId);
            realArray = Array.from(node.childNodes);
            retVal.children = realArray.reduce(function(res, child) {
              return reduceShadowDOM(res, child, retVal);
            }, []);
            return [ retVal ];
          } else if (node.nodeType === 3) {
            return [ createNode(node, parent) ];
          }
          return void 0;
        }
      }
    }
    function getBaseLang(lang) {
      if (!lang) {
        return '';
      }
      return lang.trim().split('-')[0].toLowerCase();
    }
    var get_base_lang_default = getBaseLang;
    function failureSummary(nodeData) {
      var failingChecks = {};
      failingChecks.none = nodeData.none.concat(nodeData.all);
      failingChecks.any = nodeData.any;
      return Object.keys(failingChecks).map(function(key) {
        if (!failingChecks[key].length) {
          return;
        }
        var sum = axe._audit.data.failureSummaries[key];
        if (sum && typeof sum.failureMessage === 'function') {
          return sum.failureMessage(failingChecks[key].map(function(check) {
            return check.message || '';
          }));
        }
      }).filter(function(i) {
        return i !== void 0;
      }).join('\n\n');
    }
    var failure_summary_default = failureSummary;
    function incompleteFallbackMessage() {
      var message = axe._audit.data.incompleteFallbackMessage;
      if (typeof message === 'function') {
        message = message();
      }
      if (typeof message !== 'string') {
        return '';
      }
      return message;
    }
    var resultKeys = constants_default.resultGroups;
    function processAggregate(results, options) {
      var resultObject = axe.utils.aggregateResult(results);
      resultKeys.forEach(function(key) {
        if (options.resultTypes && !options.resultTypes.includes(key)) {
          (resultObject[key] || []).forEach(function(ruleResult) {
            if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {
              ruleResult.nodes = [ ruleResult.nodes[0] ];
            }
          });
        }
        resultObject[key] = (resultObject[key] || []).map(function(ruleResult) {
          ruleResult = Object.assign({}, ruleResult);
          if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {
            ruleResult.nodes = ruleResult.nodes.map(function(subResult) {
              if (_typeof(subResult.node) === 'object') {
                var serialElm = trimElementSpec(subResult.node, options);
                Object.assign(subResult, serialElm);
              }
              delete subResult.result;
              delete subResult.node;
              normalizeRelatedNodes(subResult, options);
              return subResult;
            });
          }
          resultKeys.forEach(function(resultKey) {
            return delete ruleResult[resultKey];
          });
          delete ruleResult.pageLevel;
          delete ruleResult.result;
          return ruleResult;
        });
      });
      return resultObject;
    }
    function normalizeRelatedNodes(node, options) {
      [ 'any', 'all', 'none' ].forEach(function(type2) {
        if (!Array.isArray(node[type2])) {
          return;
        }
        node[type2].filter(function(checkRes) {
          return Array.isArray(checkRes.relatedNodes);
        }).forEach(function(checkRes) {
          checkRes.relatedNodes = checkRes.relatedNodes.map(function(relatedNode) {
            return trimElementSpec(relatedNode, options);
          });
        });
      });
    }
    function trimElementSpec() {
      var elmSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var runOptions = arguments.length > 1 ? arguments[1] : undefined;
      elmSpec = node_serializer_default.dqElmToSpec(elmSpec, runOptions);
      var serialElm = {};
      if (axe._audit.noHtml) {
        serialElm.html = null;
      } else {
        var _elmSpec$source;
        serialElm.html = (_elmSpec$source = elmSpec.source) !== null && _elmSpec$source !== void 0 ? _elmSpec$source : 'Undefined';
      }
      if (runOptions.elementRef && !elmSpec.fromFrame) {
        var _elmSpec$element;
        serialElm.element = (_elmSpec$element = elmSpec.element) !== null && _elmSpec$element !== void 0 ? _elmSpec$element : null;
      }
      if (runOptions.selectors !== false || elmSpec.fromFrame) {
        var _elmSpec$selector;
        serialElm.target = (_elmSpec$selector = elmSpec.selector) !== null && _elmSpec$selector !== void 0 ? _elmSpec$selector : [ ':root' ];
      }
      if (runOptions.ancestry) {
        var _elmSpec$ancestry;
        serialElm.ancestry = (_elmSpec$ancestry = elmSpec.ancestry) !== null && _elmSpec$ancestry !== void 0 ? _elmSpec$ancestry : [ ':root' ];
      }
      if (runOptions.xpath) {
        var _elmSpec$xpath;
        serialElm.xpath = (_elmSpec$xpath = elmSpec.xpath) !== null && _elmSpec$xpath !== void 0 ? _elmSpec$xpath : [ '/' ];
      }
      return serialElm;
    }
    var dataRegex = /\$\{\s?data\s?\}/g;
    function substitute(str, data) {
      if (typeof data === 'string') {
        return str.replace(dataRegex, data);
      }
      for (var prop in data) {
        if (data.hasOwnProperty(prop)) {
          var regex = new RegExp('\\${\\s?data\\.' + prop + '\\s?}', 'g');
          var replace = typeof data[prop] === 'undefined' ? '' : String(data[prop]);
          str = str.replace(regex, replace);
        }
      }
      return str;
    }
    function processMessage(message, data) {
      if (!message) {
        return;
      }
      if (Array.isArray(data)) {
        data.values = data.join(', ');
        if (typeof message.singular === 'string' && typeof message.plural === 'string') {
          var str2 = data.length === 1 ? message.singular : message.plural;
          return substitute(str2, data);
        }
        return substitute(message, data);
      }
      if (typeof message === 'string') {
        return substitute(message, data);
      }
      if (typeof data === 'string') {
        var _str = message[data];
        return substitute(_str, data);
      }
      var str = message['default'] || incompleteFallbackMessage();
      if (data && data.messageKey && message[data.messageKey]) {
        str = message[data.messageKey];
      }
      return processMessage(str, data);
    }
    var process_message_default = processMessage;
    function getCheckMessage(checkId, type2, data) {
      var check = axe._audit.data.checks[checkId];
      if (!check) {
        throw new Error('Cannot get message for unknown check: '.concat(checkId, '.'));
      }
      if (!check.messages[type2]) {
        throw new Error('Check "'.concat(checkId, '"" does not have a "').concat(type2, '" message.'));
      }
      return process_message_default(check.messages[type2], data);
    }
    var get_check_message_default = getCheckMessage;
    function getCheckOption(check, ruleID, options) {
      var ruleCheckOption = ((options.rules && options.rules[ruleID] || {}).checks || {})[check.id];
      var checkOption = (options.checks || {})[check.id];
      var enabled = check.enabled;
      var opts = check.options;
      if (checkOption) {
        if (checkOption.hasOwnProperty('enabled')) {
          enabled = checkOption.enabled;
        }
        if (checkOption.hasOwnProperty('options')) {
          opts = checkOption.options;
        }
      }
      if (ruleCheckOption) {
        if (ruleCheckOption.hasOwnProperty('enabled')) {
          enabled = ruleCheckOption.enabled;
        }
        if (ruleCheckOption.hasOwnProperty('options')) {
          opts = ruleCheckOption.options;
        }
      }
      return {
        enabled: enabled,
        options: opts,
        absolutePaths: options.absolutePaths
      };
    }
    var get_check_option_default = getCheckOption;
    function _getEnvironmentData() {
      var _win$location;
      var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var win = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
      if (metadata && _typeof(metadata) === 'object') {
        return metadata;
      } else if (_typeof(win) !== 'object') {
        return {};
      }
      return {
        testEngine: {
          name: 'axe-core',
          version: axe.version
        },
        testRunner: {
          name: axe._audit.brand
        },
        testEnvironment: getTestEnvironment(win),
        timestamp: new Date().toISOString(),
        url: (_win$location = win.location) === null || _win$location === void 0 ? void 0 : _win$location.href
      };
    }
    function getTestEnvironment(win) {
      if (!win.navigator || _typeof(win.navigator) !== 'object') {
        return {};
      }
      var navigator2 = win.navigator, innerHeight = win.innerHeight, innerWidth = win.innerWidth;
      var _ref64 = getOrientation(win) || {}, angle = _ref64.angle, type2 = _ref64.type;
      return {
        userAgent: navigator2.userAgent,
        windowWidth: innerWidth,
        windowHeight: innerHeight,
        orientationAngle: angle,
        orientationType: type2
      };
    }
    function getOrientation(_ref65) {
      var screen = _ref65.screen;
      return screen.orientation || screen.msOrientation || screen.mozOrientation;
    }
    function createFrameContext(frame, _ref66) {
      var focusable = _ref66.focusable, page = _ref66.page;
      return {
        node: frame,
        include: [],
        exclude: [],
        initiator: false,
        focusable: focusable && frameFocusable(frame),
        size: getBoundingSize(frame),
        page: page
      };
    }
    function frameFocusable(frame) {
      var tabIndex = parse_tabindex_default(frame.getAttribute('tabindex'));
      return tabIndex === null || tabIndex >= 0;
    }
    function getBoundingSize(domNode) {
      var width = parseInt(domNode.getAttribute('width'), 10);
      var height = parseInt(domNode.getAttribute('height'), 10);
      if (isNaN(width) || isNaN(height)) {
        var rect = domNode.getBoundingClientRect();
        width = isNaN(width) ? rect.width : width;
        height = isNaN(height) ? rect.height : height;
      }
      return {
        width: width,
        height: height
      };
    }
    function normalizeContext(contextSpec) {
      if (_isContextObject(contextSpec)) {
        var msg = ' must be used inside include or exclude. It should not be on the same object.';
        assert2(!_objectHasOwn(contextSpec, 'fromFrames'), 'fromFrames' + msg);
        assert2(!_objectHasOwn(contextSpec, 'fromShadowDom'), 'fromShadowDom' + msg);
      } else if (_isContextProp(contextSpec)) {
        contextSpec = {
          include: contextSpec,
          exclude: []
        };
      } else {
        return {
          include: [ document ],
          exclude: []
        };
      }
      var include = normalizeContextList(contextSpec.include);
      if (include.length === 0) {
        include.push(document);
      }
      var exclude = normalizeContextList(contextSpec.exclude);
      return {
        include: include,
        exclude: exclude
      };
    }
    function normalizeContextList() {
      var selectorList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var normalizedList = [];
      if (!_isArrayLike(selectorList)) {
        selectorList = [ selectorList ];
      }
      for (var _i25 = 0; _i25 < selectorList.length; _i25++) {
        var normalizedSelector = normalizeContextSelector(selectorList[_i25]);
        if (normalizedSelector) {
          normalizedList.push(normalizedSelector);
        }
      }
      return normalizedList;
    }
    function normalizeContextSelector(selector) {
      if (selector instanceof window.Node) {
        return selector;
      }
      if (typeof selector === 'string') {
        return [ selector ];
      }
      if (_isLabelledFramesSelector(selector)) {
        assertLabelledFrameSelector(selector);
        selector = selector.fromFrames;
      } else if (_isLabelledShadowDomSelector(selector)) {
        selector = [ selector ];
      }
      return normalizeFrameSelectors(selector);
    }
    function normalizeFrameSelectors(frameSelectors) {
      if (!Array.isArray(frameSelectors)) {
        return;
      }
      var normalizedSelectors = [];
      var _iterator11 = _createForOfIteratorHelper(frameSelectors), _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
          var selector = _step11.value;
          if (_isLabelledShadowDomSelector(selector)) {
            assertLabelledShadowDomSelector(selector);
            selector = selector.fromShadowDom;
          }
          if (typeof selector !== 'string' && !isShadowSelector(selector)) {
            return;
          }
          normalizedSelectors.push(selector);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      return normalizedSelectors;
    }
    function assertLabelledFrameSelector(selector) {
      assert2(Array.isArray(selector.fromFrames), 'fromFrames property must be an array');
      assert2(selector.fromFrames.every(function(fromFrameSelector) {
        return !_objectHasOwn(fromFrameSelector, 'fromFrames');
      }), 'Invalid context; fromFrames selector must be appended, rather than nested');
      assert2(!_objectHasOwn(selector, 'fromShadowDom'), 'fromFrames and fromShadowDom cannot be used on the same object');
    }
    function assertLabelledShadowDomSelector(selector) {
      assert2(Array.isArray(selector.fromShadowDom), 'fromShadowDom property must be an array');
      assert2(selector.fromShadowDom.every(function(fromShadowDomSelector) {
        return !_objectHasOwn(fromShadowDomSelector, 'fromFrames');
      }), 'shadow selector must be inside fromFrame instead');
      assert2(selector.fromShadowDom.every(function(fromShadowDomSelector) {
        return !_objectHasOwn(fromShadowDomSelector, 'fromShadowDom');
      }), 'fromShadowDom selector must be appended, rather than nested');
    }
    function isShadowSelector(selector) {
      return Array.isArray(selector) && selector.every(function(str) {
        return typeof str === 'string';
      });
    }
    function assert2(bool, str) {
      assert_default(bool, 'Invalid context; '.concat(str, '\nSee: https://github.com/dequelabs/axe-core/blob/master/doc/context.md'));
    }
    function parseSelectorArray(context, type2) {
      var result = [];
      for (var _i26 = 0, l = context[type2].length; _i26 < l; _i26++) {
        var item = context[type2][_i26];
        if (item instanceof window.Node) {
          if (item.documentElement instanceof window.Node) {
            result.push(context.flatTree[0]);
          } else {
            result.push(get_node_from_tree_default(item));
          }
        } else if (item && item.length) {
          if (item.length > 1) {
            pushUniqueFrameSelector(context, type2, item);
          } else {
            var nodeList = _shadowSelectAll(item[0]);
            result.push.apply(result, _toConsumableArray(nodeList.map(function(node) {
              return get_node_from_tree_default(node);
            })));
          }
        }
      }
      return result.filter(function(r) {
        return r;
      });
    }
    function pushUniqueFrameSelector(context, type2, selectorArray) {
      context.frames = context.frames || [];
      var frameSelector = selectorArray.shift();
      var frames = _shadowSelectAll(frameSelector);
      frames.forEach(function(frame) {
        var frameContext = context.frames.find(function(result) {
          return result.node === frame;
        });
        if (!frameContext) {
          frameContext = createFrameContext(frame, context);
          context.frames.push(frameContext);
        }
        frameContext[type2].push(selectorArray);
      });
    }
    function Context(spec, flatTree) {
      var _spec2, _spec3, _spec4, _spec5, _this5 = this;
      spec = _clone(spec);
      this.frames = [];
      this.page = typeof ((_spec2 = spec) === null || _spec2 === void 0 ? void 0 : _spec2.page) === 'boolean' ? spec.page : void 0;
      this.initiator = typeof ((_spec3 = spec) === null || _spec3 === void 0 ? void 0 : _spec3.initiator) === 'boolean' ? spec.initiator : true;
      this.focusable = typeof ((_spec4 = spec) === null || _spec4 === void 0 ? void 0 : _spec4.focusable) === 'boolean' ? spec.focusable : true;
      this.size = _typeof((_spec5 = spec) === null || _spec5 === void 0 ? void 0 : _spec5.size) === 'object' ? spec.size : {};
      spec = normalizeContext(spec);
      this.flatTree = flatTree !== null && flatTree !== void 0 ? flatTree : _getFlattenedTree(getRootNode2(spec));
      this.exclude = spec.exclude;
      this.include = spec.include;
      this.include = parseSelectorArray(this, 'include');
      this.exclude = parseSelectorArray(this, 'exclude');
      _select('frame, iframe', this).forEach(function(frame) {
        if (_isNodeInContext(frame, _this5)) {
          pushUniqueFrame(_this5, frame.actualNode);
        }
      });
      if (typeof this.page === 'undefined') {
        this.page = isPageContext(this);
        this.frames.forEach(function(frame) {
          frame.page = _this5.page;
        });
      }
      validateContext(this);
      if (!Array.isArray(this.include)) {
        this.include = Array.from(this.include);
      }
      this.include.sort(node_sorter_default);
    }
    function pushUniqueFrame(context, frame) {
      if (!_isVisibleToScreenReaders(frame) || find_by_default(context.frames, 'node', frame)) {
        return;
      }
      context.frames.push(createFrameContext(frame, context));
    }
    function isPageContext(_ref67) {
      var include = _ref67.include;
      return include.length === 1 && include[0].actualNode === document.documentElement;
    }
    function validateContext(context) {
      if (context.include.length === 0 && context.frames.length === 0) {
        var env = _respondable.isInFrame() ? 'frame' : 'page';
        throw new Error('No elements found for include in ' + env + ' Context');
      }
    }
    function getRootNode2(_ref68) {
      var include = _ref68.include, exclude = _ref68.exclude;
      var selectors = Array.from(include).concat(Array.from(exclude));
      for (var _i27 = 0; _i27 < selectors.length; _i27++) {
        var item = selectors[_i27];
        if (item instanceof window.Element) {
          return item.ownerDocument.documentElement;
        }
        if (item instanceof window.Document) {
          return item.documentElement;
        }
      }
      return document.documentElement;
    }
    function _getFrameContexts(context) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (options.iframes === false) {
        return [];
      }
      var _Context = new Context(context), frames = _Context.frames;
      return frames.map(function(_ref69) {
        var node = _ref69.node, frameContext = _objectWithoutProperties(_ref69, _excluded14);
        frameContext.initiator = false;
        var frameSelector = _getAncestry(node);
        return {
          frameSelector: frameSelector,
          frameContext: frameContext
        };
      });
    }
    function _getRule(ruleId) {
      var rule = axe._audit.rules.find(function(_ref70) {
        var id = _ref70.id;
        return id === ruleId;
      });
      if (!rule) {
        throw new Error('Cannot find rule by id: '.concat(ruleId));
      }
      return rule;
    }
    function getScroll(elm) {
      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var overflowX = elm.scrollWidth > elm.clientWidth + buffer;
      var overflowY = elm.scrollHeight > elm.clientHeight + buffer;
      if (!(overflowX || overflowY)) {
        return;
      }
      var style = window.getComputedStyle(elm);
      var scrollableX = isScrollable(style, 'overflow-x');
      var scrollableY = isScrollable(style, 'overflow-y');
      if (overflowX && scrollableX || overflowY && scrollableY) {
        return {
          elm: elm,
          top: elm.scrollTop,
          left: elm.scrollLeft
        };
      }
    }
    function isScrollable(style, prop) {
      var overflowProp = style.getPropertyValue(prop);
      return [ 'scroll', 'auto' ].includes(overflowProp);
    }
    var get_scroll_default = memoize_default(getScroll);
    function getElmScrollRecursive(root) {
      return Array.from(root.children || root.childNodes || []).reduce(function(scrolls, elm) {
        var scroll = get_scroll_default(elm);
        if (scroll) {
          scrolls.push(scroll);
        }
        return scrolls.concat(getElmScrollRecursive(elm));
      }, []);
    }
    function getScrollState() {
      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
      var root = win.document.documentElement;
      var windowScroll = [ win.pageXOffset !== void 0 ? {
        elm: win,
        top: win.pageYOffset,
        left: win.pageXOffset
      } : {
        elm: root,
        top: root.scrollTop,
        left: root.scrollLeft
      } ];
      return windowScroll.concat(getElmScrollRecursive(document.body));
    }
    var get_scroll_state_default = getScrollState;
    function _getStandards() {
      return _clone(standards_default);
    }
    function getStyleSheetFactory(dynamicDoc) {
      if (!dynamicDoc) {
        throw new Error('axe.utils.getStyleSheetFactory should be invoked with an argument');
      }
      return function(options) {
        var data = options.data, _options$isCrossOrigi = options.isCrossOrigin, isCrossOrigin = _options$isCrossOrigi === void 0 ? false : _options$isCrossOrigi, shadowId = options.shadowId, root = options.root, priority = options.priority, _options$isLink = options.isLink, isLink = _options$isLink === void 0 ? false : _options$isLink;
        var style = dynamicDoc.createElement('style');
        if (isLink) {
          var text = dynamicDoc.createTextNode('@import "'.concat(data.href, '"'));
          style.appendChild(text);
        } else {
          style.appendChild(dynamicDoc.createTextNode(data));
        }
        dynamicDoc.head.appendChild(style);
        return {
          sheet: style.sheet,
          isCrossOrigin: isCrossOrigin,
          shadowId: shadowId,
          root: root,
          priority: priority
        };
      };
    }
    var get_stylesheet_factory_default = getStyleSheetFactory;
    var styleSheet;
    function injectStyle(style) {
      if (styleSheet && styleSheet.parentNode) {
        if (styleSheet.styleSheet === void 0) {
          styleSheet.appendChild(document.createTextNode(style));
        } else {
          styleSheet.styleSheet.cssText += style;
        }
        return styleSheet;
      }
      if (!style) {
        return;
      }
      var head = document.head || document.getElementsByTagName('head')[0];
      styleSheet = document.createElement('style');
      styleSheet.type = 'text/css';
      if (styleSheet.styleSheet === void 0) {
        styleSheet.appendChild(document.createTextNode(style));
      } else {
        styleSheet.styleSheet.cssText = style;
      }
      head.appendChild(styleSheet);
      return styleSheet;
    }
    var inject_style_default = injectStyle;
    function _isArrayLike(arr) {
      return !!arr && _typeof(arr) === 'object' && typeof arr.length === 'number' && arr instanceof window.Node === false;
    }
    function _objectHasOwn(obj, prop) {
      if (!obj || _typeof(obj) !== 'object') {
        return false;
      }
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    function _isContextSpec(contextSpec) {
      return _isContextObject(contextSpec) || _isContextProp(contextSpec);
    }
    function _isContextObject(contextSpec) {
      return [ 'include', 'exclude' ].some(function(prop) {
        return _objectHasOwn(contextSpec, prop) && _isContextProp(contextSpec[prop]);
      });
    }
    function _isContextProp(contextList) {
      return typeof contextList === 'string' || contextList instanceof window.Node || _isLabelledFramesSelector(contextList) || _isLabelledShadowDomSelector(contextList) || _isArrayLike(contextList);
    }
    function _isLabelledFramesSelector(selector) {
      return _objectHasOwn(selector, 'fromFrames');
    }
    function _isLabelledShadowDomSelector(selector) {
      return _objectHasOwn(selector, 'fromShadowDom');
    }
    function isHidden(el, recursed) {
      var node = get_node_from_tree_default(el);
      if (el.nodeType === 9) {
        return false;
      }
      if (el.nodeType === 11) {
        el = el.host;
      }
      if (node && node._isHidden !== null) {
        return node._isHidden;
      }
      var style = window.getComputedStyle(el, null);
      if (!style || !el.parentNode || style.getPropertyValue('display') === 'none' || !recursed && style.getPropertyValue('visibility') === 'hidden' || el.getAttribute('aria-hidden') === 'true') {
        return true;
      }
      var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;
      var hidden = isHidden(parent, true);
      if (node) {
        node._isHidden = hidden;
      }
      return hidden;
    }
    var is_hidden_default = isHidden;
    function isHtmlElement(node) {
      var _node$props$nodeName, _node$props;
      var nodeName2 = (_node$props$nodeName = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.nodeName) !== null && _node$props$nodeName !== void 0 ? _node$props$nodeName : node.nodeName.toLowerCase();
      if (node.namespaceURI === 'http://www.w3.org/2000/svg') {
        return false;
      }
      return !!standards_default.htmlElms[nodeName2];
    }
    var is_html_element_default = isHtmlElement;
    function _isNodeInContext(node, _ref71) {
      var _ref71$include = _ref71.include, include = _ref71$include === void 0 ? [] : _ref71$include, _ref71$exclude = _ref71.exclude, exclude = _ref71$exclude === void 0 ? [] : _ref71$exclude;
      var filterInclude = include.filter(function(candidate) {
        return _contains(candidate, node);
      });
      if (filterInclude.length === 0) {
        return false;
      }
      var filterExcluded = exclude.filter(function(candidate) {
        return _contains(candidate, node);
      });
      if (filterExcluded.length === 0) {
        return true;
      }
      var deepestInclude = getDeepest(filterInclude);
      var deepestExclude = getDeepest(filterExcluded);
      return _contains(deepestExclude, deepestInclude);
    }
    function getDeepest(collection) {
      var deepest;
      var _iterator12 = _createForOfIteratorHelper(collection), _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
          var node = _step12.value;
          if (!deepest || !_contains(node, deepest)) {
            deepest = node;
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return deepest;
    }
    function _matchAncestry(ancestryA, ancestryB) {
      if (ancestryA.length !== ancestryB.length) {
        return false;
      }
      return ancestryA.every(function(selectorA, ancestorIndex) {
        var selectorB = ancestryB[ancestorIndex];
        if (!Array.isArray(selectorA)) {
          return selectorA === selectorB;
        }
        if (selectorA.length !== selectorB.length) {
          return false;
        }
        return selectorA.every(function(str, selectorIndex) {
          return selectorB[selectorIndex] === str;
        });
      });
    }
    function nodeSorter(nodeA, nodeB) {
      nodeA = nodeA.actualNode || nodeA;
      nodeB = nodeB.actualNode || nodeB;
      if (nodeA === nodeB) {
        return 0;
      }
      if (nodeA.compareDocumentPosition(nodeB) & 4) {
        return -1;
      } else {
        return 1;
      }
    }
    var node_sorter_default = nodeSorter;
    function _nodeLookup(node) {
      if (node instanceof abstract_virtual_node_default) {
        return {
          vNode: node,
          domNode: node.actualNode
        };
      }
      return {
        vNode: get_node_from_tree_default(node),
        domNode: node
      };
    }
    function parseSameOriginStylesheet(sheet, options, priority, importedUrls) {
      var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var rules = Array.from(sheet.cssRules);
      if (!rules) {
        return Promise.resolve();
      }
      var cssImportRules = rules.filter(function(r) {
        return r.type === 3;
      });
      if (!cssImportRules.length) {
        return Promise.resolve({
          isCrossOrigin: isCrossOrigin,
          priority: priority,
          root: options.rootNode,
          shadowId: options.shadowId,
          sheet: sheet
        });
      }
      var cssImportUrlsNotAlreadyImported = cssImportRules.filter(function(rule) {
        return rule.href;
      }).map(function(rule) {
        return rule.href;
      }).filter(function(url) {
        return !importedUrls.includes(url);
      });
      var promises = cssImportUrlsNotAlreadyImported.map(function(importUrl, cssRuleIndex) {
        var newPriority = [].concat(_toConsumableArray(priority), [ cssRuleIndex ]);
        var isCrossOriginRequest = /^https?:\/\/|^\/\//i.test(importUrl);
        return parse_crossorigin_stylesheet_default(importUrl, options, newPriority, importedUrls, isCrossOriginRequest);
      });
      var nonImportCSSRules = rules.filter(function(r) {
        return r.type !== 3;
      });
      if (!nonImportCSSRules.length) {
        return Promise.all(promises);
      }
      promises.push(Promise.resolve(options.convertDataToStylesheet({
        data: nonImportCSSRules.map(function(rule) {
          return rule.cssText;
        }).join(),
        isCrossOrigin: isCrossOrigin,
        priority: priority,
        root: options.rootNode,
        shadowId: options.shadowId
      })));
      return Promise.all(promises);
    }
    var parse_sameorigin_stylesheet_default = parseSameOriginStylesheet;
    function parseStylesheet(sheet, options, priority, importedUrls) {
      var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var isSameOrigin = isSameOriginStylesheet(sheet);
      if (isSameOrigin) {
        return parse_sameorigin_stylesheet_default(sheet, options, priority, importedUrls, isCrossOrigin);
      }
      return parse_crossorigin_stylesheet_default(sheet.href, options, priority, importedUrls, true);
    }
    function isSameOriginStylesheet(sheet) {
      try {
        var rules = sheet.cssRules;
        if (!rules && sheet.href) {
          return false;
        }
        return true;
      } catch (e) {
        return false;
      }
    }
    var parse_stylesheet_default = parseStylesheet;
    function parseCrossOriginStylesheet(url, options, priority, importedUrls, isCrossOrigin) {
      importedUrls.push(url);
      return new Promise(function(resolve, reject) {
        var request = new window.XMLHttpRequest();
        request.open('GET', url);
        request.timeout = constants_default.preload.timeout;
        request.addEventListener('error', reject);
        request.addEventListener('timeout', reject);
        request.addEventListener('loadend', function(event) {
          if (event.loaded && request.responseText) {
            return resolve(request.responseText);
          }
          reject(request.responseText);
        });
        request.send();
      }).then(function(data) {
        var result = options.convertDataToStylesheet({
          data: data,
          isCrossOrigin: isCrossOrigin,
          priority: priority,
          root: options.rootNode,
          shadowId: options.shadowId
        });
        return parse_stylesheet_default(result.sheet, options, priority, importedUrls, result.isCrossOrigin);
      });
    }
    var parse_crossorigin_stylesheet_default = parseCrossOriginStylesheet;
    function parseTabindex(value) {
      if (typeof value !== 'string') {
        return null;
      }
      var match = value.trim().match(/^([-+]?\d+)/);
      if (match) {
        return Number(match[1]);
      }
      return null;
    }
    var parse_tabindex_default = parseTabindex;
    var performanceTimer = function() {
      function now() {
        if (window.performance && window.performance) {
          return window.performance.now();
        }
      }
      var originalTime = null;
      var lastRecordedTime = now();
      return {
        start: function start() {
          this.mark('mark_axe_start');
        },
        end: function end() {
          this.mark('mark_axe_end');
          this.measure('axe', 'mark_axe_start', 'mark_axe_end');
          this.logMeasures('axe');
        },
        auditStart: function auditStart() {
          this.mark('mark_audit_start');
        },
        auditEnd: function auditEnd() {
          this.mark('mark_audit_end');
          this.measure('audit_start_to_end', 'mark_audit_start', 'mark_audit_end');
          this.logMeasures();
        },
        mark: function mark(markName) {
          if (window.performance && window.performance.mark !== void 0) {
            window.performance.mark(markName);
          }
        },
        measure: function measure(measureName, startMark, endMark) {
          if (window.performance && window.performance.measure !== void 0) {
            window.performance.measure(measureName, startMark, endMark);
          }
        },
        logMeasures: function logMeasures(measureName) {
          function logMeasure(req) {
            log_default('Measure ' + req.name + ' took ' + req.duration + 'ms');
          }
          if (window.performance && window.performance.getEntriesByType !== void 0) {
            var axeStart = window.performance.getEntriesByName('mark_axe_start')[0];
            var measures = window.performance.getEntriesByType('measure').filter(function(measure) {
              return measure.startTime >= axeStart.startTime;
            });
            for (var _i28 = 0; _i28 < measures.length; ++_i28) {
              var req = measures[_i28];
              if (req.name === measureName) {
                logMeasure(req);
                return;
              }
              logMeasure(req);
            }
          }
        },
        timeElapsed: function timeElapsed() {
          return now() - lastRecordedTime;
        },
        reset: function reset() {
          if (!originalTime) {
            originalTime = now();
          }
          lastRecordedTime = now();
        }
      };
    }();
    var performance_timer_default = performanceTimer;
    function _pollyfillElementsFromPoint() {
      if (document.elementsFromPoint) {
        return document.elementsFromPoint;
      }
      if (document.msElementsFromPoint) {
        return document.msElementsFromPoint;
      }
      var usePointer = function() {
        var element = document.createElement('x');
        element.style.cssText = 'pointer-events:auto';
        return element.style.pointerEvents === 'auto';
      }();
      var cssProp = usePointer ? 'pointer-events' : 'visibility';
      var cssDisableVal = usePointer ? 'none' : 'hidden';
      var style = document.createElement('style');
      style.innerHTML = usePointer ? '* { pointer-events: all }' : '* { visibility: visible }';
      return function(x, y) {
        var current, i, d2;
        var elements = [];
        var previousPointerEvents = [];
        document.head.appendChild(style);
        while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1) {
          elements.push(current);
          previousPointerEvents.push({
            value: current.style.getPropertyValue(cssProp),
            priority: current.style.getPropertyPriority(cssProp)
          });
          current.style.setProperty(cssProp, cssDisableVal, 'important');
        }
        if (elements.indexOf(document.documentElement) < elements.length - 1) {
          elements.splice(elements.indexOf(document.documentElement), 1);
          elements.push(document.documentElement);
        }
        for (i = previousPointerEvents.length; !!(d2 = previousPointerEvents[--i]); ) {
          elements[i].style.setProperty(cssProp, d2.value ? d2.value : '', d2.priority);
        }
        document.head.removeChild(style);
        return elements;
      };
    }
    if (typeof window.addEventListener === 'function') {
      document.elementsFromPoint = _pollyfillElementsFromPoint();
    }
    function uniqueArray(arr1, arr2) {
      return arr1.concat(arr2).filter(function(elem, pos, arr) {
        return arr.indexOf(elem) === pos;
      });
    }
    var unique_array_default = uniqueArray;
    function createLocalVariables(vNodes, anyLevel, thisLevel, parentShadowId, recycledLocalVariable) {
      var retVal = recycledLocalVariable || {};
      retVal.vNodes = vNodes;
      retVal.vNodesIndex = 0;
      retVal.anyLevel = anyLevel;
      retVal.thisLevel = thisLevel;
      retVal.parentShadowId = parentShadowId;
      return retVal;
    }
    function matchExpressions(domTree, expressions, filter) {
      var recycledLocalVariables = cache_default.get('qsa.recycledLocalVariables', function() {
        return [];
      });
      var stack = [];
      var vNodes = Array.isArray(domTree) ? domTree : [ domTree ];
      var currentLevel = createLocalVariables(vNodes, expressions, null, domTree[0].shadowId, recycledLocalVariables.pop());
      var result = [];
      while (currentLevel.vNodesIndex < currentLevel.vNodes.length) {
        var _currentLevel$anyLeve, _currentLevel$thisLev;
        var vNode = currentLevel.vNodes[currentLevel.vNodesIndex++];
        var childOnly = null;
        var childAny = null;
        var combinedLength = (((_currentLevel$anyLeve = currentLevel.anyLevel) === null || _currentLevel$anyLeve === void 0 ? void 0 : _currentLevel$anyLeve.length) || 0) + (((_currentLevel$thisLev = currentLevel.thisLevel) === null || _currentLevel$thisLev === void 0 ? void 0 : _currentLevel$thisLev.length) || 0);
        var added = false;
        for (var _i29 = 0; _i29 < combinedLength; _i29++) {
          var _currentLevel$anyLeve2, _currentLevel$anyLeve3, _currentLevel$anyLeve4;
          var exp = _i29 < (((_currentLevel$anyLeve2 = currentLevel.anyLevel) === null || _currentLevel$anyLeve2 === void 0 ? void 0 : _currentLevel$anyLeve2.length) || 0) ? currentLevel.anyLevel[_i29] : currentLevel.thisLevel[_i29 - (((_currentLevel$anyLeve3 = currentLevel.anyLevel) === null || _currentLevel$anyLeve3 === void 0 ? void 0 : _currentLevel$anyLeve3.length) || 0)];
          if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && _matchesExpression(vNode, exp[0])) {
            if (exp.length === 1) {
              if (!added && (!filter || filter(vNode))) {
                result.push(vNode);
                added = true;
              }
            } else {
              var rest = exp.slice(1);
              if ([ ' ', '>' ].includes(rest[0].combinator) === false) {
                throw new Error('axe.utils.querySelectorAll does not support the combinator: ' + exp[1].combinator);
              }
              if (rest[0].combinator === '>') {
                (childOnly = childOnly || []).push(rest);
              } else {
                (childAny = childAny || []).push(rest);
              }
            }
          }
          if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && (_currentLevel$anyLeve4 = currentLevel.anyLevel) !== null && _currentLevel$anyLeve4 !== void 0 && _currentLevel$anyLeve4.includes(exp)) {
            (childAny = childAny || []).push(exp);
          }
        }
        if (vNode.children && vNode.children.length) {
          stack.push(currentLevel);
          currentLevel = createLocalVariables(vNode.children, childAny, childOnly, vNode.shadowId, recycledLocalVariables.pop());
        }
        while (currentLevel.vNodesIndex === currentLevel.vNodes.length && stack.length) {
          recycledLocalVariables.push(currentLevel);
          currentLevel = stack.pop();
        }
      }
      return result;
    }
    function querySelectorAllFilter(domTree, selector, filter) {
      domTree = Array.isArray(domTree) ? domTree : [ domTree ];
      var expressions = _convertSelector(selector);
      var nodes = getNodesMatchingExpression(domTree, expressions, filter);
      if (nodes) {
        return nodes;
      }
      return matchExpressions(domTree, expressions, filter);
    }
    var query_selector_all_filter_default = querySelectorAllFilter;
    function preloadCssom(_ref72) {
      var _ref72$treeRoot = _ref72.treeRoot, treeRoot = _ref72$treeRoot === void 0 ? axe._tree[0] : _ref72$treeRoot;
      var rootNodes = getAllRootNodesInTree(treeRoot);
      if (!rootNodes.length) {
        return Promise.resolve();
      }
      var dynamicDoc = document.implementation.createHTMLDocument('Dynamic document for loading cssom');
      var convertDataToStylesheet = get_stylesheet_factory_default(dynamicDoc);
      return getCssomForAllRootNodes(rootNodes, convertDataToStylesheet).then(function(assets) {
        return flattenAssets(assets);
      });
    }
    var preload_cssom_default = preloadCssom;
    function getAllRootNodesInTree(tree) {
      var ids = [];
      var rootNodes = query_selector_all_filter_default(tree, '*', function(node) {
        if (ids.includes(node.shadowId)) {
          return false;
        }
        ids.push(node.shadowId);
        return true;
      }).map(function(node) {
        return {
          shadowId: node.shadowId,
          rootNode: get_root_node_default(node.actualNode)
        };
      });
      return unique_array_default(rootNodes, []);
    }
    function getCssomForAllRootNodes(rootNodes, convertDataToStylesheet) {
      var promises = [];
      rootNodes.forEach(function(_ref73, index) {
        var rootNode = _ref73.rootNode, shadowId = _ref73.shadowId;
        var sheets = getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet);
        if (!sheets) {
          return Promise.all(promises);
        }
        var rootIndex = index + 1;
        var parseOptions = {
          rootNode: rootNode,
          shadowId: shadowId,
          convertDataToStylesheet: convertDataToStylesheet,
          rootIndex: rootIndex
        };
        var importedUrls = [];
        var p2 = Promise.all(sheets.map(function(sheet, sheetIndex) {
          var priority = [ rootIndex, sheetIndex ];
          return parse_stylesheet_default(sheet, parseOptions, priority, importedUrls);
        }));
        promises.push(p2);
      });
      return Promise.all(promises);
    }
    function flattenAssets(assets) {
      return assets.reduce(function(acc, val) {
        return Array.isArray(val) ? acc.concat(flattenAssets(val)) : acc.concat(val);
      }, []);
    }
    function getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet) {
      var sheets;
      if (rootNode.nodeType === 11 && shadowId) {
        sheets = getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet);
      } else {
        sheets = getStylesheetsFromDocument(rootNode);
      }
      return filterStylesheetsWithSameHref(sheets);
    }
    function getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet) {
      return Array.from(rootNode.children).filter(filerStyleAndLinkAttributesInDocumentFragment).reduce(function(out, node) {
        var nodeName2 = node.nodeName.toUpperCase();
        var data = nodeName2 === 'STYLE' ? node.textContent : node;
        var isLink = nodeName2 === 'LINK';
        var stylesheet = convertDataToStylesheet({
          data: data,
          isLink: isLink,
          root: rootNode
        });
        if (stylesheet.sheet) {
          out.push(stylesheet.sheet);
        }
        return out;
      }, []);
    }
    function getStylesheetsFromDocument(rootNode) {
      return Array.from(rootNode.styleSheets).filter(function(sheet) {
        if (!sheet.media) {
          return false;
        }
        return filterMediaIsPrint(sheet.media.mediaText);
      });
    }
    function filerStyleAndLinkAttributesInDocumentFragment(node) {
      var nodeName2 = node.nodeName.toUpperCase();
      var linkHref = node.getAttribute('href');
      var linkRel = node.getAttribute('rel');
      var isLink = nodeName2 === 'LINK' && linkHref && linkRel && node.rel.toUpperCase().includes('STYLESHEET');
      var isStyle = nodeName2 === 'STYLE';
      return isStyle || isLink && filterMediaIsPrint(node.media);
    }
    function filterMediaIsPrint(media) {
      if (!media) {
        return true;
      }
      return !media.toUpperCase().includes('PRINT');
    }
    function filterStylesheetsWithSameHref(sheets) {
      var hrefs = [];
      return sheets.filter(function(sheet) {
        if (!sheet.href) {
          return true;
        }
        if (hrefs.includes(sheet.href)) {
          return false;
        }
        hrefs.push(sheet.href);
        return true;
      });
    }
    function preloadMedia(_ref74) {
      var _ref74$treeRoot = _ref74.treeRoot, treeRoot = _ref74$treeRoot === void 0 ? axe._tree[0] : _ref74$treeRoot;
      var mediaVirtualNodes = query_selector_all_filter_default(treeRoot, 'video[autoplay], audio[autoplay]', function(_ref75) {
        var actualNode = _ref75.actualNode;
        if (actualNode.preload === 'none' && actualNode.readyState === 0 && actualNode.networkState !== actualNode.NETWORK_LOADING) {
          return false;
        }
        if (actualNode.hasAttribute('paused') || actualNode.hasAttribute('muted')) {
          return false;
        }
        if (actualNode.hasAttribute('src')) {
          return !!actualNode.getAttribute('src');
        }
        var sourceWithSrc = Array.from(actualNode.getElementsByTagName('source')).filter(function(source) {
          return !!source.getAttribute('src');
        });
        if (sourceWithSrc.length <= 0) {
          return false;
        }
        return true;
      });
      return Promise.all(mediaVirtualNodes.map(function(_ref76) {
        var actualNode = _ref76.actualNode;
        return isMediaElementReady(actualNode);
      }));
    }
    var preload_media_default = preloadMedia;
    function isMediaElementReady(elm) {
      return new Promise(function(resolve) {
        if (elm.readyState > 0) {
          resolve(elm);
        }
        function onMediaReady() {
          elm.removeEventListener('loadedmetadata', onMediaReady);
          resolve(elm);
        }
        elm.addEventListener('loadedmetadata', onMediaReady);
      });
    }
    function _preload(options) {
      var preloadFunctionsMap = {
        cssom: preload_cssom_default,
        media: preload_media_default
      };
      if (!_shouldPreload(options)) {
        return Promise.resolve();
      }
      return new Promise(function(resolve, reject) {
        var _getPreloadConfig2 = _getPreloadConfig(options), assets = _getPreloadConfig2.assets, timeout = _getPreloadConfig2.timeout;
        var preloadTimeout = setTimeout(function() {
          return reject(new Error('Preload assets timed out.'));
        }, timeout);
        Promise.all(assets.map(function(asset) {
          return preloadFunctionsMap[asset](options).then(function(results) {
            return _defineProperty({}, asset, results);
          });
        })).then(function(results) {
          var preloadAssets = results.reduce(function(out, result) {
            return _extends({}, out, result);
          }, {});
          clearTimeout(preloadTimeout);
          resolve(preloadAssets);
        })['catch'](function(err2) {
          clearTimeout(preloadTimeout);
          reject(err2);
        });
      });
    }
    function isValidPreloadObject(preloadObj) {
      return _typeof(preloadObj) === 'object' && Array.isArray(preloadObj.assets);
    }
    function _shouldPreload(options) {
      if (!options || options.preload === void 0 || options.preload === null) {
        return true;
      }
      if (typeof options.preload === 'boolean') {
        return options.preload;
      }
      return isValidPreloadObject(options.preload);
    }
    function _getPreloadConfig(options) {
      var _constants_default$pr = constants_default.preload, assets = _constants_default$pr.assets, timeout = _constants_default$pr.timeout;
      var config = {
        assets: assets,
        timeout: timeout
      };
      if (!options.preload) {
        return config;
      }
      if (typeof options.preload === 'boolean') {
        return config;
      }
      var areRequestedAssetsValid = options.preload.assets.every(function(a2) {
        return assets.includes(a2.toLowerCase());
      });
      if (!areRequestedAssetsValid) {
        throw new Error('Requested assets, not supported. Supported assets are: '.concat(assets.join(', '), '.'));
      }
      config.assets = unique_array_default(options.preload.assets.map(function(a2) {
        return a2.toLowerCase();
      }), []);
      if (options.preload.timeout && typeof options.preload.timeout === 'number' && !isNaN(options.preload.timeout)) {
        config.timeout = options.preload.timeout;
      }
      return config;
    }
    function _publishMetaData(ruleResult) {
      var checksData = axe._audit.data.checks || {};
      var rulesData = axe._audit.data.rules || {};
      var rule = find_by_default(axe._audit.rules, 'id', ruleResult.id) || {};
      ruleResult.tags = _clone(rule.tags || []);
      var shouldBeTrue = extender(checksData, true, rule);
      var shouldBeFalse = extender(checksData, false, rule);
      ruleResult.nodes.forEach(function(detail) {
        detail.any.forEach(shouldBeTrue);
        detail.all.forEach(shouldBeTrue);
        detail.none.forEach(shouldBeFalse);
      });
      extend_meta_data_default(ruleResult, _clone(rulesData[ruleResult.id] || {}));
    }
    function getIncompleteReason(checkData, messages) {
      function getDefaultMsg(message) {
        if (message.incomplete && message.incomplete['default']) {
          return message.incomplete['default'];
        } else {
          return incompleteFallbackMessage();
        }
      }
      if (checkData && checkData.missingData) {
        try {
          var msg = messages.incomplete[checkData.missingData[0].reason];
          if (!msg) {
            throw new Error();
          }
          return msg;
        } catch (_unused5) {
          if (typeof checkData.missingData === 'string') {
            return messages.incomplete[checkData.missingData];
          } else {
            return getDefaultMsg(messages);
          }
        }
      } else if (checkData && checkData.messageKey) {
        return messages.incomplete[checkData.messageKey];
      } else {
        return getDefaultMsg(messages);
      }
    }
    function extender(checksData, shouldBeTrue, rule) {
      return function(check) {
        var sourceData = checksData[check.id] || {};
        var messages = sourceData.messages || {};
        var data = Object.assign({}, sourceData);
        delete data.messages;
        if (!rule.reviewOnFail && check.result === void 0) {
          if (_typeof(messages.incomplete) === 'object' && !Array.isArray(check.data)) {
            data.message = getIncompleteReason(check.data, messages);
          }
          if (!data.message) {
            data.message = messages.incomplete;
          }
        } else {
          data.message = check.result === shouldBeTrue ? messages.pass : messages.fail;
        }
        if (typeof data.message !== 'function') {
          data.message = process_message_default(data.message, check.data);
        }
        extend_meta_data_default(check, data);
      };
    }
    function querySelectorAll(domTree, selector) {
      return query_selector_all_filter_default(domTree, selector);
    }
    var query_selector_all_default = querySelectorAll;
    function matchTags(rule, runOnly) {
      var include, exclude;
      var defaultExclude = axe._audit && axe._audit.tagExclude ? axe._audit.tagExclude : [];
      if (runOnly.hasOwnProperty('include') || runOnly.hasOwnProperty('exclude')) {
        include = runOnly.include || [];
        include = Array.isArray(include) ? include : [ include ];
        exclude = runOnly.exclude || [];
        exclude = Array.isArray(exclude) ? exclude : [ exclude ];
        exclude = exclude.concat(defaultExclude.filter(function(tag) {
          return include.indexOf(tag) === -1;
        }));
      } else {
        include = Array.isArray(runOnly) ? runOnly : [ runOnly ];
        exclude = defaultExclude.filter(function(tag) {
          return include.indexOf(tag) === -1;
        });
      }
      var matching = include.some(function(tag) {
        return rule.tags.indexOf(tag) !== -1;
      });
      if (matching || include.length === 0 && rule.enabled !== false) {
        return exclude.every(function(tag) {
          return rule.tags.indexOf(tag) === -1;
        });
      } else {
        return false;
      }
    }
    function ruleShouldRun(rule, context, options) {
      var runOnly = options.runOnly || {};
      var ruleOptions = (options.rules || {})[rule.id];
      if (rule.pageLevel && !context.page) {
        return false;
      } else if (runOnly.type === 'rule') {
        return runOnly.values.indexOf(rule.id) !== -1;
      } else if (ruleOptions && typeof ruleOptions.enabled === 'boolean') {
        return ruleOptions.enabled;
      } else if (runOnly.type === 'tag' && runOnly.values) {
        return matchTags(rule, runOnly.values);
      } else {
        return matchTags(rule, []);
      }
    }
    var rule_should_run_default = ruleShouldRun;
    function _filterHtmlAttrs(element, filterAttrs) {
      if (!filterAttrs) {
        return element;
      }
      var node = element.cloneNode(false);
      var attributes2 = get_node_attributes_default(node);
      if (node.nodeType === 1) {
        var outerHTML = node.outerHTML;
        node = cache_default.get(outerHTML, function() {
          return setNodeAttributes(node, attributes2, element, filterAttrs);
        });
      } else {
        node = setNodeAttributes(node, attributes2, element, filterAttrs);
      }
      Array.from(element.childNodes).forEach(function(child) {
        node.appendChild(_filterHtmlAttrs(child, filterAttrs));
      });
      return node;
    }
    function setNodeAttributes(node, attributes2, element, filterAttrs) {
      if (!attributes2) {
        return node;
      }
      node = document.createElement(node.nodeName);
      Array.from(attributes2).forEach(function(attr) {
        if (!attributeMatches(element, attr.name, filterAttrs)) {
          node.setAttribute(attr.name, attr.value);
        }
      });
      return node;
    }
    function attributeMatches(node, attrName, filterAttrs) {
      if (typeof filterAttrs[attrName] === 'undefined') {
        return false;
      }
      if (filterAttrs[attrName] === true) {
        return true;
      }
      return element_matches_default(node, filterAttrs[attrName]);
    }
    function _select(selector, context) {
      var result = [];
      var candidate;
      if (axe._selectCache) {
        for (var j = 0, l = axe._selectCache.length; j < l; j++) {
          var item = axe._selectCache[j];
          if (item.selector === selector) {
            return item.result;
          }
        }
      }
      var outerIncludes = getOuterIncludes(context.include);
      var isInContext = getContextFilter(context);
      for (var _i30 = 0; _i30 < outerIncludes.length; _i30++) {
        candidate = outerIncludes[_i30];
        var nodes = query_selector_all_filter_default(candidate, selector, isInContext);
        result = mergeArrayUniques(result, nodes);
      }
      if (axe._selectCache) {
        axe._selectCache.push({
          selector: selector,
          result: result
        });
      }
      return result;
    }
    function getOuterIncludes(includes) {
      return includes.reduce(function(res, el) {
        if (!res.length || !_contains(res[res.length - 1], el)) {
          res.push(el);
        }
        return res;
      }, []);
    }
    function getContextFilter(context) {
      if (!context.exclude || context.exclude.length === 0) {
        return null;
      }
      return function(node) {
        return _isNodeInContext(node, context);
      };
    }
    function mergeArrayUniques(arr1, arr2) {
      if (arr1.length === 0) {
        return arr2;
      }
      if (arr1.length < arr2.length) {
        var temp = arr1;
        arr1 = arr2;
        arr2 = temp;
      }
      for (var _i31 = 0, l = arr2.length; _i31 < l; _i31++) {
        if (!arr1.includes(arr2[_i31])) {
          arr1.push(arr2[_i31]);
        }
      }
      return arr1;
    }
    function setScroll(elm, top, left) {
      if (elm === window) {
        return elm.scroll(left, top);
      } else {
        elm.scrollTop = top;
        elm.scrollLeft = left;
      }
    }
    function setScrollState(scrollState) {
      scrollState.forEach(function(_ref78) {
        var elm = _ref78.elm, top = _ref78.top, left = _ref78.left;
        return setScroll(elm, top, left);
      });
    }
    var set_scroll_state_default = setScrollState;
    function _shadowSelect(selectors) {
      var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];
      return selectRecursive(selectorArr, document);
    }
    function selectRecursive(selectors, doc) {
      var selectorStr = selectors.shift();
      var elm = selectorStr ? doc.querySelector(selectorStr) : null;
      if (selectors.length === 0) {
        return elm;
      }
      if (!(elm !== null && elm !== void 0 && elm.shadowRoot)) {
        return null;
      }
      return selectRecursive(selectors, elm.shadowRoot);
    }
    function _shadowSelectAll(selectors) {
      var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      var selectorArr = Array.isArray(selectors) ? _toConsumableArray(selectors) : [ selectors ];
      if (selectors.length === 0) {
        return [];
      }
      return selectAllRecursive(selectorArr, doc);
    }
    function selectAllRecursive(_ref79, doc) {
      var _ref80 = _toArray(_ref79), selectorStr = _ref80[0], restSelector = _ref80.slice(1);
      var elms = doc.querySelectorAll(selectorStr);
      if (restSelector.length === 0) {
        return Array.from(elms);
      }
      var selected = [];
      var _iterator13 = _createForOfIteratorHelper(elms), _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
          var elm = _step13.value;
          if (elm !== null && elm !== void 0 && elm.shadowRoot) {
            selected.push.apply(selected, _toConsumableArray(selectAllRecursive(restSelector, elm.shadowRoot)));
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      return selected;
    }
    function validInputTypes() {
      return [ 'hidden', 'text', 'search', 'tel', 'url', 'email', 'password', 'date', 'month', 'week', 'time', 'datetime-local', 'number', 'range', 'color', 'checkbox', 'radio', 'file', 'submit', 'image', 'reset', 'button' ];
    }
    var valid_input_type_default = validInputTypes;
    var langs = [ , [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , , , , , 1, 1, 1, 1, , , 1, 1, 1, , 1, , 1, , 1, 1 ], [ 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , , , , 1, , 1, , , , 1, 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, , , 1, , , , , 1, 1, 1, , 1, , 1, , 1, , , , , , 1 ], [ 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, , 1, , 1, , , , , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, 1, 1, , , , , 1, , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , 1, 1, 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , , 1, 1, , , , , , 1, 1 ], [ 1, 1, 1, , , , , 1, , , , 1, 1, , 1, , , , , , 1, , , , , 1 ], [ , 1, , , 1, , , 1, , , , , , 1 ], [ , 1, , 1, , , , 1, , , , 1 ], [ 1, , 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, , , 1, , 1, 1, , 1, , 1, , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ , 1, 1, , , , , , 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, , , , , 1, 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, , , , 1, 1, 1, , 1, 1, , , 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , 1, 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, 1, , , , , 1 ], [ 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , 1, , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , 1, , , 1, , , 1, 1, , , , , 1 ] ], [ , [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , 1, , , , , , , , , , , , , , , 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, , , , 1, 1, , , 1, 1, , , , 1 ], [ 1, , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, , , 1, , 1, , , 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, , , 1, , , 1, , 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , , , , 1 ], [ , , , , , , , 1, , , , 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , , 1, , , 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, 1, , 1, , , , 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1 ], [ , 1, , , , , , , , , , 1, 1, , , , , , 1, 1, , 1, , 1, , 1, 1 ], , [ , 1, 1, , 1, , , 1, , 1, , , , 1, 1, 1, , , , , , 1, , , , 1 ], [ 1, 1, , , 1, 1, , 1, , , , , 1, , 1 ] ], [ , [ , 1 ], [ , , , 1, , , , 1, , , , 1, , , , 1, , , 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ 1, , , , , 1 ], [ , 1, , , , 1, , , , 1 ], [ , 1, , , , , , , , , , , 1, , , 1, , , , , , , , , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , 1 ], [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, , 1, 1, , 1, , , , , , , 1 ], [ 1, , , , , 1, , , 1, 1, , 1, , 1, , 1, 1, , , , , 1, , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , 1, , 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], , [ , 1, , , , , , 1, 1, 1, , 1, , , , 1, , , 1, 1, 1, , , 1 ], [ 1, , , , , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, , 1, , 1, , , 1, 1 ], [ 1, , 1, 1, , , , , 1, , , , , , 1, 1, , , 1, 1, 1, 1, , , 1, , 1 ], [ 1, , , , , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ] ], [ , [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, 1, 1 ], [ , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], , [ , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], , [ 1, 1, , , , 1, 1, , , , , , 1, , , , 1, , 1, , 1, 1, , 1 ], [ 1 ], [ , , , , , , , , , , , 1, , , , , , , , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, , 1, , , , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , , , 1, , , , , 1 ], [ , , 1, , , , , 1, , 1 ], [ 1, , , , 1, , , , , 1, , , , 1, 1, , , , 1, 1, , , , , 1 ], [ , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , 1, 1, , , , , , , 1, , 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , , , , , , 1, , , , , , , 1 ], , [ , , 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , , 1, 1, , 1, 1, 1, , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , 1 ], , [ 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , , , , , 1, , 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1 ], [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, , , 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , , , , , , , , 1, , , , 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, , 1, 1, , , 1, , 1, 1, , 1 ], [ , 1, , 1, , 1, , , 1, , , 1, 1, , 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , , , , , , , , , 1, , 1, , 1, 1, , , , 1, , , 1 ], [ , 1, , , 1, 1, , , , , , , , , 1, 1, 1, , , , , 1 ], [ 1, , , 1, 1, , , , 1, 1, 1, 1, 1, , , 1, , , 1, , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, , , , 1, 1, 1, , , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1, , , , 1, , , 1 ], [ , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, 1, 1, , , 1, , , , 1 ], [ , 1, , , , , , , , 1, , , , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, , , , 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, 1, 1, , 1, , , 1, 1, 1, 1, , , 1, , , , , , , 1 ], [ , 1, , , , , , , , 1, , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, 1, , , , , , , , , , , , 1, 1, , , , , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , , , , , 1 ], [ 1, 1, , , 1, , , 1, 1, 1, , , , 1 ], , [ , , , , , , , , , , , , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , 1, , , , , , , 1 ], [ 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , 1 ], [ , 1, , , , 1, , , , , , 1, , , 1, , , , , 1 ], [ , 1, 1, , 1, 1, , , , , , , , , , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, 1, 1, 1, , , , 1, 1, , , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, , 1, 1 ], [ , , , , , , , , , , , , , , , 1, , , , 1 ], , [ 1, 1, , 1, , 1, , , , , , 1, , 1, , 1, 1, , 1, , 1, 1, , 1, 1, , 1 ], [ , , 1, , , , , , 1, , , , 1, , 1, , , , , 1 ], [ 1, , , , , , , , , 1, , , , , , 1, , , , 1, , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, , 1, , , , , , 1, , , 1, , , , , , , , 1 ], [ , 1, , 1, , , , , , , , , , , , 1 ], , [ 1, 1, , , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ 1 ] ], [ , [ 1, , , , , , , , , 1, , , , , 1, , 1, , 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1, 1, , , , 1, , , 1, , , , 1 ], [ , 1, , , , , , , 1, , , , 1, , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , , , 1, , , , , , , , , 1, 1, 1, 1 ], [ 1 ], [ , 1, 1, , , 1, 1, , , , , 1, , 1, , , , , , , , 1, , , , 1 ], [ 1, , 1, , , 1, , 1, , , , , 1, 1, 1, 1, , , , 1, , , , 1 ], [ , , 1, , , , , , , 1, , , , , , , 1, , , , , , , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , 1 ], [ , , , 1, , 1, , , , , 1, , , , 1, 1, , , , 1 ], [ 1, , , , , 1, , , , 1, , 1, 1, , , 1, 1, , 1, 1, 1, , 1, 1, 1, , 1 ], [ , 1, 1, , , , , 1, , 1, , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , 1, 1, , 1, , 1, 1, , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , , 1, , 1 ], [ , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , , 1, , 1 ], [ , 1, , , , 1, , , 1, 1, , 1, , , 1, 1, , , 1, , , 1, , , 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, , , 1, , 1, 1 ], [ 1, , 1, 1, 1, 1, , , , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, , , , , , , , , , , , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , , , 1 ], [ 1, , , , , , , , , , , 1, , 1, , 1, , , , 1 ], [ , , , 1, , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , , 1, , , , , , , , , 1 ], [ , , , , , , , , 1, 1, , , , , , , , , 1, , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1 ], [ , , , , , 1, , , , 1, 1, 1, , , 1, 1, , , 1, , 1, 1, , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , 1, , , , , , , , , , , , , 1 ], [ , , 1, , , 1, , 1, 1, 1, , 1, 1, , 1, , , , 1, , 1, 1 ], , [ , , 1, , , 1, , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, , , 1, 1, , 1, , 1, , , 1, 1, 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , 1, , 1, 1, , 1, , , 1 ], [ , , , , , 1, , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, , , , , 1, , , 1, , 1, , , , 1, 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, , 1, 1, , 1, , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , , , , , , , , , , 1, , 1, 1 ], [ , , , , , , , , , , , , 1 ], , [ , 1, 1, 1, 1, , , , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1 ], [ 1, , , , 1, , , , , , , , , , 1 ], [ 1, , , , , , , , , 1 ], , [ , 1, , , , 1, , , , , , , , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, , 1, , , , 1, 1, , , 1, 1, , 1 ], [ , 1, 1, , 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, 1, 1, , , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, , 1, 1, , , , , 1 ], [ , 1, , , , , , , 1, 1, , , 1, 1, 1, , 1, , , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , , 1, , , , 1, , , , , , , 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, , , , 1, , 1, , 1, , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , , 1, 1, , , , , , , , , 1 ], , [ , 1, , 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1, , , , 1 ], [ , 1, , , 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1 ], [ 1, , , 1, , , , 1, 1, 1, , , , , 1, 1, , , , 1, , 1 ], [ 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , , 1, , 1, , , , , , , , 1, , 1 ], [ , 1, , , , 1, , 1, 1, , , , 1, 1, , 1, , , , 1, 1, 1, , 1 ], , [ , 1, , , , , , 1, , , , , , , 1 ], [ , , , , , , , , 1, , , , 1, , 1, , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , 1, , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , , , , 1, 1, 1, , , 1, , 1, 1, , , , 1, , 1, , , 1, 1 ], [ , , , , , , , 1, , , , 1, 1, 1, 1, 1, , 1, , , , , , , , 1 ], [ 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, , 1, , 1, 1, , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , 1, 1, , 1, , 1, 1, 1, , 1, , 1, 1, , 1, 1, , 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , , , , , , 1, , , , , 1, , 1 ], [ , 1, 1, 1, , 1, , 1, , 1, , , , 1, , 1, , , 1, , , , , , 1, 1 ], [ , 1, , , 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , , 1, , , 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , , , 1, , 1, , 1, , , , , , 1, , 1, , , , 1, 1 ] ], [ , [ , 1, , 1, , , , , , , , , , , , , , , 1, , , , 1 ], [ , , , , , , , , , 1, , 1, 1, 1, , 1, , , 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , , , 1, , , , , , 1 ], [ , 1, , , , , , , , , , 1, , , , , , , , , 1, 1 ], , [ , , , , , , , , , , , , , , , 1, , , , 1, , 1 ], [ , , 1, 1, , 1, , 1, , , , , , , , 1, , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , , 1, 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ 1, , 1, 1, , , , 1, , , , , , , , , 1, , , 1, , , 1, 1 ], [ , 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , , , , , 1, , 1, , 1, , , 1, , 1, 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, , 1, 1 ], [ , , , , 1, , , 1, , , , , , , 1, , , , 1, 1 ], [ , 1, , , , , , , , , , 1, , 1, , 1, , , , , 1, , , , , 1 ], , [ 1, 1, , 1, , 1, , 1, 1, , , , , , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, , , , , , 1, , , , , , 1, 1, , , , 1, 1, , , 1 ], [ , 1, 1, , 1, 1, , , , 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, , , 1, , , , 1, , , , 1, 1 ], [ , , , , 1 ], [ , , , , , , , , , 1, , , 1 ], , [ , , 1, , 1, , , , , , , , , 1, , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , , , , 1 ], [ , 1, , 1, , , , , , 1, , , , , 1, 1, , , , , 1, 1 ], [ , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , , 1, , 1, 1, 1 ], [ , 1, , , , 1, , , , , , , 1 ], [ , 1, , , 1, , , 1, , 1, , 1, 1, , 1, , , , , 1, , 1, , , , 1, 1 ], [ , 1, , , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, , , , 1, 1, , , , , , 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , 1, , , , , , , , 1, , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, , 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, , , , , , , 1, 1, , , , , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], , [ , 1, 1, , , , , 1, , 1, , , , 1, 1, 1, , , 1, , , , , 1 ], [ , , , , , , , , , , , , , 1 ], [ , , , , , 1, , , , , , , , 1, 1, , , , , 1, , 1, , , 1, 1 ], [ , , , , , , , , , , , , , , 1 ] ], [ , [ , 1 ], , , , , , , , , , , , , , , , , , , , [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, , , 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, , , , 1, , 1, 1 ], [ , 1, , 1, , 1, , , 1, , , , , 1, , , , , , 1, 1 ], [ , 1, , 1, , , , , 1, , , , 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , , , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , 1, 1, , , , 1 ], [ , , , , , , 1 ], [ , , 1 ], [ , 1, 1, , , 1, , 1, , 1, 1, , 1, 1, 1, , , , 1, 1, 1, , , , , 1 ], , [ , 1, , , , 1, , , , , , 1, , , 1, , , , 1, 1, , 1 ], [ , , , , , , , 1, , , , , , , , , 1 ], [ , 1, , , , 1, 1, , , , , , 1, 1, 1, , , , 1, , 1, 1 ], [ , , , , , , , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , , , , , 1, 1, , , , 1, , , , , , , 1, , , 1 ], , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , , 1, , , 1, , , , , 1, , 1, , 1, , 1, , , , , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , , , , 1, 1, , 1, 1, , 1, , , 1, , 1 ], [ , , , , , , , , , , , , , , 1, , , , , , 1 ], , [ , , , , , , , , , 1, , , , , , 1, , , , , 1 ], [ , , 1, , , , , , , 1, , , 1, 1 ], [ , , , 1, , , , , 1, , , , , 1, , , , , , 1, , , , 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, , , , 1, 1, 1, , , 1, 1, , , , 1, 1 ], , [ 1, 1, , , , , , , , , , 1, , 1, , 1, , , 1 ], [ , , , , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , 1, , , , , 1, , 1 ], [ , , , , , , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , , 1, , , 1, , , , , , , , 1, , , , , , 1, , , , 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, , , , , , , 1, , 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, , 1, , , , , , 1, , 1, , , , , 1, 1, , , , , 1 ], [ 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1, 1, , 1, , 1 ], [ , 1, 1, 1, 1, , , , , 1, , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , , , , 1, , 1, , 1, , , 1, , , 1, 1, , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , 1, , , , , 1, 1, , , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , , 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, 1, , 1, 1, 1, 1, 1, , , 1, , 1, , 1 ], [ 1, 1, 1, , 1, 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , , 1, , , , , , , , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , , , , , 1, 1, 1, 1, 1, , , , 1, 1, 1, , 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1 ], [ , 1, 1, 1, , 1, , 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , 1, , , 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, 1, , 1, , 1 ], [ , 1, , , , , , , 1, , 1, , 1, 1, 1, 1, , , , , , , , , 1 ] ], [ , [ , , , , , , , , , , , , , 1, 1, , , , 1 ], [ , 1, , , , , , , , 1, , , 1, , , , , , 1, , , 1, , , , 1 ], , [ , 1, , , , 1, , 1, , 1, 1, , 1, 1, , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, 1, , , 1, , , , , , , , , 1, 1, , , , , , , , , , 1 ], [ , 1, , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , , , , , 1, , , 1 ], [ , , , , , , , , , 1 ], [ 1, 1, , , , , , 1, 1, 1, , 1, 1, , , , 1, 1, , 1, , 1, 1, 1, , 1 ], [ , 1, 1, 1, , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, , , 1, , 1, , , , 1, 1, 1, 1, , 1, 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , 1, 1, , 1, , 1, , , 1, , , 1, , 1 ], [ , , , , , , , , , , , 1 ], [ , , , , , , , , , 1, , , , , , , , , , , , , 1 ], , [ 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , 1, 1, , 1, , , , , 1, , , 1, , 1 ], [ , 1, , , , 1, , , 1, , , , , , , , 1, , 1, , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , 1, , , 1 ], [ , , , , , 1, , , 1, , , , 1 ], [ , 1 ], , [ , 1 ], [ 1, , , , , , , , , , , , , , 1, , , , , 1 ] ], [ , [ , 1, , , , 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, , 1, 1, , 1, 1, , , 1 ], [ , , 1, , , , , , , , , 1 ], , , [ 1, , , 1, 1, , , , , , , , 1, 1, , 1, 1, , 1 ], , [ , , , , , , , , , , , , , , , , , , 1, , 1 ], , [ 1, , , 1, 1, , 1, 1, , , , , 1, , 1, , , , , 1, 1, , 1 ], , [ , 1, , , , , , , , 1, 1, 1, 1, 1, , 1, 1, , , , 1, 1 ], [ , , , , , , , , , , , , , , , , 1, , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , , , , , , , , , , , 1, , 1, , , 1 ], [ 1, , , , , , , , , , , , , , , , , , 1, , 1 ], , , [ , 1, , , , , , , , , , , , , , 1, , , , 1, 1 ], [ , , , , , , , , , 1, , , 1, , , , , , , , , , 1 ], [ , , , , , , , , , , , , , , , 1 ], [ , , , , , , , , , , , , , 1, 1, , , , , , 1 ], , [ , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , , 1, 1, , 1, 1, 1, 1, 1, 1, , , 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, , , , , , , , 1 ], [ , , , , 1, , , 1, , , 1, 1, , , , , , , , , , 1, , , , 1 ], [ , 1, , 1, 1, , , 1, 1, 1, , , , 1, 1, 1, 1, , 1, 1, 1, 1, , 1 ], [ , , , , , , , 1 ], [ , 1, 1, , , , , 1, , 1, , , , , , 1, , , , , , 1, , 1, , 1 ], [ , 1, , , , , , 1, , , , 1, , , , , , , , , , 1 ], [ , , 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , , , , , , , 1 ], [ , 1, 1, , 1, , , , , , , , 1, , , , , , 1, , , 1, , 1, , 1 ], [ , 1, , 1, , 1, , 1, 1, 1, , 1, 1, 1, , 1, , , 1, 1, , 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, , , , 1, 1, 1, , , , 1, 1, , , 1, 1 ], [ , , 1, 1, 1, 1, , 1, , 1, , 1, , 1, 1, 1, 1, , , , , 1, , 1, , 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, , 1, , 1, , 1, 1, 1, , , 1, 1, , , , 1, , 1 ], [ , , , 1 ], , [ , 1, 1, , 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, , 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , 1, , 1, , 1, , , , , , , 1, 1, , 1, 1 ], [ , , , , , , 1, , 1, 1, , 1, , 1, , , , , , , , , , 1 ], [ , 1, 1, , 1, , , , 1, , , , 1, 1, 1, , , , 1, , 1, 1, 1, , 1, 1 ], , [ , 1, 1, , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , 1, , , , , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , , , , , , 1, , , , 1, , , , , 1, , , , , , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, , 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, 1, , , 1, 1, 1, 1, , 1, , , , , 1, 1, 1 ], [ , , 1, 1, , 1, , 1, 1, , , , 1, 1, 1, 1, , , 1, , 1, 1, 1, 1, , 1 ], [ , 1, , 1, , , , , , , , 1, , 1, , 1, , , , , , , , , , 1 ], [ , , 1, , 1, , , 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1 ], [ , 1 ], [ , 1, 1, , 1, , 1, 1, , 1, , , 1, 1, 1, , , , 1, , , 1, , 1 ], [ 1, 1, , 1, 1, 1, , , , , , , , , , , , , 1, , 1, 1, 1 ], [ , 1, 1, , , , , , , 1, , , 1, , 1, , 1, , 1, 1, , , 1, , , 1 ], [ , , 1, , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, 1, 1, 1, , 1, , 1, , , , , 1, 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , 1, 1, 1, 1, , , , 1, 1 ], [ , , , 1, 1, , , 1, , 1, , 1, , 1, 1, 1, 1, , 1, , , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, 1, , 1, 1, , 1, , 1, , , , 1, 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, 1, 1, 1, 1, , , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1 ], [ , 1, 1, , 1, , , 1, , , 1, , 1, 1, 1, 1, 1, , 1, , 1, 1 ], [ , , , , , 1, , , , 1, , , , , 1, 1, , , , 1 ], [ , 1, , 1, 1, 1, , 1, , , 1, 1, 1, , , 1, , , 1, , 1, , , 1 ], [ , , 1, , , , , , , , , 1, , 1, , , , , 1, , 1 ], [ , 1, 1, , , , , , , , 1, 1, 1, , , , , , , , 1, , , , , 1 ], [ , , , , , , , , 1, , , , , 1, , , 1 ] ], [ , [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, 1, , 1, 1, , , 1, 1, 1, 1, 1, 1, 1, 1, , , , , , , , , 1, 1 ], [ , , , , , , , , 1, , , , 1, , 1, , 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , 1, , 1, , 1, , , , 1, 1, , 1, , 1, , , , 1, 1, 1, 1, 1, , , 1 ], , [ , 1, , , , , , , , 1, , , 1, 1, , , 1, , 1, 1, , 1, , 1 ], [ , 1, , , 1, , , , , , , , 1, , , , , , , 1 ], [ 1, 1, , , , , 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1 ], , [ , 1, , , , , , 1, , 1, , 1, 1, 1, 1, 1, , , 1, , 1, 1, , , , 1 ], [ , 1, 1, , , 1, , 1, , 1, , , 1, 1, 1, 1, , , 1, , , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , , , 1, , 1 ], [ , 1, , , 1, 1, , 1, 1, , , 1, 1, , 1, 1, , 1, , 1, , 1 ], [ 1, , 1, , , , , 1, , 1, , 1, 1, 1, 1, , , , , 1, 1, , , , 1, 1 ], [ , 1, 1, , , , , 1, 1, , , 1, , 1, 1, 1, 1, , , , , , , , , , 1 ], , [ , 1, 1, , , 1, , , , 1, , 1, 1, 1, 1, 1, , , , 1, , , , 1, , 1 ], [ , , , 1, 1, , , 1, , , , , 1, , 1, 1, 1, , 1, 1, , , , , , 1 ], [ , 1, , , , , , , , , , , 1, , , , 1, , , , , , , 1, , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, , 1, 1, 1, , 1, 1, , 1, 1, 1, 1 ], [ , 1, , , , , , , , , , , , , , , , , , , 1 ], [ , 1, , , , , , 1, , , , , 1, , 1, , , 1, 1, , 1, 1, , 1 ], [ , 1, , , , , , 1, , , , , 1, 1, , , , , , , , 1, , , , 1 ], [ , , , , , , , , , , , , , , , , , , 1, , , 1, , , , , 1 ], [ , , , , , , , 1, , , , 1 ] ], [ , [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , 1, , 1, , , , , , , 1, , , , , , , , 1, , , 1 ], [ , 1, , , , , , , 1 ], [ , , , , , , , , , , 1 ], [ , 1, , , , , , 1, 1, , , , , , 1 ], , [ , 1, 1, , , , , , 1, , , , , 1, 1, , , , 1 ], [ 1, , 1, , 1, , , , , 1, , , , , 1, , , , , , , , , 1, 1 ], [ , 1, 1, , , , , , , , , 1, 1, 1, 1, , , , 1, , , , , 1, , , 1 ], , [ , 1, 1, , 1, , , 1, 1, , , 1, , , 1, 1, 1, , 1, , 1, 1, 1, , , , 1 ], [ , , , , , 1, , , , , 1, , , 1, 1, , , 1, , 1, , , , 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , 1, , , 1, 1, , 1, , , , 1, , , , , , , , 1 ], [ , , , 1, , , , , 1, , , , , 1, , 1, , 1, 1, 1 ], [ , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ , , , , , 1 ], [ , 1, , , , , , 1, , , , , , , 1, 1, 1, , , 1 ], [ , 1, , , , , , , , , , 1, 1, 1, , , , , 1, , , 1 ], [ , , , , , 1, , 1, , , , , 1, 1, 1, , 1, 1, , 1, 1, 1, , , 1, 1 ], [ 1, 1, , , , , , , 1, , , , , 1, 1, , , , , , , , , , , 1 ], , [ , 1 ], [ , , , , , , , , , , , , , , , , , , , , , , , , 1 ], [ , , 1, , , , , 1, , , 1, , , , 1, , 1 ], [ , 1, , , , , , , , , 1 ] ] ];
    function isValidLang(lang) {
      var array = langs;
      while (lang.length < 3) {
        lang += '`';
      }
      for (var _i32 = 0; _i32 <= lang.length - 1; _i32++) {
        var index = lang.charCodeAt(_i32) - 96;
        array = array[index];
        if (!array) {
          return false;
        }
      }
      return true;
    }
    function _validLangs(langArray) {
      langArray = Array.isArray(langArray) ? langArray : langs;
      var codes = [];
      langArray.forEach(function(lang, index) {
        var _char3 = String.fromCharCode(index + 96).replace('`', '');
        if (Array.isArray(lang)) {
          codes = codes.concat(_validLangs(lang).map(function(newLang) {
            return _char3 + newLang;
          }));
        } else {
          codes.push(_char3);
        }
      });
      return codes;
    }
    var valid_langs_default = isValidLang;
    var SerialVirtualNode = function(_abstract_virtual_nod2) {
      function SerialVirtualNode(serialNode) {
        var _this6;
        _classCallCheck(this, SerialVirtualNode);
        _this6 = _callSuper(this, SerialVirtualNode);
        _this6._props = normaliseProps(serialNode);
        _this6._attrs = normaliseAttrs(serialNode);
        return _this6;
      }
      _inherits(SerialVirtualNode, _abstract_virtual_nod2);
      return _createClass(SerialVirtualNode, [ {
        key: 'props',
        get: function get() {
          return this._props;
        }
      }, {
        key: 'attr',
        value: function attr(attrName) {
          var _this$_attrs$attrName;
          return (_this$_attrs$attrName = this._attrs[attrName]) !== null && _this$_attrs$attrName !== void 0 ? _this$_attrs$attrName : null;
        }
      }, {
        key: 'hasAttr',
        value: function hasAttr(attrName) {
          return this._attrs[attrName] !== void 0;
        }
      }, {
        key: 'attrNames',
        get: function get() {
          return Object.keys(this._attrs);
        }
      } ]);
    }(abstract_virtual_node_default);
    var nodeNamesToTypes = {
      '#cdata-section': 2,
      '#text': 3,
      '#comment': 8,
      '#document': 9,
      '#document-fragment': 11
    };
    var nodeTypeToName = {};
    var nodeNames = Object.keys(nodeNamesToTypes);
    nodeNames.forEach(function(nodeName2) {
      nodeTypeToName[nodeNamesToTypes[nodeName2]] = nodeName2;
    });
    function normaliseProps(serialNode) {
      var _serialNode$nodeName, _ref81, _serialNode$nodeType;
      var nodeName2 = (_serialNode$nodeName = serialNode.nodeName) !== null && _serialNode$nodeName !== void 0 ? _serialNode$nodeName : nodeTypeToName[serialNode.nodeType];
      var nodeType = (_ref81 = (_serialNode$nodeType = serialNode.nodeType) !== null && _serialNode$nodeType !== void 0 ? _serialNode$nodeType : nodeNamesToTypes[serialNode.nodeName]) !== null && _ref81 !== void 0 ? _ref81 : 1;
      assert_default(typeof nodeType === 'number', 'nodeType has to be a number, got \''.concat(nodeType, '\''));
      assert_default(typeof nodeName2 === 'string', 'nodeName has to be a string, got \''.concat(nodeName2, '\''));
      nodeName2 = nodeName2.toLowerCase();
      var type2 = null;
      if (nodeName2 === 'input') {
        type2 = (serialNode.type || serialNode.attributes && serialNode.attributes.type || '').toLowerCase();
        if (!valid_input_type_default().includes(type2)) {
          type2 = 'text';
        }
      }
      var props = _extends({}, serialNode, {
        nodeType: nodeType,
        nodeName: nodeName2
      });
      if (type2) {
        props.type = type2;
      }
      delete props.attributes;
      return Object.freeze(props);
    }
    function normaliseAttrs(_ref82) {
      var _ref82$attributes = _ref82.attributes, attributes2 = _ref82$attributes === void 0 ? {} : _ref82$attributes;
      var attrMap = {
        htmlFor: 'for',
        className: 'class'
      };
      return Object.keys(attributes2).reduce(function(attrs, attrName) {
        var value = attributes2[attrName];
        assert_default(_typeof(value) !== 'object' || value === null, 'expects attributes not to be an object, \''.concat(attrName, '\' was'));
        if (value !== void 0) {
          var mappedName = attrMap[attrName] || attrName;
          attrs[mappedName] = value !== null ? String(value) : null;
        }
        return attrs;
      }, {});
    }
    var serial_virtual_node_default = SerialVirtualNode;
    function cleanup(resolve, reject) {
      resolve = resolve || function res() {};
      reject = reject || axe.log;
      if (!axe._audit) {
        throw new Error('No audit configured');
      }
      var q = axe.utils.queue();
      var cleanupErrors = [];
      Object.keys(axe.plugins).forEach(function(key) {
        q.defer(function(res) {
          var rej = function rej2(err2) {
            cleanupErrors.push(err2);
            res();
          };
          try {
            axe.plugins[key].cleanup(res, rej);
          } catch (err2) {
            rej(err2);
          }
        });
      });
      var flattenedTree = axe.utils.getFlattenedTree(document.body);
      axe.utils.querySelectorAll(flattenedTree, 'iframe, frame').forEach(function(node) {
        q.defer(function(res, rej) {
          return axe.utils.sendCommandToFrame(node.actualNode, {
            command: 'cleanup-plugin'
          }, res, rej);
        });
      });
      q.then(function(results) {
        if (cleanupErrors.length === 0) {
          resolve(results);
        } else {
          reject(cleanupErrors);
        }
      })['catch'](reject);
    }
    var cleanup_default = cleanup;
    var reporters = {};
    var defaultReporter;
    function hasReporter(reporterName) {
      return reporters.hasOwnProperty(reporterName);
    }
    function getReporter(reporter) {
      if (typeof reporter === 'string' && reporters[reporter]) {
        return reporters[reporter];
      }
      if (typeof reporter === 'function') {
        return reporter;
      }
      return defaultReporter;
    }
    function addReporter(name, cb, isDefault) {
      reporters[name] = cb;
      if (isDefault) {
        defaultReporter = cb;
      }
    }
    function configure(spec) {
      var audit = axe._audit;
      if (!audit) {
        throw new Error('No audit configured');
      }
      if (spec.axeVersion || spec.ver) {
        var specVersion = spec.axeVersion || spec.ver;
        if (!/^\d+\.\d+\.\d+(-canary)?/.test(specVersion)) {
          throw new Error('Invalid configured version '.concat(specVersion));
        }
        var _specVersion$split = specVersion.split('-'), _specVersion$split2 = _slicedToArray(_specVersion$split, 2), version = _specVersion$split2[0], canary = _specVersion$split2[1];
        var _version$split$map = version.split('.').map(Number), _version$split$map2 = _slicedToArray(_version$split$map, 3), major = _version$split$map2[0], minor = _version$split$map2[1], patch = _version$split$map2[2];
        var _axe$version$split = axe.version.split('-'), _axe$version$split2 = _slicedToArray(_axe$version$split, 2), axeVersion = _axe$version$split2[0], axeCanary = _axe$version$split2[1];
        var _axeVersion$split$map = axeVersion.split('.').map(Number), _axeVersion$split$map2 = _slicedToArray(_axeVersion$split$map, 3), axeMajor = _axeVersion$split$map2[0], axeMinor = _axeVersion$split$map2[1], axePatch = _axeVersion$split$map2[2];
        if (major !== axeMajor || axeMinor < minor || axeMinor === minor && axePatch < patch || major === axeMajor && minor === axeMinor && patch === axePatch && canary && canary !== axeCanary) {
          throw new Error('Configured version '.concat(specVersion, ' is not compatible with current axe version ').concat(axe.version));
        }
      }
      if (spec.reporter && (typeof spec.reporter === 'function' || hasReporter(spec.reporter))) {
        audit.reporter = spec.reporter;
      }
      if (spec.checks) {
        if (!Array.isArray(spec.checks)) {
          throw new TypeError('Checks property must be an array');
        }
        spec.checks.forEach(function(check) {
          if (!check.id) {
            throw new TypeError('Configured check '.concat(JSON.stringify(check), ' is invalid. Checks must be an object with at least an id property'));
          }
          audit.addCheck(check);
        });
      }
      var modifiedRules = [];
      if (spec.rules) {
        if (!Array.isArray(spec.rules)) {
          throw new TypeError('Rules property must be an array');
        }
        spec.rules.forEach(function(rule) {
          if (!rule.id) {
            throw new TypeError('Configured rule '.concat(JSON.stringify(rule), ' is invalid. Rules must be an object with at least an id property'));
          }
          modifiedRules.push(rule.id);
          audit.addRule(rule);
        });
      }
      if (spec.disableOtherRules) {
        audit.rules.forEach(function(rule) {
          if (modifiedRules.includes(rule.id) === false) {
            rule.enabled = false;
          }
        });
      }
      if (typeof spec.branding !== 'undefined') {
        audit.setBranding(spec.branding);
      } else {
        audit._constructHelpUrls();
      }
      if (spec.tagExclude) {
        audit.tagExclude = spec.tagExclude;
      }
      if (spec.locale) {
        audit.applyLocale(spec.locale);
      }
      if (spec.standards) {
        configureStandards(spec.standards);
      }
      if (spec.noHtml) {
        audit.noHtml = true;
      }
      if (spec.allowedOrigins) {
        if (!Array.isArray(spec.allowedOrigins)) {
          throw new TypeError('Allowed origins property must be an array');
        }
        if (spec.allowedOrigins.includes('*')) {
          throw new Error('"*" is not allowed. Use "'.concat(constants_default.allOrigins, '" instead'));
        }
        audit.setAllowedOrigins(spec.allowedOrigins);
      }
    }
    var configure_default = configure;
    function frameMessenger2(frameHandler) {
      _respondable.updateMessenger(frameHandler);
    }
    function getRules(tags) {
      tags = tags || [];
      var matchingRules = !tags.length ? axe._audit.rules : axe._audit.rules.filter(function(item) {
        return !!tags.filter(function(tag) {
          return item.tags.indexOf(tag) !== -1;
        }).length;
      });
      var ruleData = axe._audit.data.rules || {};
      return matchingRules.map(function(matchingRule) {
        var rd = ruleData[matchingRule.id] || {};
        return {
          ruleId: matchingRule.id,
          description: rd.description,
          help: rd.help,
          helpUrl: rd.helpUrl,
          tags: matchingRule.tags,
          actIds: matchingRule.actIds
        };
      });
    }
    var get_rules_default = getRules;
    function hiddenContentEvaluate(node, options, virtualNode) {
      var allowlist = [ 'SCRIPT', 'HEAD', 'TITLE', 'NOSCRIPT', 'STYLE', 'TEMPLATE' ];
      if (!allowlist.includes(node.nodeName.toUpperCase()) && has_content_virtual_default(virtualNode)) {
        var styles = window.getComputedStyle(node);
        if (styles.getPropertyValue('display') === 'none') {
          return void 0;
        } else if (styles.getPropertyValue('visibility') === 'hidden') {
          var parent = get_composed_parent_default(node);
          var parentStyle = parent && window.getComputedStyle(parent);
          if (!parentStyle || parentStyle.getPropertyValue('visibility') !== 'hidden') {
            return void 0;
          }
        }
      }
      return true;
    }
    var hidden_content_evaluate_default = hiddenContentEvaluate;
    var table_exports = {};
    __export(table_exports, {
      getAllCells: function getAllCells() {
        return get_all_cells_default;
      },
      getCellPosition: function getCellPosition() {
        return get_cell_position_default;
      },
      getHeaders: function getHeaders() {
        return get_headers_default;
      },
      getScope: function getScope() {
        return _getScope;
      },
      isColumnHeader: function isColumnHeader() {
        return is_column_header_default;
      },
      isDataCell: function isDataCell() {
        return is_data_cell_default;
      },
      isDataTable: function isDataTable() {
        return is_data_table_default;
      },
      isHeader: function isHeader() {
        return is_header_default;
      },
      isRowHeader: function isRowHeader() {
        return is_row_header_default;
      },
      toArray: function toArray() {
        return to_grid_default;
      },
      toGrid: function toGrid() {
        return to_grid_default;
      },
      traverse: function traverse() {
        return traverse_default;
      }
    });
    function getAllCells(tableElm) {
      var rowIndex, cellIndex, rowLength, cellLength;
      var cells = [];
      for (rowIndex = 0, rowLength = tableElm.rows.length; rowIndex < rowLength; rowIndex++) {
        for (cellIndex = 0, cellLength = tableElm.rows[rowIndex].cells.length; cellIndex < cellLength; cellIndex++) {
          cells.push(tableElm.rows[rowIndex].cells[cellIndex]);
        }
      }
      return cells;
    }
    var get_all_cells_default = getAllCells;
    function traverseForHeaders(headerType, position, tableGrid) {
      var property = headerType === 'row' ? '_rowHeaders' : '_colHeaders';
      var predicate = headerType === 'row' ? is_row_header_default : is_column_header_default;
      var startCell = tableGrid[position.y][position.x];
      var colspan = startCell.colSpan - 1;
      var rowspanAttr = startCell.getAttribute('rowspan');
      var rowspanValue = parseInt(rowspanAttr) === 0 || startCell.rowspan === 0 ? tableGrid.length : startCell.rowSpan;
      var rowspan = rowspanValue - 1;
      var rowStart = position.y + rowspan;
      var colStart = position.x + colspan;
      var rowEnd = headerType === 'row' ? position.y : 0;
      var colEnd = headerType === 'row' ? 0 : position.x;
      var headers;
      var cells = [];
      for (var row = rowStart; row >= rowEnd && !headers; row--) {
        for (var col = colStart; col >= colEnd; col--) {
          var cell = tableGrid[row] ? tableGrid[row][col] : void 0;
          if (!cell) {
            continue;
          }
          var vNode = axe.utils.getNodeFromTree(cell);
          if (vNode[property]) {
            headers = vNode[property];
            break;
          }
          cells.push(cell);
        }
      }
      headers = (headers || []).concat(cells.filter(predicate));
      cells.forEach(function(tableCell) {
        var vNode = axe.utils.getNodeFromTree(tableCell);
        vNode[property] = headers;
      });
      return headers;
    }
    function getHeaders(cell, tableGrid) {
      if (cell.getAttribute('headers')) {
        var headers = idrefs_default(cell, 'headers');
        if (headers.filter(function(header) {
          return header;
        }).length) {
          return headers;
        }
      }
      if (!tableGrid) {
        tableGrid = to_grid_default(find_up_default(cell, 'table'));
      }
      var position = get_cell_position_default(cell, tableGrid);
      var rowHeaders = traverseForHeaders('row', position, tableGrid);
      var colHeaders = traverseForHeaders('col', position, tableGrid);
      return [].concat(rowHeaders, colHeaders).reverse();
    }
    var get_headers_default = getHeaders;
    function isDataCell(cell) {
      if (!cell.children.length && !cell.textContent.trim()) {
        return false;
      }
      var role = cell.getAttribute('role');
      if (is_valid_role_default(role)) {
        return [ 'cell', 'gridcell' ].includes(role);
      } else {
        return cell.nodeName.toUpperCase() === 'TD';
      }
    }
    var is_data_cell_default = isDataCell;
    function isDataTable(node) {
      var role = (node.getAttribute('role') || '').toLowerCase();
      if ((role === 'presentation' || role === 'none') && !_isFocusable(node)) {
        return false;
      }
      if (node.getAttribute('contenteditable') === 'true' || find_up_default(node, '[contenteditable="true"]')) {
        return true;
      }
      if (role === 'grid' || role === 'treegrid' || role === 'table') {
        return true;
      }
      if (get_role_type_default(role) === 'landmark') {
        return true;
      }
      if (node.getAttribute('datatable') === '0') {
        return false;
      }
      if (n