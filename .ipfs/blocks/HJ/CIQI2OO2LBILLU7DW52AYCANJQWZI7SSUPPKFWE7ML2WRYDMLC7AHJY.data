                    // Lo       HANGUL SYLLABLE KYU
                                                if (0xd050 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd06c) {
                                                    // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
                                                    if (0xd051 <= code && code <= 0xd06b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE KEU
                                                    if (0xd06c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd088) {
                                                // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
                                                if (0xd06d <= code && code <= 0xd087) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd089) {
                                                    // Lo       HANGUL SYLLABLE KYI
                                                    if (0xd088 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
                                                    if (0xd089 <= code && code <= 0xd0a3) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0xd131) {
                                    if (code < 0xd0dd) {
                                        if (code < 0xd0c0) {
                                            if (code < 0xd0a5) {
                                                // Lo       HANGUL SYLLABLE KI
                                                if (0xd0a4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
                                                if (0xd0a5 <= code && code <= 0xd0bf) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd0c1) {
                                                // Lo       HANGUL SYLLABLE TA
                                                if (0xd0c0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd0dc) {
                                                    // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
                                                    if (0xd0c1 <= code && code <= 0xd0db) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TAE
                                                    if (0xd0dc === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd114) {
                                            if (code < 0xd0f8) {
                                                // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
                                                if (0xd0dd <= code && code <= 0xd0f7) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd0f9) {
                                                    // Lo       HANGUL SYLLABLE TYA
                                                    if (0xd0f8 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
                                                    if (0xd0f9 <= code && code <= 0xd113) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd115) {
                                                // Lo       HANGUL SYLLABLE TYAE
                                                if (0xd114 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd130) {
                                                    // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
                                                    if (0xd115 <= code && code <= 0xd12f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TEO
                                                    if (0xd130 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd184) {
                                        if (code < 0xd14d) {
                                            if (code < 0xd14c) {
                                                // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
                                                if (0xd131 <= code && code <= 0xd14b) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE TE
                                                if (0xd14c === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd168) {
                                                // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
                                                if (0xd14d <= code && code <= 0xd167) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd169) {
                                                    // Lo       HANGUL SYLLABLE TYEO
                                                    if (0xd168 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
                                                    if (0xd169 <= code && code <= 0xd183) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd1a1) {
                                            if (code < 0xd185) {
                                                // Lo       HANGUL SYLLABLE TYE
                                                if (0xd184 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd1a0) {
                                                    // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
                                                    if (0xd185 <= code && code <= 0xd19f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TO
                                                    if (0xd1a0 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd1bc) {
                                                // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
                                                if (0xd1a1 <= code && code <= 0xd1bb) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd1bd) {
                                                    // Lo       HANGUL SYLLABLE TWA
                                                    if (0xd1bc === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
                                                    if (0xd1bd <= code && code <= 0xd1d7) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (code < 0x1133b) {
                    if (code < 0xd671) {
                        if (code < 0xd424) {
                            if (code < 0xd2f1) {
                                if (code < 0xd264) {
                                    if (code < 0xd211) {
                                        if (code < 0xd1f4) {
                                            if (code < 0xd1d9) {
                                                // Lo       HANGUL SYLLABLE TWAE
                                                if (0xd1d8 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
                                                if (0xd1d9 <= code && code <= 0xd1f3) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd1f5) {
                                                // Lo       HANGUL SYLLABLE TOE
                                                if (0xd1f4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd210) {
                                                    // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
                                                    if (0xd1f5 <= code && code <= 0xd20f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TYO
                                                    if (0xd210 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd22d) {
                                            if (code < 0xd22c) {
                                                // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
                                                if (0xd211 <= code && code <= 0xd22b) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE TU
                                                if (0xd22c === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd248) {
                                                // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
                                                if (0xd22d <= code && code <= 0xd247) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd249) {
                                                    // Lo       HANGUL SYLLABLE TWEO
                                                    if (0xd248 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
                                                    if (0xd249 <= code && code <= 0xd263) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd29d) {
                                        if (code < 0xd280) {
                                            if (code < 0xd265) {
                                                // Lo       HANGUL SYLLABLE TWE
                                                if (0xd264 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
                                                if (0xd265 <= code && code <= 0xd27f) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd281) {
                                                // Lo       HANGUL SYLLABLE TWI
                                                if (0xd280 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd29c) {
                                                    // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
                                                    if (0xd281 <= code && code <= 0xd29b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TYU
                                                    if (0xd29c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd2d4) {
                                            if (code < 0xd2b8) {
                                                // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
                                                if (0xd29d <= code && code <= 0xd2b7) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd2b9) {
                                                    // Lo       HANGUL SYLLABLE TEU
                                                    if (0xd2b8 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
                                                    if (0xd2b9 <= code && code <= 0xd2d3) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd2d5) {
                                                // Lo       HANGUL SYLLABLE TYI
                                                if (0xd2d4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd2f0) {
                                                    // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
                                                    if (0xd2d5 <= code && code <= 0xd2ef) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE TI
                                                    if (0xd2f0 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0xd37d) {
                                    if (code < 0xd344) {
                                        if (code < 0xd30d) {
                                            if (code < 0xd30c) {
                                                // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
                                                if (0xd2f1 <= code && code <= 0xd30b) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE PA
                                                if (0xd30c === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd328) {
                                                // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
                                                if (0xd30d <= code && code <= 0xd327) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd329) {
                                                    // Lo       HANGUL SYLLABLE PAE
                                                    if (0xd328 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
                                                    if (0xd329 <= code && code <= 0xd343) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd360) {
                                            if (code < 0xd345) {
                                                // Lo       HANGUL SYLLABLE PYA
                                                if (0xd344 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
                                                if (0xd345 <= code && code <= 0xd35f) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd361) {
                                                // Lo       HANGUL SYLLABLE PYAE
                                                if (0xd360 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd37c) {
                                                    // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
                                                    if (0xd361 <= code && code <= 0xd37b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE PEO
                                                    if (0xd37c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd3d0) {
                                        if (code < 0xd399) {
                                            if (code < 0xd398) {
                                                // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
                                                if (0xd37d <= code && code <= 0xd397) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE PE
                                                if (0xd398 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd3b4) {
                                                // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
                                                if (0xd399 <= code && code <= 0xd3b3) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd3b5) {
                                                    // Lo       HANGUL SYLLABLE PYEO
                                                    if (0xd3b4 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
                                                    if (0xd3b5 <= code && code <= 0xd3cf) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd3ed) {
                                            if (code < 0xd3d1) {
                                                // Lo       HANGUL SYLLABLE PYE
                                                if (0xd3d0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd3ec) {
                                                    // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
                                                    if (0xd3d1 <= code && code <= 0xd3eb) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE PO
                                                    if (0xd3ec === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd408) {
                                                // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
                                                if (0xd3ed <= code && code <= 0xd407) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd409) {
                                                    // Lo       HANGUL SYLLABLE PWA
                                                    if (0xd408 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
                                                    if (0xd409 <= code && code <= 0xd423) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (code < 0xd53d) {
                                if (code < 0xd4b0) {
                                    if (code < 0xd45d) {
                                        if (code < 0xd440) {
                                            if (code < 0xd425) {
                                                // Lo       HANGUL SYLLABLE PWAE
                                                if (0xd424 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
                                                if (0xd425 <= code && code <= 0xd43f) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd441) {
                                                // Lo       HANGUL SYLLABLE POE
                                                if (0xd440 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd45c) {
                                                    // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
                                                    if (0xd441 <= code && code <= 0xd45b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE PYO
                                                    if (0xd45c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd479) {
                                            if (code < 0xd478) {
                                                // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
                                                if (0xd45d <= code && code <= 0xd477) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE PU
                                                if (0xd478 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd494) {
                                                // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
                                                if (0xd479 <= code && code <= 0xd493) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd495) {
                                                    // Lo       HANGUL SYLLABLE PWEO
                                                    if (0xd494 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
                                                    if (0xd495 <= code && code <= 0xd4af) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd4e9) {
                                        if (code < 0xd4cc) {
                                            if (code < 0xd4b1) {
                                                // Lo       HANGUL SYLLABLE PWE
                                                if (0xd4b0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
                                                if (0xd4b1 <= code && code <= 0xd4cb) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd4cd) {
                                                // Lo       HANGUL SYLLABLE PWI
                                                if (0xd4cc === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd4e8) {
                                                    // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
                                                    if (0xd4cd <= code && code <= 0xd4e7) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE PYU
                                                    if (0xd4e8 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd520) {
                                            if (code < 0xd504) {
                                                // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
                                                if (0xd4e9 <= code && code <= 0xd503) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd505) {
                                                    // Lo       HANGUL SYLLABLE PEU
                                                    if (0xd504 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
                                                    if (0xd505 <= code && code <= 0xd51f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd521) {
                                                // Lo       HANGUL SYLLABLE PYI
                                                if (0xd520 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd53c) {
                                                    // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
                                                    if (0xd521 <= code && code <= 0xd53b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE PI
                                                    if (0xd53c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0xd5e4) {
                                    if (code < 0xd590) {
                                        if (code < 0xd559) {
                                            if (code < 0xd558) {
                                                // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
                                                if (0xd53d <= code && code <= 0xd557) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE HA
                                                if (0xd558 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd574) {
                                                // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
                                                if (0xd559 <= code && code <= 0xd573) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd575) {
                                                    // Lo       HANGUL SYLLABLE HAE
                                                    if (0xd574 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
                                                    if (0xd575 <= code && code <= 0xd58f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd5ad) {
                                            if (code < 0xd591) {
                                                // Lo       HANGUL SYLLABLE HYA
                                                if (0xd590 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd5ac) {
                                                    // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
                                                    if (0xd591 <= code && code <= 0xd5ab) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE HYAE
                                                    if (0xd5ac === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd5c8) {
                                                // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
                                                if (0xd5ad <= code && code <= 0xd5c7) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd5c9) {
                                                    // Lo       HANGUL SYLLABLE HEO
                                                    if (0xd5c8 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
                                                    if (0xd5c9 <= code && code <= 0xd5e3) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd61d) {
                                        if (code < 0xd600) {
                                            if (code < 0xd5e5) {
                                                // Lo       HANGUL SYLLABLE HE
                                                if (0xd5e4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
                                                if (0xd5e5 <= code && code <= 0xd5ff) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd601) {
                                                // Lo       HANGUL SYLLABLE HYEO
                                                if (0xd600 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd61c) {
                                                    // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
                                                    if (0xd601 <= code && code <= 0xd61b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE HYE
                                                    if (0xd61c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd654) {
                                            if (code < 0xd638) {
                                                // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
                                                if (0xd61d <= code && code <= 0xd637) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd639) {
                                                    // Lo       HANGUL SYLLABLE HO
                                                    if (0xd638 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
                                                    if (0xd639 <= code && code <= 0xd653) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd655) {
                                                // Lo       HANGUL SYLLABLE HWA
                                                if (0xd654 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd670) {
                                                    // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
                                                    if (0xd655 <= code && code <= 0xd66f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE HWAE
                                                    if (0xd670 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x11000) {
                            if (code < 0xd7b0) {
                                if (code < 0xd6fd) {
                                    if (code < 0xd6c4) {
                                        if (code < 0xd68d) {
                                            if (code < 0xd68c) {
                                                // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
                                                if (0xd671 <= code && code <= 0xd68b) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE HOE
                                                if (0xd68c === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd6a8) {
                                                // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
                                                if (0xd68d <= code && code <= 0xd6a7) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd6a9) {
                                                    // Lo       HANGUL SYLLABLE HYO
                                                    if (0xd6a8 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
                                                    if (0xd6a9 <= code && code <= 0xd6c3) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd6e0) {
                                            if (code < 0xd6c5) {
                                                // Lo       HANGUL SYLLABLE HU
                                                if (0xd6c4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
                                                if (0xd6c5 <= code && code <= 0xd6df) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd6e1) {
                                                // Lo       HANGUL SYLLABLE HWEO
                                                if (0xd6e0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd6fc) {
                                                    // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
                                                    if (0xd6e1 <= code && code <= 0xd6fb) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE HWE
                                                    if (0xd6fc === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0xd750) {
                                        if (code < 0xd719) {
                                            if (code < 0xd718) {
                                                // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
                                                if (0xd6fd <= code && code <= 0xd717) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                // Lo       HANGUL SYLLABLE HWI
                                                if (0xd718 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd734) {
                                                // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
                                                if (0xd719 <= code && code <= 0xd733) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd735) {
                                                    // Lo       HANGUL SYLLABLE HYU
                                                    if (0xd734 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
                                                    if (0xd735 <= code && code <= 0xd74f) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xd76d) {
                                            if (code < 0xd751) {
                                                // Lo       HANGUL SYLLABLE HEU
                                                if (0xd750 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.LV;
                                                }
                                            }
                                            else {
                                                if (code < 0xd76c) {
                                                    // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
                                                    if (0xd751 <= code && code <= 0xd76b) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                                else {
                                                    // Lo       HANGUL SYLLABLE HYI
                                                    if (0xd76c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xd788) {
                                                // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
                                                if (0xd76d <= code && code <= 0xd787) {
                                                    return boundaries_1.CLUSTER_BREAK.LVT;
                                                }
                                            }
                                            else {
                                                if (code < 0xd789) {
                                                    // Lo       HANGUL SYLLABLE HI
                                                    if (0xd788 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.LV;
                                                    }
                                                }
                                                else {
                                                    // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
                                                    if (0xd789 <= code && code <= 0xd7a3) {
                                                        return boundaries_1.CLUSTER_BREAK.LVT;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x10a01) {
                                    if (code < 0xfeff) {
                                        if (code < 0xfb1e) {
                                            if (code < 0xd7cb) {
                                                // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
                                                if (0xd7b0 <= code && code <= 0xd7c6) {
                                                    return boundaries_1.CLUSTER_BREAK.V;
                                                }
                                            }
                                            else {
                                                // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
                                                if (0xd7cb <= code && code <= 0xd7fb) {
                                                    return boundaries_1.CLUSTER_BREAK.T;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xfe00) {
                                                // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
                                                if (0xfb1e === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0xfe20) {
                                                    // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
                                                    if (0xfe00 <= code && code <= 0xfe0f) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
                                                    if (0xfe20 <= code && code <= 0xfe2f) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x101fd) {
                                            if (code < 0xff9e) {
                                                // Cf       ZERO WIDTH NO-BREAK SPACE
                                                if (0xfeff === code) {
                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                }
                                            }
                                            else {
                                                if (code < 0xfff0) {
                                                    // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
                                                    if (0xff9e <= code && code <= 0xff9f) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
                                                    // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
                                                    if (0xfff0 <= code && code <= 0xfffb) {
                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x102e0) {
                                                // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
                                                if (0x101fd === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x10376) {
                                                    // Mn       COPTIC EPACT THOUSANDS MARK
                                                    if (0x102e0 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
                                                    if (0x10376 <= code && code <= 0x1037a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x10ae5) {
                                        if (code < 0x10a0c) {
                                            if (code < 0x10a05) {
                                                // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
                                                if (0x10a01 <= code && code <= 0x10a03) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
                                                if (0x10a05 <= code && code <= 0x10a06) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x10a38) {
                                                // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
                                                if (0x10a0c <= code && code <= 0x10a0f) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x10a3f) {
                                                    // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
                                                    if (0x10a38 <= code && code <= 0x10a3a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       KHAROSHTHI VIRAMA
                                                    if (0x10a3f === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x10efd) {
                                            if (code < 0x10d24) {
                                                // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
                                                if (0x10ae5 <= code && code <= 0x10ae6) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x10eab) {
                                                    // Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI
                                                    if (0x10d24 <= code && code <= 0x10d27) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK
                                                    if (0x10eab <= code && code <= 0x10eac) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x10f46) {
                                                // Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA
                                                if (0x10efd <= code && code <= 0x10eff) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x10f82) {
                                                    // Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW
                                                    if (0x10f46 <= code && code <= 0x10f50) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW
                                                    if (0x10f82 <= code && code <= 0x10f85) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (code < 0x11180) {
                                if (code < 0x110b7) {
                                    if (code < 0x11073) {
                                        if (code < 0x11002) {
                                            // Mc       BRAHMI SIGN CANDRABINDU
                                            if (0x11000 === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                            // Mn       BRAHMI SIGN ANUSVARA
                                            if (0x11001 === code) {
                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                        else {
                                            if (code < 0x11038) {
                                                // Mc       BRAHMI SIGN VISARGA
                                                if (0x11002 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x11070) {
                                                    // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
                                                    if (0x11038 <= code && code <= 0x11046) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       BRAHMI SIGN OLD TAMIL VIRAMA
                                                    if (0x11070 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11082) {
                                            if (code < 0x1107f) {
                                                // Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O
                                                if (0x11073 <= code && code <= 0x11074) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
                                                if (0x1107f <= code && code <= 0x11081) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x110b0) {
                                                // Mc       KAITHI SIGN VISARGA
                                                if (0x11082 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x110b3) {
                                                    // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
                                                    if (0x110b0 <= code && code <= 0x110b2) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
                                                    if (0x110b3 <= code && code <= 0x110b6) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11100) {
                                        if (code < 0x110bd) {
                                            if (code < 0x110b9) {
                                                // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
                                                if (0x110b7 <= code && code <= 0x110b8) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
                                                if (0x110b9 <= code && code <= 0x110ba) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x110c2) {
                                                // Cf       KAITHI NUMBER SIGN
                                                if (0x110bd === code) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                            else {
                                                // Mn       KAITHI VOWEL SIGN VOCALIC R
                                                if (0x110c2 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                                // Cf       KAITHI NUMBER SIGN ABOVE
                                                if (0x110cd === code) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1112d) {
                                            if (code < 0x11127) {
                                                // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
                                                if (0x11100 <= code && code <= 0x11102) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1112c) {
                                                    // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
                                                    if (0x11127 <= code && code <= 0x1112b) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc       CHAKMA VOWEL SIGN E
                                                    if (0x1112c === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11145) {
                                                // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
                                                if (0x1112d <= code && code <= 0x11134) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11173) {
                                                    // Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI
                                                    if (0x11145 <= code && code <= 0x11146) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn       MAHAJANI SIGN NUKTA
                                                    if (0x11173 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x11232) {
                                    if (code < 0x111c2) {
                                        if (code < 0x111b3) {
                                            if (code < 0x11182) {
                                                // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
                                                if (0x11180 <= code && code <= 0x11181) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       SHARADA SIGN VISARGA
                                                if (0x11182 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x111b6) {
                                                // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
                                                if (0x111b3 <= code && code <= 0x111b5) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x111bf) {
                                                    // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
                                                    if (0x111b6 <= code && code <= 0x111be) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
                                                    if (0x111bf <= code && code <= 0x111c0) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x111cf) {
                                            if (code < 0x111c9) {
                                                // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
                                                if (0x111c2 <= code && code <= 0x111c3) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x111ce) {
                                                    // Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK
                                                    if (0x111c9 <= code && code <= 0x111cc) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E
                                                    if (0x111ce === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1122c) {
                                                // Mn       SHARADA SIGN INVERTED CANDRABINDU
                                                if (0x111cf === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1122f) {
                                                    // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
                                                    if (0x1122c <= code && code <= 0x1122e) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
                                                    if (0x1122f <= code && code <= 0x11231) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11241) {
                                        if (code < 0x11235) {
                                            if (code < 0x11234) {
                                                // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
                                                if (0x11232 <= code && code <= 0x11233) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn       KHOJKI SIGN ANUSVARA
                                                if (0x11234 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11236) {
                                                // Mc       KHOJKI SIGN VIRAMA
                                                if (0x11235 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x1123e) {
                                                    // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
                                                    if (0x11236 <= code && code <= 0x11237) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       KHOJKI SIGN SUKUN
                                                    if (0x1123e === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x112e3) {
                                            if (code < 0x112df) {
                                                // Mn       KHOJKI VOWEL SIGN VOCALIC R
                                                if (0x11241 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x112e0) {
                                                    // Mn       KHUDAWADI SIGN ANUSVARA
                                                    if (0x112df === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
                                                    if (0x112e0 <= code && code <= 0x112e2) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11300) {
                                                // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
                                                if (0x112e3 <= code && code <= 0x112ea) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11302) {
                                                    // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
                                                    if (0x11300 <= code && code <= 0x11301) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
                                                    if (0x11302 <= code && code <= 0x11303) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (code < 0x11a97) {
                        if (code < 0x116ab) {
                            if (code < 0x114b9) {
                                if (code < 0x11370) {
                                    if (code < 0x11347) {
                                        if (code < 0x1133f) {
                                            if (code < 0x1133e) {
                                                // Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA
                                                if (0x1133b <= code && code <= 0x1133c) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       GRANTHA VOWEL SIGN AA
                                                if (0x1133e === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11340) {
                                                // Mc       GRANTHA VOWEL SIGN I
                                                if (0x1133f === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x11341) {
                                                    // Mn       GRANTHA VOWEL SIGN II
                                                    if (0x11340 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
                                                    if (0x11341 <= code && code <= 0x11344) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11357) {
                                            if (code < 0x1134b) {
                                                // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
                                                if (0x11347 <= code && code <= 0x11348) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
                                                if (0x1134b <= code && code <= 0x1134d) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11362) {
                                                // Mc       GRANTHA AU LENGTH MARK
                                                if (0x11357 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11366) {
                                                    // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
                                                    if (0x11362 <= code && code <= 0x11363) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
                                                    if (0x11366 <= code && code <= 0x1136c) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11445) {
                                        if (code < 0x11438) {
                                            if (code < 0x11435) {
                                                // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
                                                if (0x11370 <= code && code <= 0x11374) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
                                                if (0x11435 <= code && code <= 0x11437) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11440) {
                                                // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
                                                if (0x11438 <= code && code <= 0x1143f) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11442) {
                                                    // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
                                                    if (0x11440 <= code && code <= 0x11441) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
                                                    if (0x11442 <= code && code <= 0x11444) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x114b0) {
                                            if (code < 0x11446) {
                                                // Mc       NEWA SIGN VISARGA
                                                if (0x11445 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn       NEWA SIGN NUKTA
                                                if (0x11446 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                                // Mn       NEWA SANDHI MARK
                                                if (0x1145e === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x114b1) {
                                                // Mc       TIRHUTA VOWEL SIGN AA
                                                if (0x114b0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x114b3) {
                                                    // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
                                                    if (0x114b1 <= code && code <= 0x114b2) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
                                                    if (0x114b3 <= code && code <= 0x114b8) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x115b8) {
                                    if (code < 0x114bf) {
                                        if (code < 0x114bb) {
                                            // Mc       TIRHUTA VOWEL SIGN E
                                            if (0x114b9 === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                            // Mn       TIRHUTA VOWEL SIGN SHORT E
                                            if (0x114ba === code) {
                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                        else {
                                            if (code < 0x114bd) {
                                                // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
                                                if (0x114bb <= code && code <= 0x114bc) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mc       TIRHUTA VOWEL SIGN SHORT O
                                                if (0x114bd === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                                // Mc       TIRHUTA VOWEL SIGN AU
                                                if (0x114be === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x115af) {
                                            if (code < 0x114c1) {
                                                // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
                                                if (0x114bf <= code && code <= 0x114c0) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x114c2) {
                                                    // Mc       TIRHUTA SIGN VISARGA
                                                    if (0x114c1 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
                                                    if (0x114c2 <= code && code <= 0x114c3) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x115b0) {
                                                // Mc       SIDDHAM VOWEL SIGN AA
                                                if (0x115af === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x115b2) {
                                                    // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
                                                    if (0x115b0 <= code && code <= 0x115b1) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
                                                    if (0x115b2 <= code && code <= 0x115b5) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11630) {
                                        if (code < 0x115be) {
                                            if (code < 0x115bc) {
                                                // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
                                                if (0x115b8 <= code && code <= 0x115bb) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
                                                if (0x115bc <= code && code <= 0x115bd) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x115bf) {
                                                // Mc       SIDDHAM SIGN VISARGA
                                                if (0x115be === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x115dc) {
                                                    // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
                                                    if (0x115bf <= code && code <= 0x115c0) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
                                                    if (0x115dc <= code && code <= 0x115dd) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1163d) {
                                            if (code < 0x11633) {
                                                // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
                                                if (0x11630 <= code && code <= 0x11632) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x1163b) {
                                                    // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
                                                    if (0x11633 <= code && code <= 0x1163a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
                                                    if (0x1163b <= code && code <= 0x1163c) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1163e) {
                                                // Mn       MODI SIGN ANUSVARA
                                                if (0x1163d === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1163f) {
                                                    // Mc       MODI SIGN VISARGA
                                                    if (0x1163e === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
                                                    if (0x1163f <= code && code <= 0x11640) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (code < 0x1193f) {
                                if (code < 0x11727) {
                                    if (code < 0x116b6) {
                                        if (code < 0x116ad) {
                                            // Mn       TAKRI SIGN ANUSVARA
                                            if (0x116ab === code) {
                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                            // Mc       TAKRI SIGN VISARGA
                                            if (0x116ac === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                        else {
                                            if (code < 0x116ae) {
                                                // Mn       TAKRI VOWEL SIGN AA
                                                if (0x116ad === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x116b0) {
                                                    // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
                                                    if (0x116ae <= code && code <= 0x116af) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
                                                    if (0x116b0 <= code && code <= 0x116b5) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1171d) {
                                            // Mc       TAKRI SIGN VIRAMA
                                            if (0x116b6 === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                            // Mn       TAKRI SIGN NUKTA
                                            if (0x116b7 === code) {
                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                        else {
                                            if (code < 0x11722) {
                                                // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
                                                if (0x1171d <= code && code <= 0x1171f) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11726) {
                                                    // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
                                                    if (0x11722 <= code && code <= 0x11725) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc       AHOM VOWEL SIGN E
                                                    if (0x11726 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11930) {
                                        if (code < 0x1182f) {
                                            if (code < 0x1182c) {
                                                // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
                                                if (0x11727 <= code && code <= 0x1172b) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II
                                                if (0x1182c <= code && code <= 0x1182e) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11838) {
                                                // Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA
                                                if (0x1182f <= code && code <= 0x11837) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11839) {
                                                    // Mc       DOGRA SIGN VISARGA
                                                    if (0x11838 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA
                                                    if (0x11839 <= code && code <= 0x1183a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1193b) {
                                            if (code < 0x11931) {
                                                // Mc       DIVES AKURU VOWEL SIGN AA
                                                if (0x11930 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11937) {
                                                    // Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E
                                                    if (0x11931 <= code && code <= 0x11935) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O
                                                    if (0x11937 <= code && code <= 0x11938) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1193d) {
                                                // Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU
                                                if (0x1193b <= code && code <= 0x1193c) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       DIVES AKURU SIGN HALANTA
                                                if (0x1193d === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                                // Mn       DIVES AKURU VIRAMA
                                                if (0x1193e === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x11a01) {
                                    if (code < 0x119d1) {
                                        if (code < 0x11941) {
                                            // Lo       DIVES AKURU PREFIXED NASAL SIGN
                                            if (0x1193f === code) {
                                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                                            }
                                            // Mc       DIVES AKURU MEDIAL YA
                                            if (0x11940 === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                        else {
                                            if (code < 0x11942) {
                                                // Lo       DIVES AKURU INITIAL RA
                                                if (0x11941 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                            else {
                                                // Mc       DIVES AKURU MEDIAL RA
                                                if (0x11942 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                                // Mn       DIVES AKURU SIGN NUKTA
                                                if (0x11943 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x119dc) {
                                            if (code < 0x119d4) {
                                                // Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II
                                                if (0x119d1 <= code && code <= 0x119d3) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x119da) {
                                                    // Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR
                                                    if (0x119d4 <= code && code <= 0x119d7) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI
                                                    if (0x119da <= code && code <= 0x119db) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x119e0) {
                                                // Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA
                                                if (0x119dc <= code && code <= 0x119df) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn       NANDINAGARI SIGN VIRAMA
                                                if (0x119e0 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                                // Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
                                                if (0x119e4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11a47) {
                                        if (code < 0x11a39) {
                                            if (code < 0x11a33) {
                                                // Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK
                                                if (0x11a01 <= code && code <= 0x11a0a) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
                                                if (0x11a33 <= code && code <= 0x11a38) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11a3a) {
                                                // Mc       ZANABAZAR SQUARE SIGN VISARGA
                                                if (0x11a39 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x11a3b) {
                                                    // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
                                                    if (0x11a3a === code) {
                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
                                                    if (0x11a3b <= code && code <= 0x11a3e) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11a59) {
                                            if (code < 0x11a51) {
                                                // Mn       ZANABAZAR SQUARE SUBJOINER
                                                if (0x11a47 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11a57) {
                                                    // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
                                                    if (0x11a51 <= code && code <= 0x11a56) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
                                                    if (0x11a57 <= code && code <= 0x11a58) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11a84) {
                                                // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
                                                if (0x11a59 <= code && code <= 0x11a5b) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11a8a) {
                                                    // Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA
                                                    if (0x11a84 <= code && code <= 0x11a89) {
                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                    }
                                                }
                                                else {
                                                    // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
                                                    if (0x11a8a <= code && code <= 0x11a96) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x16f51) {
                            if (code < 0x11d90) {
                                if (code < 0x11cb1) {
                                    if (code < 0x11c3e) {
                                        if (code < 0x11c2f) {
                                            if (code < 0x11a98) {
                                                // Mc       SOYOMBO SIGN VISARGA
                                                if (0x11a97 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
                                                if (0x11a98 <= code && code <= 0x11a99) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11c30) {
                                                // Mc       BHAIKSUKI VOWEL SIGN AA
                                                if (0x11c2f === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x11c38) {
                                                    // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
                                                    if (0x11c30 <= code && code <= 0x11c36) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
                                                    if (0x11c38 <= code && code <= 0x11c3d) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11c92) {
                                            // Mc       BHAIKSUKI SIGN VISARGA
                                            if (0x11c3e === code) {
                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                            // Mn       BHAIKSUKI SIGN VIRAMA
                                            if (0x11c3f === code) {
                                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                        else {
                                            if (code < 0x11ca9) {
                                                // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
                                                if (0x11c92 <= code && code <= 0x11ca7) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11caa) {
                                                    // Mc       MARCHEN SUBJOINED LETTER YA
                                                    if (0x11ca9 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
                                                    if (0x11caa <= code && code <= 0x11cb0) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x11d3a) {
                                        if (code < 0x11cb4) {
                                            if (code < 0x11cb2) {
                                                // Mc       MARCHEN VOWEL SIGN I
                                                if (0x11cb1 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
                                                if (0x11cb2 <= code && code <= 0x11cb3) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11cb5) {
                                                // Mc       MARCHEN VOWEL SIGN O
                                                if (0x11cb4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                if (code < 0x11d31) {
                                                    // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
                                                    if (0x11cb5 <= code && code <= 0x11cb6) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
                                                    if (0x11d31 <= code && code <= 0x11d36) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11d46) {
                                            if (code < 0x11d3c) {
                                                // Mn       MASARAM GONDI VOWEL SIGN E
                                                if (0x11d3a === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11d3f) {
                                                    // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
                                                    if (0x11d3c <= code && code <= 0x11d3d) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
                                                    if (0x11d3f <= code && code <= 0x11d45) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11d47) {
                                                // Lo       MASARAM GONDI REPHA
                                                if (0x11d46 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11d8a) {
                                                    // Mn       MASARAM GONDI RA-KARA
                                                    if (0x11d47 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU
                                                    if (0x11d8a <= code && code <= 0x11d8e) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x11f36) {
                                    if (code < 0x11ef3) {
                                        if (code < 0x11d95) {
                                            if (code < 0x11d93) {
                                                // Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI
                                                if (0x11d90 <= code && code <= 0x11d91) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU
                                                if (0x11d93 <= code && code <= 0x11d94) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11d96) {
                                                // Mn       GUNJALA GONDI SIGN ANUSVARA
                                                if (0x11d95 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       GUNJALA GONDI SIGN VISARGA
                                                if (0x11d96 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                                // Mn       GUNJALA GONDI VIRAMA
                                                if (0x11d97 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x11f02) {
                                            if (code < 0x11ef5) {
                                                // Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U
                                                if (0x11ef3 <= code && code <= 0x11ef4) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11f00) {
                                                    // Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O
                                                    if (0x11ef5 <= code && code <= 0x11ef6) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA
                                                    if (0x11f00 <= code && code <= 0x11f01) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11f03) {
                                                // Lo       KAWI SIGN REPHA
                                                if (0x11f02 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x11f34) {
                                                    // Mc       KAWI SIGN VISARGA
                                                    if (0x11f03 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA
                                                    if (0x11f34 <= code && code <= 0x11f35) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x13430) {
                                        if (code < 0x11f40) {
                                            if (code < 0x11f3e) {
                                                // Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R
                                                if (0x11f36 <= code && code <= 0x11f3a) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI
                                                if (0x11f3e <= code && code <= 0x11f3f) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x11f41) {
                                                // Mn       KAWI VOWEL SIGN EU
                                                if (0x11f40 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       KAWI SIGN KILLER
                                                if (0x11f41 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                                // Mn       KAWI CONJOINER
                                                if (0x11f42 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x16af0) {
                                            if (code < 0x13440) {
                                                // Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE
                                                if (0x13430 <= code && code <= 0x1343f) {
                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                }
                                            }
                                            else {
                                                if (code < 0x13447) {
                                                    // Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY
                                                    if (0x13440 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED
                                                    if (0x13447 <= code && code <= 0x13455) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x16b30) {
                                                // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
                                                if (0x16af0 <= code && code <= 0x16af4) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x16f4f) {
                                                    // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
                                                    if (0x16b30 <= code && code <= 0x16b36) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       MIAO SIGN CONSONANT MODIFIER BAR
                                                    if (0x16f4f === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (code < 0x1da84) {
                                if (code < 0x1d167) {
                                    if (code < 0x1bca0) {
                                        if (code < 0x16fe4) {
                                            if (code < 0x16f8f) {
                                                // Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI
                                                if (0x16f51 <= code && code <= 0x16f87) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                            else {
                                                // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
                                                if (0x16f8f <= code && code <= 0x16f92) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x16ff0) {
                                                // Mn       KHITAN SMALL SCRIPT FILLER
                                                if (0x16fe4 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1bc9d) {
                                                    // Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
                                                    if (0x16ff0 <= code && code <= 0x16ff1) {
                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                    }
                                                }
                                                else {
                                                    // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
                                                    if (0x1bc9d <= code && code <= 0x1bc9e) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1cf30) {
                                            if (code < 0x1cf00) {
                                                // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
                                                if (0x1bca0 <= code && code <= 0x1bca3) {
                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                }
                                            }
                                            else {
                                                // Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT
                                                if (0x1cf00 <= code && code <= 0x1cf2d) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1d165) {
                                                // Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG
                                                if (0x1cf30 <= code && code <= 0x1cf46) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       MUSICAL SYMBOL COMBINING STEM
                                                if (0x1d165 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                                // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
                                                if (0x1d166 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x1d185) {
                                        if (code < 0x1d16e) {
                                            if (code < 0x1d16d) {
                                                // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
                                                if (0x1d167 <= code && code <= 0x1d169) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
                                                if (0x1d16d === code) {
                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1d173) {
                                                // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
                                                if (0x1d16e <= code && code <= 0x1d172) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1d17b) {
                                                    // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
                                                    if (0x1d173 <= code && code <= 0x1d17a) {
                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    }
                                                }
                                                else {
                                                    // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
                                                    if (0x1d17b <= code && code <= 0x1d182) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1da00) {
                                            if (code < 0x1d1aa) {
                                                // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
                                                if (0x1d185 <= code && code <= 0x1d18b) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1d242) {
                                                    // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
                                                    if (0x1d1aa <= code && code <= 0x1d1ad) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
                                                    if (0x1d242 <= code && code <= 0x1d244) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1da3b) {
                                                // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
                                                if (0x1da00 <= code && code <= 0x1da36) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1da75) {
                                                    // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
                                                    if (0x1da3b <= code && code <= 0x1da6c) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
                                                    if (0x1da75 === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (code < 0x1e2ec) {
                                    if (code < 0x1e01b) {
                                        if (code < 0x1daa1) {
                                            if (code < 0x1da9b) {
                                                // Mn       SIGNWRITING LOCATION HEAD NECK
                                                if (0x1da84 === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
                                                if (0x1da9b <= code && code <= 0x1da9f) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1e000) {
                                                // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
                                                if (0x1daa1 <= code && code <= 0x1daaf) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1e008) {
                                                    // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
                                                    if (0x1e000 <= code && code <= 0x1e006) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
                                                    if (0x1e008 <= code && code <= 0x1e018) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0x1e08f) {
                                            if (code < 0x1e023) {
                                                // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
                                                if (0x1e01b <= code && code <= 0x1e021) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1e026) {
                                                    // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
                                                    if (0x1e023 <= code && code <= 0x1e024) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
                                                    if (0x1e026 <= code && code <= 0x1e02a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1e130) {
                                                // Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
                                                if (0x1e08f === code) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1e2ae) {
                                                    // Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D
                                                    if (0x1e130 <= code && code <= 0x1e136) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Mn       TOTO SIGN RISING TONE
                                                    if (0x1e2ae === code) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (code < 0x1f3fb) {
                                        if (code < 0x1e8d0) {
                                            if (code < 0x1e4ec) {
                                                // Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI
                                                if (0x1e2ec <= code && code <= 0x1e2ef) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                // Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH
                                                if (0x1e4ec <= code && code <= 0x1e4ef) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0x1e944) {
                                                // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
                                                if (0x1e8d0 <= code && code <= 0x1e8d6) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0x1f1e6) {
                                                    // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
                                                    if (0x1e944 <= code && code <= 0x1e94a) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
                                                    if (0x1f1e6 <= code && code <= 0x1f1ff) {
                                                        return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (code < 0xe0080) {
                                            if (code < 0xe0000) {
                                                // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
                                                if (0x1f3fb <= code && code <= 0x1f3ff) {
                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                }
                                            }
                                            else {
                                                if (code < 0xe0020) {
                                                    // Cn       <reserved-E0000>
                                                    // Cf       LANGUAGE TAG
                                                    // Cn  [30] <reserved-E0002>..<reserved-E001F>
                                                    if (0xe0000 <= code && code <= 0xe001f) {
                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    }
                                                }
                                                else {
                                                    // Cf  [96] TAG SPACE..CANCEL TAG
                                                    if (0xe0020 <= code && code <= 0xe007f) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (code < 0xe0100) {
                                                // Cn [128] <reserved-E0080>..<reserved-E00FF>
                                                if (0xe0080 <= code && code <= 0xe00ff) {
                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                }
                                            }
                                            else {
                                                if (code < 0xe01f0) {
                                                    // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
                                                    if (0xe0100 <= code && code <= 0xe01ef) {
                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;
                                                    }
                                                }
                                                else {
                                                    // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
                                                    if (0xe01f0 <= code && code <= 0xe0fff) {
                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // unlisted code points are treated as a break property of "Other"
        return boundaries_1.CLUSTER_BREAK.OTHER;
    }
    /**
     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
     * @param code {number} Unicode code point
     * @returns {number}
     */
    static getEmojiProperty(code) {
        // emoji property taken from:
        // https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt
        // and generated by
        // node ./scripts/generate-emoji-extended-pictographic.js
        if (code < 0x27b0) {
            if (code < 0x2600) {
                if (code < 0x2328) {
                    if (code < 0x2122) {
                        if (code < 0x203c) {
                            // E0.6   [1] (©️)       copyright
                            if (0xa9 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.6   [1] (®️)       registered
                            if (0xae === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            // E0.6   [1] (‼️)       double exclamation mark
                            if (0x203c === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.6   [1] (⁉️)       exclamation question mark
                            if (0x2049 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    }
                    else {
                        if (code < 0x2194) {
                            // E0.6   [1] (™️)       trade mark
                            if (0x2122 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.6   [1] (ℹ️)       information
                            if (0x2139 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            if (code < 0x21a9) {
                                // E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow
                                if (0x2194 <= code && code <= 0x2199) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x231a) {
                                    // E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right
                                    if (0x21a9 <= code && code <= 0x21aa) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.6   [2] (⌚..⌛)    watch..hourglass done
                                    if (0x231a <= code && code <= 0x231b) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (code < 0x24c2) {
                        if (code < 0x23cf) {
                            // E1.0   [1] (⌨️)       keyboard
                            if (0x2328 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.0   [1] (⎈)       HELM SYMBOL
                            if (0x2388 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            if (code < 0x23e9) {
                                // E1.0   [1] (⏏️)       eject button
                                if (0x23cf === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x23f8) {
                                    // E0.6   [4] (⏩..⏬)    fast-forward button..fast down button
                                    // E0.7   [2] (⏭️..⏮️)    next track button..last track button
                                    // E1.0   [1] (⏯️)       play or pause button
                                    // E0.6   [1] (⏰)       alarm clock
                                    // E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock
                                    // E0.6   [1] (⏳)       hourglass not done
                                    if (0x23e9 <= code && code <= 0x23f3) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.7   [3] (⏸️..⏺️)    pause button..record button
                                    if (0x23f8 <= code && code <= 0x23fa) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x25b6) {
                            if (code < 0x25aa) {
                                // E0.6   [1] (Ⓜ️)       circled M
                                if (0x24c2 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [2] (▪️..▫️)    black small square..white small square
                                if (0x25aa <= code && code <= 0x25ab) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x25c0) {
                                // E0.6   [1] (▶️)       play button
                                if (0x25b6 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x25fb) {
                                    // E0.6   [1] (◀️)       reverse button
                                    if (0x25c0 === code) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.6   [4] (◻️..◾)    white medium square..black medium-small square
                                    if (0x25fb <= code && code <= 0x25fe) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (code < 0x2733) {
                    if (code < 0x2714) {
                        if (code < 0x2614) {
                            if (code < 0x2607) {
                                // E0.6   [2] (☀️..☁️)    sun..cloud
                                // E0.7   [2] (☂️..☃️)    umbrella..snowman
                                // E1.0   [1] (☄️)       comet
                                // E0.0   [1] (★)       BLACK STAR
                                if (0x2600 <= code && code <= 0x2605) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION
                                // E0.6   [1] (☎️)       telephone
                                // E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX
                                // E0.6   [1] (☑️)       check box with check
                                // E0.0   [1] (☒)       BALLOT BOX WITH X
                                if (0x2607 <= code && code <= 0x2612) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x2690) {
                                // E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage
                                // E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE
                                // E1.0   [1] (☘️)       shamrock
                                // E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX
                                // E0.6   [1] (☝️)       index pointing up
                                // E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX
                                // E1.0   [1] (☠️)       skull and crossbones
                                // E0.0   [1] (☡)       CAUTION SIGN
                                // E1.0   [2] (☢️..☣️)    radioactive..biohazard
                                // E0.0   [2] (☤..☥)    CADUCEUS..ANKH
                                // E1.0   [1] (☦️)       orthodox cross
                                // E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM
                                // E0.7   [1] (☪️)       star and crescent
                                // E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE
                                // E1.0   [1] (☮️)       peace symbol
                                // E0.7   [1] (☯️)       yin yang
                                // E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH
                                // E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face
                                // E0.6   [1] (☺️)       smiling face
                                // E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY
                                // E4.0   [1] (♀️)       female sign
                                // E0.0   [1] (♁)       EARTH
                                // E4.0   [1] (♂️)       male sign
                                // E0.0   [5] (♃..♇)    JUPITER..PLUTO
                                // E0.6  [12] (♈..♓)    Aries..Pisces
                                // E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT
                                // E11.0  [1] (♟️)       chess pawn
                                // E0.6   [1] (♠️)       spade suit
                                // E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT
                                // E0.6   [1] (♣️)       club suit
                                // E0.0   [1] (♤)       WHITE SPADE SUIT
                                // E0.6   [2] (♥️..♦️)    heart suit..diamond suit
                                // E0.0   [1] (♧)       WHITE CLUB SUIT
                                // E0.6   [1] (♨️)       hot springs
                                // E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS
                                // E0.6   [1] (♻️)       recycling symbol
                                // E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL
                                // E11.0  [1] (♾️)       infinity
                                // E0.6   [1] (♿)       wheelchair symbol
                                // E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6
                                if (0x2614 <= code && code <= 0x2685) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x2708) {
                                    // E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG
                                    // E1.0   [1] (⚒️)       hammer and pick
                                    // E0.6   [1] (⚓)       anchor
                                    // E1.0   [1] (⚔️)       crossed swords
                                    // E4.0   [1] (⚕️)       medical symbol
                                    // E1.0   [2] (⚖️..⚗️)    balance scale..alembic
                                    // E0.0   [1] (⚘)       FLOWER
                                    // E1.0   [1] (⚙️)       gear
                                    // E0.0   [1] (⚚)       STAFF OF HERMES
                                    // E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis
                                    // E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT
                                    // E0.6   [2] (⚠️..⚡)    warning..high voltage
                                    // E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN
                                    // E13.0  [1] (⚧️)       transgender symbol
                                    // E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN
                                    // E0.6   [2] (⚪..⚫)    white circle..black circle
                                    // E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL
                                    // E1.0   [2] (⚰️..⚱️)    coffin..funeral urn
                                    // E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE
                                    // E0.6   [2] (⚽..⚾)    soccer ball..baseball
                                    // E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING
                                    // E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud
                                    // E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN
                                    // E0.7   [1] (⛈️)       cloud with lightning and rain
                                    // E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR
                                    // E0.6   [1] (⛎)       Ophiuchus
                                    // E0.7   [1] (⛏️)       pick
                                    // E0.0   [1] (⛐)       CAR SLIDING
                                    // E0.7   [1] (⛑️)       rescue worker’s helmet
                                    // E0.0   [1] (⛒)       CIRCLED CROSSING LANES
                                    // E0.7   [1] (⛓️)       chains
                                    // E0.6   [1] (⛔)       no entry
                                    // E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD
                                    // E0.7   [1] (⛩️)       shinto shrine
                                    // E0.6   [1] (⛪)       church
                                    // E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE
                                    // E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground
                                    // E0.6   [2] (⛲..⛳)    fountain..flag in hole
                                    // E0.7   [1] (⛴️)       ferry
                                    // E0.6   [1] (⛵)       sailboat
                                    // E0.0   [1] (⛶)       SQUARE FOUR CORNERS
                                    // E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball
                                    // E0.6   [1] (⛺)       tent
                                    // E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL
                                    // E0.6   [1] (⛽)       fuel pump
                                    // E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS
                                    // E0.6   [1] (✂️)       scissors
                                    // E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS
                                    // E0.6   [1] (✅)       check mark button
                                    if (0x2690 <= code && code <= 0x2705) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.6   [5] (✈️..✌️)    airplane..victory hand
                                    // E0.7   [1] (✍️)       writing hand
                                    // E0.0   [1] (✎)       LOWER RIGHT PENCIL
                                    // E0.6   [1] (✏️)       pencil
                                    // E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB
                                    // E0.6   [1] (✒️)       black nib
                                    if (0x2708 <= code && code <= 0x2712) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x271d) {
                            // E0.6   [1] (✔️)       check mark
                            if (0x2714 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.6   [1] (✖️)       multiply
                            if (0x2716 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            if (code < 0x2721) {
                                // E0.7   [1] (✝️)       latin cross
                                if (0x271d === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.7   [1] (✡️)       star of David
                                if (0x2721 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                                // E0.6   [1] (✨)       sparkles
                                if (0x2728 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    }
                }
                else {
                    if (code < 0x2753) {
                        if (code < 0x2747) {
                            if (code < 0x2744) {
                                // E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star
                                if (0x2733 <= code && code <= 0x2734) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (❄️)       snowflake
                                if (0x2744 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x274c) {
                                // E0.6   [1] (❇️)       sparkle
                                if (0x2747 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (❌)       cross mark
                                if (0x274c === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                                // E0.6   [1] (❎)       cross mark button
                                if (0x274e === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x2763) {
                            if (code < 0x2757) {
                                // E0.6   [3] (❓..❕)    red question mark..white exclamation mark
                                if (0x2753 <= code && code <= 0x2755) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (❗)       red exclamation mark
                                if (0x2757 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x2795) {
                                // E1.0   [1] (❣️)       heart exclamation
                                // E0.6   [1] (❤️)       red heart
                                // E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET
                                if (0x2763 <= code && code <= 0x2767) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x27a1) {
                                    // E0.6   [3] (➕..➗)    plus..divide
                                    if (0x2795 <= code && code <= 0x2797) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.6   [1] (➡️)       right arrow
                                    if (0x27a1 === code) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if (code < 0x1f201) {
                if (code < 0x3297) {
                    if (code < 0x2b1b) {
                        if (code < 0x2934) {
                            // E0.6   [1] (➰)       curly loop
                            if (0x27b0 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E1.0   [1] (➿)       double curly loop
                            if (0x27bf === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            if (code < 0x2b05) {
                                // E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down
                                if (0x2934 <= code && code <= 0x2935) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [3] (⬅️..⬇️)    left arrow..down arrow
                                if (0x2b05 <= code && code <= 0x2b07) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x2b55) {
                            if (code < 0x2b50) {
                                // E0.6   [2] (⬛..⬜)    black large square..white large square
                                if (0x2b1b <= code && code <= 0x2b1c) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (⭐)       star
                                if (0x2b50 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x3030) {
                                // E0.6   [1] (⭕)       hollow red circle
                                if (0x2b55 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (〰️)       wavy dash
                                if (0x3030 === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                                // E0.6   [1] (〽️)       part alternation mark
                                if (0x303d === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                    }
                }
                else {
                    if (code < 0x1f16c) {
                        if (code < 0x1f000) {
                            // E0.6   [1] (㊗️)       Japanese “congratulations” button
                            if (0x3297 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                            // E0.6   [1] (㊙️)       Japanese “secret” button
                            if (0x3299 === code) {
                                return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                        else {
                            if (code < 0x1f10d) {
                                // E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND
                                // E0.6   [1] (🀄)       mahjong red dragon
                                // E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS
                                // E0.6   [1] (🃏)       joker
                                // E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>
                                if (0x1f000 <= code && code <= 0x1f0ff) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1f12f) {
                                    // E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
                                    if (0x1f10d <= code && code <= 0x1f10f) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0   [1] (🄯)       COPYLEFT SYMBOL
                                    if (0x1f12f === code) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x1f18e) {
                            if (code < 0x1f17e) {
                                // E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE
                                // E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)
                                if (0x1f16c <= code && code <= 0x1f171) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button
                                if (0x1f17e <= code && code <= 0x1f17f) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x1f191) {
                                // E0.6   [1] (🆎)       AB button (blood type)
                                if (0x1f18e === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1f1ad) {
                                    // E0.6  [10] (🆑..🆚)    CL button..VS button
                                    if (0x1f191 <= code && code <= 0x1f19a) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>
                                    if (0x1f1ad <= code && code <= 0x1f1e5) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (code < 0x1f7d5) {
                    if (code < 0x1f249) {
                        if (code < 0x1f22f) {
                            if (code < 0x1f21a) {
                                // E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button
                                // E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>
                                if (0x1f201 <= code && code <= 0x1f20f) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.6   [1] (🈚)       Japanese “free of charge” button
                                if (0x1f21a === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x1f232) {
                                // E0.6   [1] (🈯)       Japanese “reserved” button
                                if (0x1f22f === code) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1f23c) {
                                    // E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button
                                    if (0x1f232 <= code && code <= 0x1f23a) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>
                                    if (0x1f23c <= code && code <= 0x1f23f) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x1f546) {
                            if (code < 0x1f400) {
                                // E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>
                                // E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button
                                // E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>
                                // E0.6  [13] (🌀..🌌)    cyclone..milky way
                                // E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas
                                // E0.6   [1] (🌏)       globe showing Asia-Australia
                                // E1.0   [1] (🌐)       globe with meridians
                                // E0.6   [1] (🌑)       new moon
                                // E1.0   [1] (🌒)       waxing crescent moon
                                // E0.6   [3] (🌓..🌕)    first quarter moon..full moon
                                // E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon
                                // E0.6   [1] (🌙)       crescent moon
                                // E1.0   [1] (🌚)       new moon face
                                // E0.6   [1] (🌛)       first quarter moon face
                                // E0.7   [1] (🌜)       last quarter moon face
                                // E1.0   [2] (🌝..🌞)    full moon face..sun with face
                                // E0.6   [2] (🌟..🌠)    glowing star..shooting star
                                // E0.7   [1] (🌡️)       thermometer
                                // E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN
                                // E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face
                                // E1.0   [3] (🌭..🌯)    hot dog..burrito
                                // E0.6   [2] (🌰..🌱)    chestnut..seedling
                                // E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree
                                // E0.6   [2] (🌴..🌵)    palm tree..cactus
                                // E0.7   [1] (🌶️)       hot pepper
                                // E0.6  [20] (🌷..🍊)    tulip..tangerine
                                // E1.0   [1] (🍋)       lemon
                                // E0.6   [4] (🍌..🍏)    banana..green apple
                                // E1.0   [1] (🍐)       pear
                                // E0.6  [43] (🍑..🍻)    peach..clinking beer mugs
                                // E1.0   [1] (🍼)       baby bottle
                                // E0.7   [1] (🍽️)       fork and knife with plate
                                // E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn
                                // E0.6  [20] (🎀..🎓)    ribbon..graduation cap
                                // E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS
                                // E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon
                                // E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS
                                // E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs
                                // E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
                                // E0.7   [2] (🎞️..🎟️)    film frames..admission tickets
                                // E0.6  [37] (🎠..🏄)    carousel horse..person surfing
                                // E1.0   [1] (🏅)       sports medal
                                // E0.6   [1] (🏆)       trophy
                                // E1.0   [1] (🏇)       horse racing
                                // E0.6   [1] (🏈)       american football
                                // E1.0   [1] (🏉)       rugby football
                                // E0.6   [1] (🏊)       person swimming
                                // E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car
                                // E1.0   [5] (🏏..🏓)    cricket game..ping pong
                                // E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium
                                // E0.6   [4] (🏠..🏣)    house..Japanese post office
                                // E1.0   [1] (🏤)       post office
                                // E0.6  [12] (🏥..🏰)    hospital..castle
                                // E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT
                                // E0.7   [1] (🏳️)       white flag
                                // E1.0   [1] (🏴)       black flag
                                // E0.7   [1] (🏵️)       rosette
                                // E0.0   [1] (🏶)       BLACK ROSETTE
                                // E0.7   [1] (🏷️)       label
                                // E1.0   [3] (🏸..🏺)    badminton..amphora
                                if (0x1f249 <= code && code <= 0x1f3fa) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E1.0   [8] (🐀..🐇)    rat..rabbit
                                // E0.7   [1] (🐈)       cat
                                // E1.0   [3] (🐉..🐋)    dragon..whale
                                // E0.6   [3] (🐌..🐎)    snail..horse
                                // E1.0   [2] (🐏..🐐)    ram..goat
                                // E0.6   [2] (🐑..🐒)    ewe..monkey
                                // E1.0   [1] (🐓)       rooster
                                // E0.6   [1] (🐔)       chicken
                                // E0.7   [1] (🐕)       dog
                                // E1.0   [1] (🐖)       pig
                                // E0.6  [19] (🐗..🐩)    boar..poodle
                                // E1.0   [1] (🐪)       camel
                                // E0.6  [20] (🐫..🐾)    two-hump camel..paw prints
                                // E0.7   [1] (🐿️)       chipmunk
                                // E0.6   [1] (👀)       eyes
                                // E0.7   [1] (👁️)       eye
                                // E0.6  [35] (👂..👤)    ear..bust in silhouette
                                // E1.0   [1] (👥)       busts in silhouette
                                // E0.6   [6] (👦..👫)    boy..woman and man holding hands
                                // E1.0   [2] (👬..👭)    men holding hands..women holding hands
                                // E0.6  [63] (👮..💬)    police officer..speech balloon
                                // E1.0   [1] (💭)       thought balloon
                                // E0.6   [8] (💮..💵)    white flower..dollar banknote
                                // E1.0   [2] (💶..💷)    euro banknote..pound banknote
                                // E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag
                                // E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag
                                // E0.6   [1] (📮)       postbox
                                // E1.0   [1] (📯)       postal horn
                                // E0.6   [5] (📰..📴)    newspaper..mobile phone off
                                // E1.0   [1] (📵)       no mobile phones
                                // E0.6   [2] (📶..📷)    antenna bars..camera
                                // E1.0   [1] (📸)       camera with flash
                                // E0.6   [4] (📹..📼)    video camera..videocassette
                                // E0.7   [1] (📽️)       film projector
                                // E0.0   [1] (📾)       PORTABLE STEREO
                                // E1.0   [4] (📿..🔂)    prayer beads..repeat single button
                                // E0.6   [1] (🔃)       clockwise vertical arrows
                                // E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker
                                // E0.7   [1] (🔈)       speaker low volume
                                // E1.0   [1] (🔉)       speaker medium volume
                                // E0.6  [11] (🔊..🔔)    speaker high volume..bell
                                // E1.0   [1] (🔕)       bell with slash
                                // E0.6  [22] (🔖..🔫)    bookmark..water pistol
                                // E1.0   [2] (🔬..🔭)    microscope..telescope
                                // E0.6  [16] (🔮..🔽)    crystal ball..downwards button
                                if (0x1f400 <= code && code <= 0x1f53d) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x1f680) {
                                // E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS
                                // E0.7   [2] (🕉️..🕊️)    om..dove
                                // E1.0   [4] (🕋..🕎)    kaaba..menorah
                                // E0.0   [1] (🕏)       BOWL OF HYGIEIA
                                // E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock
                                // E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty
                                // E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK
                                // E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock
                                // E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY
                                // E0.7   [7] (🕳️..🕹️)    hole..joystick
                                // E3.0   [1] (🕺)       man dancing
                                // E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE
                                // E0.7   [1] (🖇️)       linked paperclips
                                // E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL
                                // E0.7   [4] (🖊️..🖍️)    pen..crayon
                                // E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN
                                // E0.7   [1] (🖐️)       hand with fingers splayed
                                // E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
                                // E1.0   [2] (🖕..🖖)    middle finger..vulcan salute
                                // E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX
                                // E3.0   [1] (🖤)       black heart
                                // E0.7   [1] (🖥️)       desktop computer
                                // E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS
                                // E0.7   [1] (🖨️)       printer
                                // E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE
                                // E0.7   [2] (🖱️..🖲️)    computer mouse..trackball
                                // E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE
                                // E0.7   [1] (🖼️)       framed picture
                                // E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER
                                // E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet
                                // E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES
                                // E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar
                                // E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL
                                // E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper
                                // E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART
                                // E0.7   [1] (🗡️)       dagger
                                // E0.0   [1] (🗢)       LIPS
                                // E0.7   [1] (🗣️)       speaking head
                                // E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT
                                // E2.0   [1] (🗨️)       left speech bubble
                                // E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE
                                // E0.7   [1] (🗯️)       right anger bubble
                                // E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD
                                // E0.7   [1] (🗳️)       ballot box with ballot
                                // E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK
                                // E0.7   [1] (🗺️)       world map
                                // E0.6   [5] (🗻..🗿)    mount fuji..moai
                                // E1.0   [1] (😀)       grinning face
                                // E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face
                                // E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns
                                // E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes
                                // E1.0   [1] (😎)       smiling face with sunglasses
                                // E0.6   [1] (😏)       smirking face
                                // E0.7   [1] (😐)       neutral face
                                // E1.0   [1] (😑)       expressionless face
                                // E0.6   [3] (😒..😔)    unamused face..pensive face
                                // E1.0   [1] (😕)       confused face
                                // E0.6   [1] (😖)       confounded face
                                // E1.0   [1] (😗)       kissing face
                                // E0.6   [1] (😘)       face blowing a kiss
                                // E1.0   [1] (😙)       kissing face with smiling eyes
                                // E0.6   [1] (😚)       kissing face with closed eyes
                                // E1.0   [1] (😛)       face with tongue
                                // E0.6   [3] (😜..😞)    winking face with tongue..disappointed face
                                // E1.0   [1] (😟)       worried face
                                // E0.6   [6] (😠..😥)    angry face..sad but relieved face
                                // E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face
                                // E0.6   [4] (😨..😫)    fearful face..tired face
                                // E1.0   [1] (😬)       grimacing face
                                // E0.6   [1] (😭)       loudly crying face
                                // E1.0   [2] (😮..😯)    face with open mouth..hushed face
                                // E0.6   [4] (😰..😳)    anxious face with sweat..flushed face
                                // E1.0   [1] (😴)       sleeping face
                                // E0.6   [1] (😵)       face with crossed-out eyes
                                // E1.0   [1] (😶)       face without mouth
                                // E0.6  [10] (😷..🙀)    face with medical mask..weary cat
                                // E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes
                                // E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands
                                if (0x1f546 <= code && code <= 0x1f64f) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1f774) {
                                    // E0.6   [1] (🚀)       rocket
                                    // E1.0   [2] (🚁..🚂)    helicopter..locomotive
                                    // E0.6   [3] (🚃..🚅)    railway car..bullet train
                                    // E1.0   [1] (🚆)       train
                                    // E0.6   [1] (🚇)       metro
                                    // E1.0   [1] (🚈)       light rail
                                    // E0.6   [1] (🚉)       station
                                    // E1.0   [2] (🚊..🚋)    tram..tram car
                                    // E0.6   [1] (🚌)       bus
                                    // E0.7   [1] (🚍)       oncoming bus
                                    // E1.0   [1] (🚎)       trolleybus
                                    // E0.6   [1] (🚏)       bus stop
                                    // E1.0   [1] (🚐)       minibus
                                    // E0.6   [3] (🚑..🚓)    ambulance..police car
                                    // E0.7   [1] (🚔)       oncoming police car
                                    // E0.6   [1] (🚕)       taxi
                                    // E1.0   [1] (🚖)       oncoming taxi
                                    // E0.6   [1] (🚗)       automobile
                                    // E0.7   [1] (🚘)       oncoming automobile
                                    // E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck
                                    // E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway
                                    // E0.6   [1] (🚢)       ship
                                    // E1.0   [1] (🚣)       person rowing boat
                                    // E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light
                                    // E1.0   [1] (🚦)       vertical traffic light
                                    // E0.6   [7] (🚧..🚭)    construction..no smoking
                                    // E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water
                                    // E0.6   [1] (🚲)       bicycle
                                    // E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking
                                    // E0.6   [1] (🚶)       person walking
                                    // E1.0   [2] (🚷..🚸)    no pedestrians..children crossing
                                    // E0.6   [6] (🚹..🚾)    men’s room..water closet
                                    // E1.0   [1] (🚿)       shower
                                    // E0.6   [1] (🛀)       person taking bath
                                    // E1.0   [5] (🛁..🛅)    bathtub..left luggage
                                    // E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL
                                    // E0.7   [1] (🛋️)       couch and lamp
                                    // E1.0   [1] (🛌)       person in bed
                                    // E0.7   [3] (🛍️..🛏️)    shopping bags..bed
                                    // E1.0   [1] (🛐)       place of worship
                                    // E3.0   [2] (🛑..🛒)    stop sign..shopping cart
                                    // E0.0   [2] (🛓..🛔)    STUPA..PAGODA
                                    // E12.0  [1] (🛕)       hindu temple
                                    // E13.0  [2] (🛖..🛗)    hut..elevator
                                    // E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>
                                    // E15.0  [1] (🛜)       wireless
                                    // E14.0  [3] (🛝..🛟)    playground slide..ring buoy
                                    // E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat
                                    // E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE
                                    // E0.7   [1] (🛩️)       small airplane
                                    // E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE
                                    // E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival
                                    // E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>
                                    // E0.7   [1] (🛰️)       satellite
                                    // E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE
                                    // E0.7   [1] (🛳️)       passenger ship
                                    // E3.0   [3] (🛴..🛶)    kick scooter..canoe
                                    // E5.0   [2] (🛷..🛸)    sled..flying saucer
                                    // E11.0  [1] (🛹)       skateboard
                                    // E12.0  [1] (🛺)       auto rickshaw
                                    // E13.0  [2] (🛻..🛼)    pickup truck..roller skate
                                    // E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>
                                    if (0x1f680 <= code && code <= 0x1f6ff) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS
                                    if (0x1f774 <= code && code <= 0x1f77f) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (code < 0x1f8ae) {
                        if (code < 0x1f848) {
                            if (code < 0x1f80c) {
                                // E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>
                                // E12.0 [12] (🟠..🟫)    orange circle..brown square
                                // E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>
                                // E14.0  [1] (🟰)       heavy equals sign
                                // E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>
                                if (0x1f7d5 <= code && code <= 0x1f7ff) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>
                                if (0x1f80c <= code && code <= 0x1f80f) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x1f85a) {
                                // E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>
                                if (0x1f848 <= code && code <= 0x1f84f) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1f888) {
                                    // E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>
                                    if (0x1f85a <= code && code <= 0x1f85f) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>
                                    if (0x1f888 <= code && code <= 0x1f88f) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if (code < 0x1f93c) {
                            if (code < 0x1f90c) {
                                // E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>
                                if (0x1f8ae <= code && code <= 0x1f8ff) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                // E13.0  [1] (🤌)       pinched fingers
                                // E12.0  [3] (🤍..🤏)    white heart..pinching hand
                                // E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns
                                // E3.0   [6] (🤙..🤞)    call me hand..crossed fingers
                                // E5.0   [1] (🤟)       love-you gesture
                                // E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face
                                // E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head
                                // E3.0   [1] (🤰)       pregnant woman
                                // E5.0   [2] (🤱..🤲)    breast-feeding..palms up together
                                // E3.0   [8] (🤳..🤺)    selfie..person fencing
                                if (0x1f90c <= code && code <= 0x1f93a) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                        }
                        else {
                            if (code < 0x1f947) {
                                // E3.0   [3] (🤼..🤾)    people wrestling..person playing handball
                                // E12.0  [1] (🤿)       diving mask
                                // E3.0   [6] (🥀..🥅)    wilted flower..goal net
                                if (0x1f93c <= code && code <= 0x1f945) {
                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                }
                            }
                            else {
                                if (code < 0x1fc00) {
                                    // E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform
                                    // E5.0   [1] (🥌)       curling stone
                                    // E11.0  [3] (🥍..🥏)    lacrosse..flying disc
                                    // E3.0  [15] (🥐..🥞)    croissant..pancakes
                                    // E5.0  [13] (🥟..🥫)    dumpling..canned food
                                    // E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts
                                    // E12.0  [1] (🥱)       yawning face
                                    // E13.0  [1] (🥲)       smiling face with tear
                                    // E11.0  [4] (🥳..🥶)    partying face..cold face
                                    // E13.0  [2] (🥷..🥸)    ninja..disguised face
                                    // E14.0  [1] (🥹)       face holding back tears
                                    // E11.0  [1] (🥺)       pleading face
                                    // E12.0  [1] (🥻)       sari
                                    // E11.0  [4] (🥼..🥿)    lab coat..flat shoe
                                    // E1.0   [5] (🦀..🦄)    crab..unicorn
                                    // E3.0  [13] (🦅..🦑)    eagle..squid
                                    // E5.0   [6] (🦒..🦗)    giraffe..cricket
                                    // E11.0 [11] (🦘..🦢)    kangaroo..swan
                                    // E13.0  [2] (🦣..🦤)    mammoth..dodo
                                    // E12.0  [6] (🦥..🦪)    sloth..oyster
                                    // E13.0  [3] (🦫..🦭)    beaver..seal
                                    // E12.0  [2] (🦮..🦯)    guide dog..white cane
                                    // E11.0 [10] (🦰..🦹)    red hair..supervillain
                                    // E12.0  [6] (🦺..🦿)    safety vest..mechanical leg
                                    // E1.0   [1] (🧀)       cheese wedge
                                    // E11.0  [2] (🧁..🧂)    cupcake..salt
                                    // E12.0  [8] (🧃..🧊)    beverage box..ice
                                    // E13.0  [1] (🧋)       bubble tea
                                    // E14.0  [1] (🧌)       troll
                                    // E12.0  [3] (🧍..🧏)    person standing..deaf person
                                    // E5.0  [23] (🧐..🧦)    face with monocle..socks
                                    // E11.0 [25] (🧧..🧿)    red envelope..nazar amulet
                                    // E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>
                                    // E12.0  [4] (🩰..🩳)    ballet shoes..shorts
                                    // E13.0  [1] (🩴)       thong sandal
                                    // E15.0  [3] (🩵..🩷)    light blue heart..pink heart
                                    // E12.0  [3] (🩸..🩺)    drop of blood..stethoscope
                                    // E14.0  [2] (🩻..🩼)    x-ray..crutch
                                    // E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>
                                    // E12.0  [3] (🪀..🪂)    yo-yo..parachute
                                    // E13.0  [4] (🪃..🪆)    boomerang..nesting dolls
                                    // E15.0  [2] (🪇..🪈)    maracas..flute
                                    // E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>
                                    // E12.0  [6] (🪐..🪕)    ringed planet..banjo
                                    // E13.0 [19] (🪖..🪨)    military helmet..rock
                                    // E14.0  [4] (🪩..🪬)    mirror ball..hamsa
                                    // E15.0  [3] (🪭..🪯)    folding hand fan..khanda
                                    // E13.0  [7] (🪰..🪶)    fly..feather
                                    // E14.0  [4] (🪷..🪺)    lotus..nest with eggs
                                    // E15.0  [3] (🪻..🪽)    hyacinth..wing
                                    // E0.0   [1] (🪾)       <reserved-1FABE>
                                    // E15.0  [1] (🪿)       goose
                                    // E13.0  [3] (🫀..🫂)    anatomical heart..people hugging
                                    // E14.0  [3] (🫃..🫅)    pregnant man..person with crown
                                    // E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>
                                    // E15.0  [2] (🫎..🫏)    moose..donkey
                                    // E13.0  [7] (🫐..🫖)    blueberries..teapot
                                    // E14.0  [3] (🫗..🫙)    pouring liquid..jar
                                    // E15.0  [2] (🫚..🫛)    ginger root..pea pod
                                    // E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>
                                    // E14.0  [8] (🫠..🫧)    melting face..bubbles
                                    // E15.0  [1] (🫨)       shaking face
                                    // E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>
                                    // E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands
                                    // E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand
                                    // E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>
                                    if (0x1f947 <= code && code <= 0x1faff) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                                else {
                                    // E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>
                                    if (0x1fc00 <= code && code <= 0x1fffd) {
                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // unlisted code points are treated as a break property of "Other"
        return boundaries_1.CLUSTER_BREAK.OTHER;
    }
}
exports.default = Graphemer;
