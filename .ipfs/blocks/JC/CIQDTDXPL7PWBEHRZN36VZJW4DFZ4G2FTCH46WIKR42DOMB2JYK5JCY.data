ode.getAttribute('summary')) {
        return true;
      }
      if (node.tHead || node.tFoot || node.caption) {
        return true;
      }
      for (var childIndex = 0, childLength = node.children.length; childIndex < childLength; childIndex++) {
        if (node.children[childIndex].nodeName.toUpperCase() === 'COLGROUP') {
          return true;
        }
      }
      var cells = 0;
      var rowLength = node.rows.length;
      var row, cell;
      var hasBorder = false;
      for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {
        row = node.rows[rowIndex];
        for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {
          cell = row.cells[cellIndex];
          if (cell.nodeName.toUpperCase() === 'TH') {
            return true;
          }
          if (!hasBorder && (cell.offsetWidth !== cell.clientWidth || cell.offsetHeight !== cell.clientHeight)) {
            hasBorder = true;
          }
          if (cell.getAttribute('scope') || cell.getAttribute('headers') || cell.getAttribute('abbr')) {
            return true;
          }
          if ([ 'columnheader', 'rowheader' ].includes((cell.getAttribute('role') || '').toLowerCase())) {
            return true;
          }
          if (cell.children.length === 1 && cell.children[0].nodeName.toUpperCase() === 'ABBR') {
            return true;
          }
          cells++;
        }
      }
      if (node.getElementsByTagName('table').length) {
        return false;
      }
      if (rowLength < 2) {
        return false;
      }
      var sampleRow = node.rows[Math.ceil(rowLength / 2)];
      if (sampleRow.cells.length === 1 && sampleRow.cells[0].colSpan === 1) {
        return false;
      }
      if (sampleRow.cells.length >= 5) {
        return true;
      }
      if (hasBorder) {
        return true;
      }
      var bgColor, bgImage;
      for (var _rowIndex = 0; _rowIndex < rowLength; _rowIndex++) {
        row = node.rows[_rowIndex];
        if (bgColor && bgColor !== window.getComputedStyle(row).getPropertyValue('background-color')) {
          return true;
        } else {
          bgColor = window.getComputedStyle(row).getPropertyValue('background-color');
        }
        if (bgImage && bgImage !== window.getComputedStyle(row).getPropertyValue('background-image')) {
          return true;
        } else {
          bgImage = window.getComputedStyle(row).getPropertyValue('background-image');
        }
      }
      if (rowLength >= 20) {
        return true;
      }
      if (get_element_coordinates_default(node).width > get_viewport_size_default(window).width * .95) {
        return false;
      }
      if (cells < 10) {
        return false;
      }
      if (node.querySelector('object, embed, iframe, applet')) {
        return false;
      }
      return true;
    }
    var is_data_table_default = isDataTable;
    function isHeader(cell) {
      if (is_column_header_default(cell) || is_row_header_default(cell)) {
        return true;
      }
      if (cell.getAttribute('id')) {
        var _id2 = escape_selector_default(cell.getAttribute('id'));
        return !!document.querySelector('[headers~="'.concat(_id2, '"]'));
      }
      return false;
    }
    var is_header_default = isHeader;
    function traverseTable(dir, position, tableGrid, callback) {
      var result;
      var cell = tableGrid[position.y] ? tableGrid[position.y][position.x] : void 0;
      if (!cell) {
        return [];
      }
      if (typeof callback === 'function') {
        result = callback(cell, position, tableGrid);
        if (result === true) {
          return [ cell ];
        }
      }
      result = traverseTable(dir, {
        x: position.x + dir.x,
        y: position.y + dir.y
      }, tableGrid, callback);
      result.unshift(cell);
      return result;
    }
    function traverse(dir, startPos, tableGrid, callback) {
      if (Array.isArray(startPos)) {
        callback = tableGrid;
        tableGrid = startPos;
        startPos = {
          x: 0,
          y: 0
        };
      }
      if (typeof dir === 'string') {
        switch (dir) {
         case 'left':
          dir = {
            x: -1,
            y: 0
          };
          break;

         case 'up':
          dir = {
            x: 0,
            y: -1
          };
          break;

         case 'right':
          dir = {
            x: 1,
            y: 0
          };
          break;

         case 'down':
          dir = {
            x: 0,
            y: 1
          };
          break;
        }
      }
      return traverseTable(dir, {
        x: startPos.x + dir.x,
        y: startPos.y + dir.y
      }, tableGrid, callback);
    }
    var traverse_default = traverse;
    function thHasDataCellsEvaluate(node) {
      var cells = get_all_cells_default(node);
      var checkResult = this;
      var reffedHeaders = [];
      cells.forEach(function(cell) {
        var headers2 = cell.getAttribute('headers');
        if (headers2) {
          reffedHeaders = reffedHeaders.concat(headers2.split(/\s+/));
        }
        var ariaLabel = cell.getAttribute('aria-labelledby');
        if (ariaLabel) {
          reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\s+/));
        }
      });
      var headers = cells.filter(function(cell) {
        if (sanitize_default(cell.textContent) === '') {
          return false;
        }
        return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;
      });
      var tableGrid = to_grid_default(node);
      var out = true;
      headers.forEach(function(header) {
        if (header.getAttribute('id') && reffedHeaders.includes(header.getAttribute('id'))) {
          return;
        }
        var pos = get_cell_position_default(header, tableGrid);
        var hasCell = false;
        if (is_column_header_default(header)) {
          hasCell = traverse_default('down', pos, tableGrid).find(function(cell) {
            return !is_column_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);
          });
        }
        if (!hasCell && is_row_header_default(header)) {
          hasCell = traverse_default('right', pos, tableGrid).find(function(cell) {
            return !is_row_header_default(cell) && get_headers_default(cell, tableGrid).includes(header);
          });
        }
        if (!hasCell) {
          checkResult.relatedNodes(header);
        }
        out = out && hasCell;
      });
      return out ? true : void 0;
    }
    var th_has_data_cells_evaluate_default = thHasDataCellsEvaluate;
    function tdHeadersAttrEvaluate(node) {
      var cells = [];
      var reviewCells = [];
      var badCells = [];
      for (var rowIndex = 0; rowIndex < node.rows.length; rowIndex++) {
        var row = node.rows[rowIndex];
        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
          cells.push(row.cells[cellIndex]);
        }
      }
      var ids = cells.filter(function(cell) {
        return cell.getAttribute('id');
      }).map(function(cell) {
        return cell.getAttribute('id');
      });
      cells.forEach(function(cell) {
        var isSelf = false;
        var notOfTable = false;
        if (!cell.hasAttribute('headers') || !_isVisibleToScreenReaders(cell)) {
          return;
        }
        var headersAttr = cell.getAttribute('headers').trim();
        if (!headersAttr) {
          return reviewCells.push(cell);
        }
        var headers = token_list_default(headersAttr);
        if (headers.length !== 0) {
          if (cell.getAttribute('id')) {
            isSelf = headers.indexOf(cell.getAttribute('id').trim()) !== -1;
          }
          notOfTable = headers.some(function(header) {
            return !ids.includes(header);
          });
          if (isSelf || notOfTable) {
            badCells.push(cell);
          }
        }
      });
      if (badCells.length > 0) {
        this.relatedNodes(badCells);
        return false;
      }
      if (reviewCells.length) {
        this.relatedNodes(reviewCells);
        return void 0;
      }
      return true;
    }
    var aria_exports = {};
    __export(aria_exports, {
      allowedAttr: function allowedAttr() {
        return allowed_attr_default;
      },
      arialabelText: function arialabelText() {
        return _arialabelText;
      },
      arialabelledbyText: function arialabelledbyText() {
        return arialabelledby_text_default;
      },
      getAccessibleRefs: function getAccessibleRefs() {
        return get_accessible_refs_default;
      },
      getElementUnallowedRoles: function getElementUnallowedRoles() {
        return get_element_unallowed_roles_default;
      },
      getExplicitRole: function getExplicitRole() {
        return get_explicit_role_default;
      },
      getImplicitRole: function getImplicitRole() {
        return implicit_role_default;
      },
      getOwnedVirtual: function getOwnedVirtual() {
        return get_owned_virtual_default;
      },
      getRole: function getRole() {
        return get_role_default;
      },
      getRoleType: function getRoleType() {
        return get_role_type_default;
      },
      getRolesByType: function getRolesByType() {
        return get_roles_by_type_default;
      },
      getRolesWithNameFromContents: function getRolesWithNameFromContents() {
        return get_roles_with_name_from_contents_default;
      },
      implicitNodes: function implicitNodes() {
        return implicit_nodes_default;
      },
      implicitRole: function implicitRole() {
        return implicit_role_default;
      },
      isAccessibleRef: function isAccessibleRef() {
        return is_accessible_ref_default;
      },
      isAriaRoleAllowedOnElement: function isAriaRoleAllowedOnElement() {
        return is_aria_role_allowed_on_element_default;
      },
      isComboboxPopup: function isComboboxPopup() {
        return _isComboboxPopup;
      },
      isUnsupportedRole: function isUnsupportedRole() {
        return is_unsupported_role_default;
      },
      isValidRole: function isValidRole() {
        return is_valid_role_default;
      },
      label: function label() {
        return label_default2;
      },
      labelVirtual: function labelVirtual() {
        return label_virtual_default;
      },
      lookupTable: function lookupTable() {
        return lookup_table_default;
      },
      namedFromContents: function namedFromContents() {
        return named_from_contents_default;
      },
      requiredAttr: function requiredAttr() {
        return required_attr_default;
      },
      requiredContext: function requiredContext() {
        return required_context_default;
      },
      requiredOwned: function requiredOwned() {
        return required_owned_default;
      },
      validateAttr: function validateAttr() {
        return validate_attr_default;
      },
      validateAttrValue: function validateAttrValue() {
        return validate_attr_value_default;
      }
    });
    function allowedAttr(role) {
      var roleDef = standards_default.ariaRoles[role];
      var attrs = _toConsumableArray(get_global_aria_attrs_default());
      if (!roleDef) {
        return attrs;
      }
      if (roleDef.allowedAttrs) {
        attrs.push.apply(attrs, _toConsumableArray(roleDef.allowedAttrs));
      }
      if (roleDef.requiredAttrs) {
        attrs.push.apply(attrs, _toConsumableArray(roleDef.requiredAttrs));
      }
      return attrs;
    }
    var allowed_attr_default = allowedAttr;
    var idRefsRegex = /^idrefs?$/;
    function cacheIdRefs(node, idRefs, refAttrs) {
      if (node.hasAttribute) {
        if (node.nodeName.toUpperCase() === 'LABEL' && node.hasAttribute('for')) {
          var _id3 = node.getAttribute('for');
          if (!idRefs.has(_id3)) {
            idRefs.set(_id3, [ node ]);
          } else {
            idRefs.get(_id3).push(node);
          }
        }
        for (var _i33 = 0; _i33 < refAttrs.length; ++_i33) {
          var attr = refAttrs[_i33];
          var attrValue = sanitize_default(node.getAttribute(attr) || '');
          if (!attrValue) {
            continue;
          }
          var _iterator14 = _createForOfIteratorHelper(token_list_default(attrValue)), _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
              var token = _step14.value;
              if (!idRefs.has(token)) {
                idRefs.set(token, [ node ]);
              } else {
                idRefs.get(token).push(node);
              }
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
        }
      }
      for (var _i34 = 0; _i34 < node.childNodes.length; _i34++) {
        if (node.childNodes[_i34].nodeType === 1) {
          cacheIdRefs(node.childNodes[_i34], idRefs, refAttrs);
        }
      }
    }
    function getAccessibleRefs(node) {
      var _idRefs$get;
      node = node.actualNode || node;
      var root = get_root_node_default2(node);
      root = root.documentElement || root;
      var idRefsByRoot = cache_default.get('idRefsByRoot', function() {
        return new Map();
      });
      var idRefs = idRefsByRoot.get(root);
      if (!idRefs) {
        idRefs = new Map();
        idRefsByRoot.set(root, idRefs);
        var refAttrs = Object.keys(standards_default.ariaAttrs).filter(function(attr) {
          var type2 = standards_default.ariaAttrs[attr].type;
          return idRefsRegex.test(type2);
        });
        cacheIdRefs(root, idRefs, refAttrs);
      }
      return (_idRefs$get = idRefs.get(node.id)) !== null && _idRefs$get !== void 0 ? _idRefs$get : [];
    }
    var get_accessible_refs_default = getAccessibleRefs;
    function isAriaRoleAllowedOnElement(node, role) {
      var vNode = node instanceof abstract_virtual_node_default ? node : get_node_from_tree_default(node);
      var implicitRole3 = implicit_role_default(vNode);
      var spec = get_element_spec_default(vNode);
      if (Array.isArray(spec.allowedRoles)) {
        return spec.allowedRoles.includes(role);
      }
      if (role === implicitRole3) {
        return false;
      }
      return !!spec.allowedRoles;
    }
    var is_aria_role_allowed_on_element_default = isAriaRoleAllowedOnElement;
    var dpubRoles2 = [ 'doc-backlink', 'doc-biblioentry', 'doc-biblioref', 'doc-cover', 'doc-endnote', 'doc-glossref', 'doc-noteref' ];
    var landmarkRoles = {
      header: 'banner',
      footer: 'contentinfo'
    };
    function getRoleSegments(vNode) {
      var roles = [];
      if (!vNode) {
        return roles;
      }
      if (vNode.hasAttr('role')) {
        var nodeRoles = token_list_default(vNode.attr('role').toLowerCase());
        roles = roles.concat(nodeRoles);
      }
      return roles.filter(function(role) {
        return is_valid_role_default(role);
      });
    }
    function getElementUnallowedRoles(node) {
      var allowImplicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var _nodeLookup21 = _nodeLookup(node), vNode = _nodeLookup21.vNode;
      if (!is_html_element_default(vNode)) {
        return [];
      }
      var nodeName2 = vNode.props.nodeName;
      var implicitRole3 = implicit_role_default(vNode) || landmarkRoles[nodeName2];
      var roleSegments = getRoleSegments(vNode);
      return roleSegments.filter(function(role) {
        return !roleIsAllowed(role, vNode, allowImplicit, implicitRole3);
      });
    }
    function roleIsAllowed(role, vNode, allowImplicit, implicitRole3) {
      if (allowImplicit && role === implicitRole3) {
        return true;
      }
      if (dpubRoles2.includes(role) && get_role_type_default(role) !== implicitRole3) {
        return false;
      }
      return is_aria_role_allowed_on_element_default(vNode, role);
    }
    var get_element_unallowed_roles_default = getElementUnallowedRoles;
    function getAriaRolesByType(type2) {
      return Object.keys(standards_default.ariaRoles).filter(function(roleName) {
        return standards_default.ariaRoles[roleName].type === type2;
      });
    }
    var get_aria_roles_by_type_default = getAriaRolesByType;
    function getRolesByType(roleType) {
      return get_aria_roles_by_type_default(roleType);
    }
    var get_roles_by_type_default = getRolesByType;
    function getAriaRolesSupportingNameFromContent() {
      return cache_default.get('ariaRolesNameFromContent', function() {
        return Object.keys(standards_default.ariaRoles).filter(function(roleName) {
          return standards_default.ariaRoles[roleName].nameFromContent;
        });
      });
    }
    var get_aria_roles_supporting_name_from_content_default = getAriaRolesSupportingNameFromContent;
    function getRolesWithNameFromContents() {
      return get_aria_roles_supporting_name_from_content_default();
    }
    var get_roles_with_name_from_contents_default = getRolesWithNameFromContents;
    var isNull = function isNull(value) {
      return value === null;
    };
    var isNotNull = function isNotNull(value) {
      return value !== null;
    };
    var lookupTable = {};
    lookupTable.attributes = {
      'aria-activedescendant': {
        type: 'idref',
        allowEmpty: true,
        unsupported: false
      },
      'aria-atomic': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-autocomplete': {
        type: 'nmtoken',
        values: [ 'inline', 'list', 'both', 'none' ],
        unsupported: false
      },
      'aria-busy': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-checked': {
        type: 'nmtoken',
        values: [ 'true', 'false', 'mixed', 'undefined' ],
        unsupported: false
      },
      'aria-colcount': {
        type: 'int',
        unsupported: false
      },
      'aria-colindex': {
        type: 'int',
        unsupported: false
      },
      'aria-colspan': {
        type: 'int',
        unsupported: false
      },
      'aria-controls': {
        type: 'idrefs',
        allowEmpty: true,
        unsupported: false
      },
      'aria-current': {
        type: 'nmtoken',
        allowEmpty: true,
        values: [ 'page', 'step', 'location', 'date', 'time', 'true', 'false' ],
        unsupported: false
      },
      'aria-describedby': {
        type: 'idrefs',
        allowEmpty: true,
        unsupported: false
      },
      'aria-describedat': {
        unsupported: true,
        unstandardized: true
      },
      'aria-details': {
        type: 'idref',
        allowEmpty: true,
        unsupported: false
      },
      'aria-disabled': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-dropeffect': {
        type: 'nmtokens',
        values: [ 'copy', 'move', 'reference', 'execute', 'popup', 'none' ],
        unsupported: false
      },
      'aria-errormessage': {
        type: 'idref',
        allowEmpty: true,
        unsupported: false
      },
      'aria-expanded': {
        type: 'nmtoken',
        values: [ 'true', 'false', 'undefined' ],
        unsupported: false
      },
      'aria-flowto': {
        type: 'idrefs',
        allowEmpty: true,
        unsupported: false
      },
      'aria-grabbed': {
        type: 'nmtoken',
        values: [ 'true', 'false', 'undefined' ],
        unsupported: false
      },
      'aria-haspopup': {
        type: 'nmtoken',
        allowEmpty: true,
        values: [ 'true', 'false', 'menu', 'listbox', 'tree', 'grid', 'dialog' ],
        unsupported: false
      },
      'aria-hidden': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-invalid': {
        type: 'nmtoken',
        allowEmpty: true,
        values: [ 'true', 'false', 'spelling', 'grammar' ],
        unsupported: false
      },
      'aria-keyshortcuts': {
        type: 'string',
        allowEmpty: true,
        unsupported: false
      },
      'aria-label': {
        type: 'string',
        allowEmpty: true,
        unsupported: false
      },
      'aria-labelledby': {
        type: 'idrefs',
        allowEmpty: true,
        unsupported: false
      },
      'aria-level': {
        type: 'int',
        unsupported: false
      },
      'aria-live': {
        type: 'nmtoken',
        values: [ 'off', 'polite', 'assertive' ],
        unsupported: false
      },
      'aria-modal': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-multiline': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-multiselectable': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-orientation': {
        type: 'nmtoken',
        values: [ 'horizontal', 'vertical' ],
        unsupported: false
      },
      'aria-owns': {
        type: 'idrefs',
        allowEmpty: true,
        unsupported: false
      },
      'aria-placeholder': {
        type: 'string',
        allowEmpty: true,
        unsupported: false
      },
      'aria-posinset': {
        type: 'int',
        unsupported: false
      },
      'aria-pressed': {
        type: 'nmtoken',
        values: [ 'true', 'false', 'mixed', 'undefined' ],
        unsupported: false
      },
      'aria-readonly': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-relevant': {
        type: 'nmtokens',
        values: [ 'additions', 'removals', 'text', 'all' ],
        unsupported: false
      },
      'aria-required': {
        type: 'boolean',
        values: [ 'true', 'false' ],
        unsupported: false
      },
      'aria-roledescription': {
        type: 'string',
        allowEmpty: true,
        unsupported: false
      },
      'aria-rowcount': {
        type: 'int',
        unsupported: false
      },
      'aria-rowindex': {
        type: 'int',
        unsupported: false
      },
      'aria-rowspan': {
        type: 'int',
        unsupported: false
      },
      'aria-selected': {
        type: 'nmtoken',
        values: [ 'true', 'false', 'undefined' ],
        unsupported: false
      },
      'aria-setsize': {
        type: 'int',
        unsupported: false
      },
      'aria-sort': {
        type: 'nmtoken',
        values: [ 'ascending', 'descending', 'other', 'none' ],
        unsupported: false
      },
      'aria-valuemax': {
        type: 'decimal',
        unsupported: false
      },
      'aria-valuemin': {
        type: 'decimal',
        unsupported: false
      },
      'aria-valuenow': {
        type: 'decimal',
        unsupported: false
      },
      'aria-valuetext': {
        type: 'string',
        unsupported: false
      }
    };
    lookupTable.globalAttributes = [ 'aria-atomic', 'aria-busy', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant', 'aria-roledescription' ];
    lookupTable.role = {
      alert: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      alertdialog: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'dialog', 'section' ]
      },
      application: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage', 'aria-activedescendant' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'article', 'audio', 'embed', 'iframe', 'object', 'section', 'svg', 'video' ]
      },
      article: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'article' ],
        unsupported: false
      },
      banner: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'header' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      button: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-pressed', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'button', 'input[type="button"]', 'input[type="image"]', 'input[type="reset"]', 'input[type="submit"]', 'summary' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      cell: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'row' ],
        implicit: [ 'td', 'th' ],
        unsupported: false
      },
      checkbox: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-checked', 'aria-required', 'aria-readonly', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'input[type="checkbox"]' ],
        unsupported: false,
        allowedElements: [ 'button' ]
      },
      columnheader: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'row' ],
        implicit: [ 'th' ],
        unsupported: false
      },
      combobox: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-autocomplete', 'aria-required', 'aria-activedescendant', 'aria-orientation', 'aria-errormessage' ],
          required: [ 'aria-expanded' ]
        },
        owned: {
          all: [ 'listbox', 'tree', 'grid', 'dialog', 'textbox' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: 'input',
          properties: {
            type: [ 'text', 'search', 'tel', 'url', 'email' ]
          }
        } ]
      },
      command: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      complementary: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'aside' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      composite: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      contentinfo: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'footer' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      definition: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'dd', 'dfn' ],
        unsupported: false
      },
      dialog: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'dialog' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      directory: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      document: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'body' ],
        unsupported: false,
        allowedElements: [ 'article', 'embed', 'iframe', 'object', 'section', 'svg' ]
      },
      'doc-abstract': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-acknowledgments': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-afterword': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-appendix': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-backlink': {
        type: 'link',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      'doc-biblioentry': {
        type: 'listitem',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: [ 'doc-bibliography' ],
        unsupported: false,
        allowedElements: [ 'li' ]
      },
      'doc-bibliography': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'doc-biblioentry' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-biblioref': {
        type: 'link',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      'doc-chapter': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-colophon': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-conclusion': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-cover': {
        type: 'img',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false
      },
      'doc-credit': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-credits': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-dedication': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-endnote': {
        type: 'listitem',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: [ 'doc-endnotes' ],
        unsupported: false,
        allowedElements: [ 'li' ]
      },
      'doc-endnotes': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'doc-endnote' ]
        },
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-epigraph': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false
      },
      'doc-epilogue': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-errata': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-example': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'aside', 'section' ]
      },
      'doc-footnote': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'aside', 'footer', 'header' ]
      },
      'doc-foreword': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-glossary': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: [ 'term', 'definition' ],
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'dl' ]
      },
      'doc-glossref': {
        type: 'link',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      'doc-index': {
        type: 'navigation',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'nav', 'section' ]
      },
      'doc-introduction': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-noteref': {
        type: 'link',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      'doc-notice': {
        type: 'note',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-pagebreak': {
        type: 'separator',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'hr' ]
      },
      'doc-pagelist': {
        type: 'navigation',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'nav', 'section' ]
      },
      'doc-part': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-preface': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-prologue': {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-pullquote': {
        type: 'none',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'aside', 'section' ]
      },
      'doc-qna': {
        type: 'section',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      'doc-subtitle': {
        type: 'sectionhead',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: {
          nodeName: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ]
        }
      },
      'doc-tip': {
        type: 'note',
        attributes: {
          allowed: [ 'aria-expanded' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'aside' ]
      },
      'doc-toc': {
        type: 'navigation',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        namefrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'nav', 'section' ]
      },
      feed: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'article' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'article', 'aside', 'section' ]
      },
      figure: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'figure' ],
        unsupported: false
      },
      form: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'form' ],
        unsupported: false
      },
      grid: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-colcount', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-rowcount', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'rowgroup', 'row' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'table' ],
        unsupported: false
      },
      gridcell: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-selected', 'aria-readonly', 'aria-required', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'row' ],
        implicit: [ 'td', 'th' ],
        unsupported: false
      },
      group: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'details', 'optgroup' ],
        unsupported: false,
        allowedElements: [ 'dl', 'figcaption', 'fieldset', 'figure', 'footer', 'header', 'ol', 'ul' ]
      },
      heading: {
        type: 'structure',
        attributes: {
          required: [ 'aria-level' ],
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],
        unsupported: false
      },
      img: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'img' ],
        unsupported: false,
        allowedElements: [ 'embed', 'iframe', 'object', 'svg' ]
      },
      input: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      landmark: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      link: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'a[href]', 'area[href]' ],
        unsupported: false,
        allowedElements: [ 'button', {
          nodeName: 'input',
          properties: {
            type: [ 'image', 'button' ]
          }
        } ]
      },
      list: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: {
          all: [ 'listitem' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'ol', 'ul', 'dl' ],
        unsupported: false
      },
      listbox: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          all: [ 'option' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'select' ],
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      listitem: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'list' ],
        implicit: [ 'li', 'dt' ],
        unsupported: false
      },
      log: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      main: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'main' ],
        unsupported: false,
        allowedElements: [ 'article', 'section' ]
      },
      marquee: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      math: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'math' ],
        unsupported: false
      },
      menu: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'menu[type="context"]' ],
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      menubar: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      menuitem: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'menu', 'menubar' ],
        implicit: [ 'menuitem[type="command"]' ],
        unsupported: false,
        allowedElements: [ 'button', 'li', {
          nodeName: 'iput',
          properties: {
            type: [ 'image', 'button' ]
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      menuitemcheckbox: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-checked', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'menu', 'menubar' ],
        implicit: [ 'menuitem[type="checkbox"]' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'button', 'li' ]
        }, {
          nodeName: 'input',
          properties: {
            type: [ 'checkbox', 'image', 'button' ]
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      menuitemradio: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-checked', 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'menu', 'menubar' ],
        implicit: [ 'menuitem[type="radio"]' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'button', 'li' ]
        }, {
          nodeName: 'input',
          properties: {
            type: [ 'image', 'button', 'radio' ]
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      navigation: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'nav' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      none: {
        type: 'structure',
        attributes: null,
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'iframe', 'li', 'ol', 'section', 'ul' ]
        }, {
          nodeName: 'img',
          attributes: {
            alt: isNotNull
          }
        } ]
      },
      note: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'aside' ]
      },
      option: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-checked', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'listbox' ],
        implicit: [ 'option' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'button', 'li' ]
        }, {
          nodeName: 'input',
          properties: {
            type: [ 'checkbox', 'button' ]
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      presentation: {
        type: 'structure',
        attributes: null,
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'iframe', 'li', 'ol', 'section', 'ul' ]
        }, {
          nodeName: 'img',
          attributes: {
            alt: isNotNull
          }
        } ]
      },
      progressbar: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-valuetext', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'progress' ],
        unsupported: false
      },
      radio: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-required', 'aria-errormessage', 'aria-checked' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'input[type="radio"]' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'button', 'li' ]
        }, {
          nodeName: 'input',
          properties: {
            type: [ 'image', 'button' ]
          }
        } ]
      },
      radiogroup: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-required', 'aria-expanded', 'aria-readonly', 'aria-errormessage', 'aria-orientation' ]
        },
        owned: {
          all: [ 'radio' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: {
          nodeName: [ 'ol', 'ul', 'fieldset' ]
        }
      },
      range: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      region: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'section[aria-label]', 'section[aria-labelledby]', 'section[title]' ],
        unsupported: false,
        allowedElements: {
          nodeName: [ 'article', 'aside' ]
        }
      },
      roletype: {
        type: 'abstract',
        unsupported: false
      },
      row: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-colindex', 'aria-expanded', 'aria-level', 'aria-selected', 'aria-rowindex', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'cell', 'columnheader', 'rowheader', 'gridcell' ]
        },
        nameFrom: [ 'author', 'contents' ],
        context: [ 'rowgroup', 'grid', 'treegrid', 'table' ],
        implicit: [ 'tr' ],
        unsupported: false
      },
      rowgroup: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]
        },
        owned: {
          all: [ 'row' ]
        },
        nameFrom: [ 'author', 'contents' ],
        context: [ 'grid', 'table', 'treegrid' ],
        implicit: [ 'tbody', 'thead', 'tfoot' ],
        unsupported: false
      },
      rowheader: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'row' ],
        implicit: [ 'th' ],
        unsupported: false
      },
      scrollbar: {
        type: 'widget',
        attributes: {
          required: [ 'aria-controls', 'aria-valuenow' ],
          allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false
      },
      search: {
        type: 'landmark',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: {
          nodeName: [ 'aside', 'form', 'section' ]
        }
      },
      searchbox: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'input[type="search"]' ],
        unsupported: false,
        allowedElements: {
          nodeName: 'input',
          properties: {
            type: 'text'
          }
        }
      },
      section: {
        nameFrom: [ 'author', 'contents' ],
        type: 'abstract',
        unsupported: false
      },
      sectionhead: {
        nameFrom: [ 'author', 'contents' ],
        type: 'abstract',
        unsupported: false
      },
      select: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      },
      separator: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-orientation', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-valuetext', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'hr' ],
        unsupported: false,
        allowedElements: [ 'li' ]
      },
      slider: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],
          required: [ 'aria-valuenow' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'input[type="range"]' ],
        unsupported: false
      },
      spinbutton: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-valuetext', 'aria-required', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],
          required: [ 'aria-valuenow' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'input[type="number"]' ],
        unsupported: false,
        allowedElements: {
          nodeName: 'input',
          properties: {
            type: [ 'text', 'tel' ]
          }
        }
      },
      status: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'output' ],
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      structure: {
        type: 'abstract',
        unsupported: false
      },
      switch: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-errormessage' ],
          required: [ 'aria-checked' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'button', {
          nodeName: 'input',
          properties: {
            type: [ 'checkbox', 'image', 'button' ]
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      tab: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-selected', 'aria-expanded', 'aria-setsize', 'aria-posinset', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'tablist' ],
        unsupported: false,
        allowedElements: [ {
          nodeName: [ 'button', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li' ]
        }, {
          nodeName: 'input',
          properties: {
            type: 'button'
          }
        }, {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      table: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-colcount', 'aria-rowcount', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'rowgroup', 'row' ]
        },
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'table' ],
        unsupported: false
      },
      tablist: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          all: [ 'tab' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      tabpanel: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'section' ]
      },
      term: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        implicit: [ 'dt' ],
        unsupported: false
      },
      textbox: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'input[type="text"]', 'input[type="email"]', 'input[type="password"]', 'input[type="tel"]', 'input[type="url"]', 'input:not([type])', 'textarea' ],
        unsupported: false
      },
      timer: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false
      },
      toolbar: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author' ],
        context: null,
        implicit: [ 'menu[type="toolbar"]' ],
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      tooltip: {
        type: 'structure',
        attributes: {
          allowed: [ 'aria-expanded', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: null,
        unsupported: false
      },
      tree: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          all: [ 'treeitem' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false,
        allowedElements: [ 'ol', 'ul' ]
      },
      treegrid: {
        type: 'composite',
        attributes: {
          allowed: [ 'aria-activedescendant', 'aria-colcount', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-rowcount', 'aria-orientation', 'aria-errormessage' ]
        },
        owned: {
          one: [ 'rowgroup', 'row' ]
        },
        nameFrom: [ 'author' ],
        context: null,
        unsupported: false
      },
      treeitem: {
        type: 'widget',
        attributes: {
          allowed: [ 'aria-checked', 'aria-selected', 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]
        },
        owned: null,
        nameFrom: [ 'author', 'contents' ],
        context: [ 'group', 'tree' ],
        unsupported: false,
        allowedElements: [ 'li', {
          nodeName: 'a',
          attributes: {
            href: isNotNull
          }
        } ]
      },
      widget: {
        type: 'abstract',
        unsupported: false
      },
      window: {
        nameFrom: [ 'author' ],
        type: 'abstract',
        unsupported: false
      }
    };
    lookupTable.implicitHtmlRole = implicit_html_roles_default;
    lookupTable.elementsAllowedNoRole = [ {
      nodeName: [ 'base', 'body', 'caption', 'col', 'colgroup', 'datalist', 'dd', 'details', 'dt', 'head', 'html', 'keygen', 'label', 'legend', 'main', 'map', 'math', 'meta', 'meter', 'noscript', 'optgroup', 'param', 'picture', 'progress', 'script', 'source', 'style', 'template', 'textarea', 'title', 'track' ]
    }, {
      nodeName: 'area',
      attributes: {
        href: isNotNull
      }
    }, {
      nodeName: 'input',
      properties: {
        type: [ 'color', 'data', 'datatime', 'file', 'hidden', 'month', 'number', 'password', 'range', 'reset', 'submit', 'time', 'week' ]
      }
    }, {
      nodeName: 'link',
      attributes: {
        href: isNotNull
      }
    }, {
      nodeName: 'menu',
      attributes: {
        type: 'context'
      }
    }, {
      nodeName: 'menuitem',
      attributes: {
        type: [ 'command', 'checkbox', 'radio' ]
      }
    }, {
      nodeName: 'select',
      condition: function condition(vNode) {
        if (!(vNode instanceof axe.AbstractVirtualNode)) {
          vNode = axe.utils.getNodeFromTree(vNode);
        }
        return Number(vNode.attr('size')) > 1;
      },
      properties: {
        multiple: true
      }
    }, {
      nodeName: [ 'clippath', 'cursor', 'defs', 'desc', 'feblend', 'fecolormatrix', 'fecomponenttransfer', 'fecomposite', 'feconvolvematrix', 'fediffuselighting', 'fedisplacementmap', 'fedistantlight', 'fedropshadow', 'feflood', 'fefunca', 'fefuncb', 'fefuncg', 'fefuncr', 'fegaussianblur', 'feimage', 'femerge', 'femergenode', 'femorphology', 'feoffset', 'fepointlight', 'fespecularlighting', 'fespotlight', 'fetile', 'feturbulence', 'filter', 'hatch', 'hatchpath', 'lineargradient', 'marker', 'mask', 'meshgradient', 'meshpatch', 'meshrow', 'metadata', 'mpath', 'pattern', 'radialgradient', 'solidcolor', 'stop', 'switch', 'view' ]
    } ];
    lookupTable.elementsAllowedAnyRole = [ {
      nodeName: 'a',
      attributes: {
        href: isNull
      }
    }, {
      nodeName: 'img',
      attributes: {
        alt: isNull
      }
    }, {
      nodeName: [ 'abbr', 'address', 'canvas', 'div', 'p', 'pre', 'blockquote', 'ins', 'del', 'output', 'span', 'table', 'tbody', 'thead', 'tfoot', 'td', 'em', 'strong', 'small', 's', 'cite', 'q', 'dfn', 'abbr', 'time', 'code', 'var', 'samp', 'kbd', 'sub', 'sup', 'i', 'b', 'u', 'mark', 'ruby', 'rt', 'rp', 'bdi', 'bdo', 'br', 'wbr', 'th', 'tr' ]
    } ];
    lookupTable.evaluateRoleForElement = {
      A: function A(_ref83) {
        var node = _ref83.node, out = _ref83.out;
        if (node.namespaceURI === 'http://www.w3.org/2000/svg') {
          return true;
        }
        if (node.href.length) {
          return out;
        }
        return true;
      },
      AREA: function AREA(_ref84) {
        var node = _ref84.node;
        return !node.href;
      },
      BUTTON: function BUTTON(_ref85) {
        var node = _ref85.node, role = _ref85.role, out = _ref85.out;
        if (node.getAttribute('type') === 'menu') {
          return role === 'menuitem';
        }
        return out;
      },
      IMG: function IMG(_ref86) {
        var node = _ref86.node, role = _ref86.role, out = _ref86.out;
        switch (node.alt) {
         case null:
          return out;

         case '':
          return role === 'presentation' || role === 'none';

         default:
          return role !== 'presentation' && role !== 'none';
        }
      },
      INPUT: function INPUT(_ref87) {
        var node = _ref87.node, role = _ref87.role, out = _ref87.out;
        switch (node.type) {
         case 'button':
         case 'image':
          return out;

         case 'checkbox':
          if (role === 'button' && node.hasAttribute('aria-pressed')) {
            return true;
          }
          return out;

         case 'radio':
          return role === 'menuitemradio';

         case 'text':
          return role === 'combobox' || role === 'searchbox' || role === 'spinbutton';

         case 'tel':
          return role === 'combobox' || role === 'spinbutton';

         case 'url':
         case 'search':
         case 'email':
          return role === 'combobox';

         default:
          return false;
        }
      },
      LI: function LI(_ref88) {
        var node = _ref88.node, out = _ref88.out;
        var hasImplicitListitemRole = axe.utils.matchesSelector(node, 'ol li, ul li');
        if (hasImplicitListitemRole) {
          return out;
        }
        return true;
      },
      MENU: function MENU(_ref89) {
        var node = _ref89.node;
        if (node.getAttribute('type') === 'context') {
          return false;
        }
        return true;
      },
      OPTION: function OPTION(_ref90) {
        var node = _ref90.node;
        var withinOptionList = axe.utils.matchesSelector(node, 'select > option, datalist > option, optgroup > option');
        return !withinOptionList;
      },
      SELECT: function SELECT(_ref91) {
        var node = _ref91.node, role = _ref91.role;
        return !node.multiple && node.size <= 1 && role === 'menu';
      },
      SVG: function SVG(_ref92) {
        var node = _ref92.node, out = _ref92.out;
        if (node.parentNode && node.parentNode.namespaceURI === 'http://www.w3.org/2000/svg') {
          return true;
        }
        return out;
      }
    };
    lookupTable.rolesOfType = {
      widget: [ 'button', 'checkbox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'tree', 'treeitem' ]
    };
    var lookup_table_default = lookupTable;
    function implicitNodes(role) {
      var implicit = null;
      var roles = lookup_table_default.role[role];
      if (roles && roles.implicit) {
        implicit = _clone(roles.implicit);
      }
      return implicit;
    }
    var implicit_nodes_default = implicitNodes;
    function isAccessibleRef(node) {
      return !!get_accessible_refs_default(node).length;
    }
    var is_accessible_ref_default = isAccessibleRef;
    function _isComboboxPopup(virtualNode) {
      var _popupRoles;
      var _ref93 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, popupRoles = _ref93.popupRoles;
      var role = get_role_default(virtualNode);
      (_popupRoles = popupRoles) !== null && _popupRoles !== void 0 ? _popupRoles : popupRoles = aria_attrs_default['aria-haspopup'].values;
      if (!popupRoles.includes(role)) {
        return false;
      }
      var vParent = nearestParentWithRole(virtualNode);
      if (isCombobox(vParent)) {
        return true;
      }
      var id = virtualNode.props.id;
      if (!id) {
        return false;
      }
      if (!virtualNode.actualNode) {
        throw new Error('Unable to determine combobox popup without an actualNode');
      }
      var root = get_root_node_default(virtualNode.actualNode);
      var ownedCombobox = root.querySelectorAll('[aria-owns~="'.concat(id, '"][role~="combobox"]:not(select),\n     [aria-controls~="').concat(id, '"][role~="combobox"]:not(select)'));
      return Array.from(ownedCombobox).some(isCombobox);
    }
    var isCombobox = function isCombobox(node) {
      return node && get_role_default(node) === 'combobox';
    };
    function nearestParentWithRole(vNode) {
      while (vNode = vNode.parent) {
        if (get_role_default(vNode, {
          noPresentational: true
        }) !== null) {
          return vNode;
        }
      }
      return null;
    }
    function label2(node) {
      node = get_node_from_tree_default(node);
      return label_virtual_default(node);
    }
    var label_default2 = label2;
    function requiredAttr(role) {
      var roleDef = standards_default.ariaRoles[role];
      if (!roleDef || !Array.isArray(roleDef.requiredAttrs)) {
        return [];
      }
      return _toConsumableArray(roleDef.requiredAttrs);
    }
    var required_attr_default = requiredAttr;
    function requiredContext(role) {
      var roleDef = standards_default.ariaRoles[role];
      if (!roleDef || !Array.isArray(roleDef.requiredContext)) {
        return null;
      }
      return _toConsumableArray(roleDef.requiredContext);
    }
    var required_context_default = requiredContext;
    function requiredOwned(role) {
      var roleDef = standards_default.ariaRoles[role];
      if (!roleDef || !Array.isArray(roleDef.requiredOwned)) {
        return null;
      }
      return _toConsumableArray(roleDef.requiredOwned);
    }
    var required_owned_default = requiredOwned;
    function validateAttrValue(vNode, attr) {
      vNode = vNode instanceof abstract_virtual_node_default ? vNode : get_node_from_tree_default(vNode);
      var matches4;
      var list;
      var value = vNode.attr(attr);
      var attrInfo = standards_default.ariaAttrs[attr];
      if (!attrInfo) {
        return true;
      }
      if (attrInfo.allowEmpty && (!value || value.trim() === '')) {
        return true;
      }
      switch (attrInfo.type) {
       case 'boolean':
        return [ 'true', 'false' ].includes(value.toLowerCase());

       case 'nmtoken':
        return typeof value === 'string' && attrInfo.values.includes(value.toLowerCase());

       case 'nmtokens':
        list = token_list_default(value);
        return list.reduce(function(result, token) {
          return result && attrInfo.values.includes(token);
        }, list.length !== 0);

       case 'idref':
        try {
          var doc = get_root_node_default2(vNode.actualNode);
          return !!(value && doc.getElementById(value));
        } catch (_unused6) {
          throw new TypeError('Cannot resolve id references for partial DOM');
        }

       case 'idrefs':
        return idrefs_default(vNode, attr).some(function(node) {
          return !!node;
        });

       case 'string':
        return value.trim() !== '';

       case 'decimal':
        matches4 = value.match(/^[-+]?([0-9]*)\.?([0-9]*)$/);
        return !!(matches4 && (matches4[1] || matches4[2]));

       case 'int':
        var minValue = typeof attrInfo.minValue !== 'undefined' ? attrInfo.minValue : -Infinity;
        return /^[-+]?[0-9]+$/.test(value) && parseInt(value) >= minValue;
      }
    }
    var validate_attr_value_default = validateAttrValue;
    function validateAttr(att) {
      var attrDefinition = standards_default.ariaAttrs[att];
      return !!attrDefinition;
    }
    var validate_attr_default = validateAttr;
    function tdHasHeaderEvaluate(node) {
      var badCells = [];
      var cells = get_all_cells_default(node);
      var tableGrid = to_grid_default(node);
      cells.forEach(function(cell) {
        if (has_content_default(cell) && is_data_cell_default(cell) && !label_default2(cell)) {
          var hasHeaders = get_headers_default(cell, tableGrid).some(function(header) {
            return header !== null && !!has_content_default(header);
          });
          if (!hasHeaders) {
            badCells.push(cell);
          }
        }
      });
      if (badCells.length) {
        this.relatedNodes(badCells);
        return false;
      }
      return true;
    }
    var td_has_header_evaluate_default = tdHasHeaderEvaluate;
    function scopeValueEvaluate(node, options) {
      var value = node.getAttribute('scope').toLowerCase();
      return options.values.indexOf(value) !== -1;
    }
    var scope_value_evaluate_default = scopeValueEvaluate;
    var same_caption_summary_evaluate_default = sameCaptionSummaryEvaluate;
    function sameCaptionSummaryEvaluate(node, options, virtualNode) {
      if (virtualNode.children === void 0) {
        return void 0;
      }
      var summary = virtualNode.attr('summary');
      var captionNode = virtualNode.children.find(isCaptionNode);
      var caption = captionNode ? sanitize_default(subtree_text_default(captionNode)) : false;
      if (!caption || !summary) {
        return false;
      }
      return sanitize_default(summary).toLowerCase() === sanitize_default(caption).toLowerCase();
    }
    function isCaptionNode(virtualNode) {
      return virtualNode.props.nodeName === 'caption';
    }
    function html5ScopeEvaluate(node) {
      if (!is_html5_default(document)) {
        return true;
      }
      return node.nodeName.toUpperCase() === 'TH';
    }
    var html5_scope_evaluate_default = html5ScopeEvaluate;
    function captionFakedEvaluate(node) {
      var table = to_grid_default(node);
      var firstRow = table[0];
      if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {
        return true;
      }
      return firstRow.reduce(function(out, curr, i) {
        return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== void 0;
      }, false);
    }
    var caption_faked_evaluate_default = captionFakedEvaluate;
    function svgNonEmptyTitleEvaluate(node, options, virtualNode) {
      if (!virtualNode.children) {
        return void 0;
      }
      var titleNode = virtualNode.children.find(function(_ref94) {
        var props = _ref94.props;
        return props.nodeName === 'title';
      });
      if (!titleNode) {
        this.data({
          messageKey: 'noTitle'
        });
        return false;
      }
      try {
        var titleText2 = subtree_text_default(titleNode, {
          includeHidden: true
        }).trim();
        if (titleText2 === '') {
          this.data({
            messageKey: 'emptyTitle'
          });
          return false;
        }
      } catch (_unused7) {
        return void 0;
      }
      return true;
    }
    var svg_non_empty_title_evaluate_default = svgNonEmptyTitleEvaluate;
    var standards_exports = {};
    __export(standards_exports, {
      getAriaRolesByType: function getAriaRolesByType() {
        return get_aria_roles_by_type_default;
      },
      getAriaRolesSupportingNameFromContent: function getAriaRolesSupportingNameFromContent() {
        return get_aria_roles_supporting_name_from_content_default;
      },
      getElementSpec: function getElementSpec() {
        return get_element_spec_default;
      },
      getElementsByContentType: function getElementsByContentType() {
        return get_elements_by_content_type_default;
      },
      getGlobalAriaAttrs: function getGlobalAriaAttrs() {
        return get_global_aria_attrs_default;
      },
      implicitHtmlRoles: function implicitHtmlRoles() {
        return implicit_html_roles_default;
      }
    });
    function presentationalRoleEvaluate(node, options, virtualNode) {
      var explicitRole2 = get_explicit_role_default(virtualNode);
      if ([ 'presentation', 'none' ].includes(explicitRole2) && [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName) && virtualNode.hasAttr('title')) {
        this.data({
          messageKey: 'iframe',
          nodeName: virtualNode.props.nodeName
        });
        return false;
      }
      var role = get_role_default(virtualNode);
      if ([ 'presentation', 'none' ].includes(role)) {
        this.data({
          role: role
        });
        return true;
      }
      if (![ 'presentation', 'none' ].includes(explicitRole2)) {
        return false;
      }
      var hasGlobalAria = get_global_aria_attrs_default().some(function(attr) {
        return virtualNode.hasAttr(attr);
      });
      var focusable = _isFocusable(virtualNode);
      var messageKey;
      if (hasGlobalAria && !focusable) {
        messageKey = 'globalAria';
      } else if (!hasGlobalAria && focusable) {
        messageKey = 'focusable';
      } else {
        messageKey = 'both';
      }
      this.data({
        messageKey: messageKey,
        role: role
      });
      return false;
    }
    function nonEmptyIfPresentEvaluate(node, options, virtualNode) {
      var nodeName2 = virtualNode.props.nodeName;
      var type2 = (virtualNode.attr('type') || '').toLowerCase();
      var label3 = virtualNode.attr('value');
      if (label3) {
        this.data({
          messageKey: 'has-label'
        });
      }
      if (nodeName2 === 'input' && [ 'submit', 'reset' ].includes(type2)) {
        return label3 === null;
      }
      return false;
    }
    var non_empty_if_present_evaluate_default = nonEmptyIfPresentEvaluate;
    function isOnScreenEvaluate(node) {
      return _isVisibleOnScreen(node);
    }
    var is_on_screen_evaluate_default = isOnScreenEvaluate;
    function inlineStyleProperty(node, options) {
      var cssProperty = options.cssProperty, absoluteValues = options.absoluteValues, minValue = options.minValue, maxValue = options.maxValue, _options$normalValue = options.normalValue, normalValue = _options$normalValue === void 0 ? 0 : _options$normalValue, noImportant = options.noImportant, multiLineOnly = options.multiLineOnly;
      if (!noImportant && node.style.getPropertyPriority(cssProperty) !== 'important' || multiLineOnly && !_isMultiline(node)) {
        return true;
      }
      var data = {};
      if (typeof minValue === 'number') {
        data.minValue = minValue;
      }
      if (typeof maxValue === 'number') {
        data.maxValue = maxValue;
      }
      var declaredPropValue = node.style.getPropertyValue(cssProperty);
      if ([ 'inherit', 'unset', 'revert', 'revert-layer' ].includes(declaredPropValue)) {
        this.data(_extends({
          value: declaredPropValue
        }, data));
        return true;
      }
      var value = getNumberValue(node, {
        absoluteValues: absoluteValues,
        cssProperty: cssProperty,
        normalValue: normalValue
      });
      this.data(_extends({
        value: value
      }, data));
      if (typeof value !== 'number') {
        return void 0;
      }
      if ((typeof minValue !== 'number' || value >= minValue) && (typeof maxValue !== 'number' || value <= maxValue)) {
        return true;
      }
      return false;
    }
    function getNumberValue(domNode, _ref95) {
      var cssProperty = _ref95.cssProperty, absoluteValues = _ref95.absoluteValues, normalValue = _ref95.normalValue;
      var computedStyle = window.getComputedStyle(domNode);
      var cssPropValue = computedStyle.getPropertyValue(cssProperty);
      if (cssPropValue === 'normal') {
        return normalValue;
      }
      var parsedValue = parseFloat(cssPropValue);
      if (absoluteValues) {
        return parsedValue;
      }
      var fontSize = parseFloat(computedStyle.getPropertyValue('font-size'));
      var value = Math.round(parsedValue / fontSize * 100) / 100;
      if (isNaN(value)) {
        return cssPropValue;
      }
      return value;
    }
    function hasAltEvaluate(node, options, virtualNode) {
      var nodeName2 = virtualNode.props.nodeName;
      if (![ 'img', 'input', 'area' ].includes(nodeName2)) {
        return false;
      }
      return virtualNode.hasAttr('alt');
    }
    var has_alt_evaluate_default = hasAltEvaluate;
    function existsEvaluate() {
      return void 0;
    }
    var exists_evaluate_default = existsEvaluate;
    function docHasTitleEvaluate() {
      var title = document.title;
      return !!sanitize_default(title);
    }
    var doc_has_title_evaluate_default = docHasTitleEvaluate;
    function avoidInlineSpacingEvaluate(node, options) {
      var overriddenProperties = options.cssProperties.filter(function(property) {
        if (node.style.getPropertyPriority(property) === 'important') {
          return property;
        }
      });
      if (overriddenProperties.length > 0) {
        this.data(overriddenProperties);
        return false;
      }
      return true;
    }
    var avoid_inline_spacing_evaluate_default = avoidInlineSpacingEvaluate;
    function ariaLabelledbyEvaluate(node, options, virtualNode) {
      try {
        return !!sanitize_default(arialabelledby_text_default(virtualNode));
      } catch (_unused8) {
        return void 0;
      }
    }
    var aria_labelledby_evaluate_default = ariaLabelledbyEvaluate;
    function ariaLabelEvaluate(node, options, virtualNode) {
      return !!sanitize_default(_arialabelText(virtualNode));
    }
    var aria_label_evaluate_default = ariaLabelEvaluate;
    function duplicateIdEvaluate(node) {
      var id = node.getAttribute('id').trim();
      if (!id) {
        return true;
      }
      var root = get_root_node_default2(node);
      var matchingNodes = Array.from(root.querySelectorAll('[id="'.concat(escape_selector_default(id), '"]'))).filter(function(foundNode) {
        return foundNode !== node;
      });
      if (matchingNodes.length) {
        this.relatedNodes(matchingNodes);
      }
      this.data(id);
      return matchingNodes.length === 0;
    }
    var duplicate_id_evaluate_default = duplicateIdEvaluate;
    function duplicateIdAfter(results) {
      var uniqueIds = [];
      return results.filter(function(r) {
        if (uniqueIds.indexOf(r.data) === -1) {
          uniqueIds.push(r.data);
          return true;
        }
        return false;
      });
    }
    var duplicate_id_after_default = duplicateIdAfter;
    function uniqueFrameTitleEvaluate(node, options, vNode) {
      var title = sanitize_default(vNode.attr('title')).toLowerCase();
      this.data(title);
      return true;
    }
    var unique_frame_title_evaluate_default = uniqueFrameTitleEvaluate;
    function uniqueFrameTitleAfter(results) {
      var titles = {};
      results.forEach(function(r) {
        titles[r.data] = titles[r.data] !== void 0 ? ++titles[r.data] : 0;
      });
      results.forEach(function(r) {
        r.result = !!titles[r.data];
      });
      return results;
    }
    var unique_frame_title_after_default = uniqueFrameTitleAfter;
    function skipLinkEvaluate(node) {
      var target = get_element_by_reference_default(node, 'href');
      if (target) {
        return _isVisibleToScreenReaders(target) || void 0;
      }
      return false;
    }
    var skip_link_evaluate_default = skipLinkEvaluate;
    var implicitAriaLiveRoles = [ 'alert', 'log', 'status' ];
    function regionEvaluate(node, options, virtualNode) {
      this.data({
        isIframe: [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName)
      });
      var regionlessNodes = cache_default.get('regionlessNodes', function() {
        return getRegionlessNodes(options);
      });
      return !regionlessNodes.includes(virtualNode);
    }
    function getRegionlessNodes(options) {
      var regionlessNodes = findRegionlessElms(axe._tree[0], options).map(function(vNode) {
        while (vNode.parent && !vNode.parent._hasRegionDescendant && vNode.parent.actualNode !== document.body) {
          vNode = vNode.parent;
        }
        return vNode;
      }).filter(function(vNode, index, array) {
        return array.indexOf(vNode) === index;
      });
      return regionlessNodes;
    }
    function findRegionlessElms(virtualNode, options) {
      var node = virtualNode.actualNode;
      if (get_role_default(virtualNode) === 'button' || isRegion(virtualNode, options) || [ 'iframe', 'frame' ].includes(virtualNode.props.nodeName) || _isSkipLink(virtualNode.actualNode) && get_element_by_reference_default(virtualNode.actualNode, 'href') || !_isVisibleToScreenReaders(node)) {
        var vNode = virtualNode;
        while (vNode) {
          vNode._hasRegionDescendant = true;
          vNode = vNode.parent;
        }
        if ([ 'iframe', 'frame' ].includes(virtualNode.props.nodeName)) {
          return [ virtualNode ];
        }
        return [];
      } else if (node !== document.body && has_content_default(node, true) && !isShallowlyHidden(virtualNode)) {
        return [ virtualNode ];
      } else {
        return virtualNode.children.filter(function(_ref96) {
          var actualNode = _ref96.actualNode;
          return actualNode.nodeType === 1;
        }).map(function(vNode) {
          return findRegionlessElms(vNode, options);
        }).reduce(function(a2, b2) {
          return a2.concat(b2);
        }, []);
      }
    }
    function isShallowlyHidden(virtualNode) {
      return [ 'none', 'presentation' ].includes(get_role_default(virtualNode)) && !hasChildTextNodes(virtualNode);
    }
    function isRegion(virtualNode, options) {
      var node = virtualNode.actualNode;
      var role = get_role_default(virtualNode);
      var ariaLive = (node.getAttribute('aria-live') || '').toLowerCase().trim();
      var landmarkRoles2 = get_aria_roles_by_type_default('landmark');
      if ([ 'assertive', 'polite' ].includes(ariaLive) || implicitAriaLiveRoles.includes(role)) {
        return true;
      }
      if (landmarkRoles2.includes(role)) {
        return true;
      }
      if (options.regionMatcher && matches_default2(virtualNode, options.regionMatcher)) {
        return true;
      }
      return false;
    }
    function regionAfter(results) {
      var iframeResults = results.filter(function(r) {
        return r.data.isIframe;
      });
      results.forEach(function(r) {
        if (r.result || r.node.ancestry.length === 1) {
          return;
        }
        var frameAncestry = r.node.ancestry.slice(0, -1);
        var _iterator15 = _createForOfIteratorHelper(iframeResults), _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
            var iframeResult = _step15.value;
            if (_matchAncestry(frameAncestry, iframeResult.node.ancestry)) {
              r.result = iframeResult.result;
              break;
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      });
      iframeResults.forEach(function(r) {
        if (!r.result) {
          r.result = true;
        }
      });
      return results;
    }
    var region_after_default = regionAfter;
    function normalizeFontWeight(weight) {
      switch (weight) {
       case 'lighter':
        return 100;

       case 'normal':
        return 400;

       case 'bold':
        return 700;

       case 'bolder':
        return 900;
      }
      weight = parseInt(weight);
      return !isNaN(weight) ? weight : 400;
    }
    function getTextContainer(elm) {
      var nextNode = elm;
      var outerText = elm.textContent.trim();
      var innerText = outerText;
      while (innerText === outerText && nextNode !== void 0) {
        var _i35 = -1;
        elm = nextNode;
        if (elm.children.length === 0) {
          return elm;
        }
        do {
          _i35++;
          innerText = elm.children[_i35].textContent.trim();
        } while (innerText === '' && _i35 + 1 < elm.children.length);
        nextNode = elm.children[_i35];
      }
      return elm;
    }
    function getStyleValues(node) {
      var style = window.getComputedStyle(getTextContainer(node));
      return {
        fontWeight: normalizeFontWeight(style.getPropertyValue('font-weight')),
        fontSize: parseInt(style.getPropertyValue('font-size')),
        isItalic: style.getPropertyValue('font-style') === 'italic'
      };
    }
    function isHeaderStyle(styleA, styleB, margins) {
      return margins.reduce(function(out, margin) {
        return out || (!margin.size || styleA.fontSize / margin.size > styleB.fontSize) && (!margin.weight || styleA.fontWeight - margin.weight > styleB.fontWeight) && (!margin.italic || styleA.isItalic && !styleB.isItalic);
      }, false);
    }
    function pAsHeadingEvaluate(node, options, virtualNode) {
      var siblings = Array.from(node.parentNode.children);
      var currentIndex = siblings.indexOf(node);
      options = options || {};
      var margins = options.margins || [];
      var nextSibling = siblings.slice(currentIndex + 1).find(function(elm) {
        return elm.nodeName.toUpperCase() === 'P';
      });
      var prevSibling = siblings.slice(0, currentIndex).reverse().find(function(elm) {
        return elm.nodeName.toUpperCase() === 'P';
      });
      var currStyle = getStyleValues(node);
      var nextStyle = nextSibling ? getStyleValues(nextSibling) : null;
      var prevStyle = prevSibling ? getStyleValues(prevSibling) : null;
      var optionsPassLength = options.passLength;
      var optionsFailLength = options.failLength;
      var headingLength = node.textContent.trim().length;
      var paragraphLength = nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.textContent.trim().length;
      if (headingLength > paragraphLength * optionsPassLength) {
        return true;
      }
      if (!nextStyle || !isHeaderStyle(currStyle, nextStyle, margins)) {
        return true;
      }
      var blockquote = find_up_virtual_default(virtualNode, 'blockquote');
      if (blockquote && blockquote.nodeName.toUpperCase() === 'BLOCKQUOTE') {
        return void 0;
      }
      if (prevStyle && !isHeaderStyle(currStyle, prevStyle, margins)) {
        return void 0;
      }
      if (headingLength > paragraphLength * optionsFailLength) {
        return void 0;
      }
      return false;
    }
    var p_as_heading_evaluate_default = pAsHeadingEvaluate;
    var separatorRegex = /[;,\s]/;
    var validRedirectNumRegex = /^[0-9.]+$/;
    function metaRefreshEvaluate(node, options, virtualNode) {
      var _ref97 = options || {}, minDelay = _ref97.minDelay, maxDelay = _ref97.maxDelay;
      var content = (virtualNode.attr('content') || '').trim();
      var _content$split = content.split(separatorRegex), _content$split2 = _slicedToArray(_content$split, 1), redirectStr = _content$split2[0];
      if (!redirectStr.match(validRedirectNumRegex)) {
        return true;
      }
      var redirectDelay = parseFloat(redirectStr);
      this.data({
        redirectDelay: redirectDelay
      });
      if (typeof minDelay === 'number' && redirectDelay <= options.minDelay) {
        return true;
      }
      if (typeof maxDelay === 'number' && redirectDelay > options.maxDelay) {
        return true;
      }
      return false;
    }
    function internalLinkPresentEvaluate(node, options, virtualNode) {
      var links = query_selector_all_default(virtualNode, 'a[href]');
      return links.some(function(vLink) {
        return /^#[^/!]/.test(vLink.attr('href'));
      });
    }
    var internal_link_present_evaluate_default = internalLinkPresentEvaluate;
    var commons_exports = {};
    __export(commons_exports, {
      aria: function aria() {
        return aria_exports;
      },
      color: function color() {
        return color_exports;
      },
      dom: function dom() {
        return dom_exports;
      },
      forms: function forms() {
        return forms_exports;
      },
      matches: function matches() {
        return matches_default2;
      },
      math: function math() {
        return math_exports;
      },
      standards: function standards() {
        return standards_exports;
      },
      table: function table() {
        return table_exports;
      },
      text: function text() {
        return text_exports;
      },
      utils: function utils() {
        return utils_exports;
      }
    });
    var color_exports = {};
    __export(color_exports, {
      Color: function Color() {
        return color_default;
      },
      centerPointOfRect: function centerPointOfRect() {
        return center_point_of_rect_default;
      },
      elementHasImage: function elementHasImage() {
        return element_has_image_default;
      },
      elementIsDistinct: function elementIsDistinct() {
        return element_is_distinct_default;
      },
      filteredRectStack: function filteredRectStack() {
        return filtered_rect_stack_default;
      },
      flattenColors: function flattenColors() {
        return _flattenColors;
      },
      flattenShadowColors: function flattenShadowColors() {
        return _flattenShadowColors;
      },
      getBackgroundColor: function getBackgroundColor() {
        return _getBackgroundColor2;
      },
      getBackgroundStack: function getBackgroundStack() {
        return _getBackgroundStack;
      },
      getContrast: function getContrast() {
        return get_contrast_default;
      },
      getForegroundColor: function getForegroundColor() {
        return _getForegroundColor;
      },
      getOwnBackgroundColor: function getOwnBackgroundColor() {
        return get_own_background_color_default;
      },
      getRectStack: function getRectStack() {
        return get_rect_stack_default;
      },
      getStackingContext: function getStackingContext() {
        return _getStackingContext;
      },
      getStrokeColorsFromShadows: function getStrokeColorsFromShadows() {
        return _getStrokeColorsFromShadows;
      },
      getTextShadowColors: function getTextShadowColors() {
        return _getTextShadowColors;
      },
      hasValidContrastRatio: function hasValidContrastRatio() {
        return has_valid_contrast_ratio_default;
      },
      incompleteData: function incompleteData() {
        return incomplete_data_default;
      },
      parseTextShadows: function parseTextShadows() {
        return _parseTextShadows;
      },
      stackingContextToColor: function stackingContextToColor() {
        return _stackingContextToColor;
      }
    });
    function centerPointOfRect(rect) {
      if (rect.left > window.innerWidth) {
        return void 0;
      }
      if (rect.top > window.innerHeight) {
        return void 0;
      }
      var x = Math.min(Math.ceil(rect.left + rect.width / 2), window.innerWidth - 1);
      var y = Math.min(Math.ceil(rect.top + rect.height / 2), window.innerHeight - 1);
      return {
        x: x,
        y: y
      };
    }
    var center_point_of_rect_default = centerPointOfRect;
    function _getFonts(style) {
      return style.getPropertyValue('font-family').split(/[,;]/g).map(function(font) {
        return font.trim().toLowerCase();
      });
    }
    function elementIsDistinct(node, ancestorNode) {
      var nodeStyle = window.getComputedStyle(node);
      if (nodeStyle.getPropertyValue('background-image') !== 'none') {
        return true;
      }
      var hasBorder = [ 'border-bottom', 'border-top', 'outline' ].reduce(function(result, edge) {
        var borderClr = new color_default();
        borderClr.parseString(nodeStyle.getPropertyValue(edge + '-color'));
        return result || nodeStyle.getPropertyValue(edge + '-style') !== 'none' && parseFloat(nodeStyle.getPropertyValue(edge + '-width')) > 0 && borderClr.alpha !== 0;
      }, false);
      if (hasBorder) {
        return true;
      }
      var parentStyle = window.getComputedStyle(ancestorNode);
      if (_getFonts(nodeStyle)[0] !== _getFonts(parentStyle)[0]) {
        return true;
      }
      var hasStyle = [ 'text-decoration-line', 'text-decoration-style', 'font-weight', 'font-style', 'font-size' ].reduce(function(result, cssProp) {
        return result || nodeStyle.getPropertyValue(cssProp) !== parentStyle.getPropertyValue(cssProp);
      }, false);
      var tDec = nodeStyle.getPropertyValue('text-decoration');
      if (tDec.split(' ').length < 3) {
        hasStyle = hasStyle || tDec !== parentStyle.getPropertyValue('text-decoration');
      }
      return hasStyle;
    }
    var element_is_distinct_default = elementIsDistinct;
    function getRectStack2(elm) {
      var boundingStack = get_element_stack_default(elm);
      var filteredArr = get_text_element_stack_default(elm);
      if (!filteredArr || filteredArr.length <= 1) {
        return [ boundingStack ];
      }
      if (filteredArr.some(function(stack) {
        return stack === void 0;
      })) {
        return null;
      }
      filteredArr.splice(0, 0, boundingStack);
      return filteredArr;
    }
    var get_rect_stack_default = getRectStack2;
    function filteredRectStack(elm) {
      var rectStack = get_rect_stack_default(elm);
      if (rectStack && rectStack.length === 1) {
        return rectStack[0];
      }
      if (rectStack && rectStack.length > 1) {
        var boundingStack = rectStack.shift();
        var isSame;
        rectStack.forEach(function(rectList, index) {
          if (index === 0) {
            return;
          }
          var rectA = rectStack[index - 1], rectB = rectStack[index];
          isSame = rectA.every(function(element, elementIndex) {
            return element === rectB[elementIndex];
          }) || boundingStack.includes(elm);
        });
        if (!isSame) {
          incomplete_data_default.set('bgColor', 'elmPartiallyObscuring');
          return null;
        }
        return rectStack[0];
      }
      incomplete_data_default.set('bgColor', 'outsideViewport');
      return null;
    }
    var filtered_rect_stack_default = filteredRectStack;
    var nonSeparableBlendModes = [ 'hue', 'saturation', 'color', 'luminosity' ];
    var blendFunctions = {
      normal: function normal(Cb, Cs) {
        return Cs;
      },
      multiply: function multiply(Cb, Cs) {
        return Cs * Cb;
      },
      screen: function screen(Cb, Cs) {
        return Cb + Cs - Cb * Cs;
      },
      overlay: function overlay(Cb, Cs) {
        return this['hard-light'](Cs, Cb);
      },
      darken: function darken(Cb, Cs) {
        return Math.min(Cb, Cs);
      },
      lighten: function lighten(Cb, Cs) {
        return Math.max(Cb, Cs);
      },
      'color-dodge': function colorDodge(Cb, Cs) {
        return Cb === 0 ? 0 : Cs === 1 ? 1 : Math.min(1, Cb / (1 - Cs));
      },
      'color-burn': function colorBurn(Cb, Cs) {
        return Cb === 1 ? 1 : Cs === 0 ? 0 : 1 - Math.min(1, (1 - Cb) / Cs);
      },
      'hard-light': function hardLight(Cb, Cs) {
        return Cs <= .5 ? this.multiply(Cb, 2 * Cs) : this.screen(Cb, 2 * Cs - 1);
      },
      'soft-light': function softLight(Cb, Cs) {
        if (Cs <= .5) {
          return Cb - (1 - 2 * Cs) * Cb * (1 - Cb);
        } else {
          var D = Cb <= .25 ? ((16 * Cb - 12) * Cb + 4) * Cb : Math.sqrt(Cb);
          return Cb + (2 * Cs - 1) * (D - Cb);
        }
      },
      difference: function difference(Cb, Cs) {
        return Math.abs(Cb - Cs);
      },
      exclusion: function exclusion(Cb, Cs) {
        return Cb + Cs - 2 * Cb * Cs;
      },
      hue: function hue(Cb, Cs) {
        return Cs.setSaturation(Cb.getSaturation()).setLuminosity(Cb.getLuminosity());
      },
      saturation: function saturation(Cb, Cs) {
        return Cb.setSaturation(Cs.getSaturation()).setLuminosity(Cb.getLuminosity());
      },
      color: function color(Cb, Cs) {
        return Cs.setLuminosity(Cb.getLuminosity());
      },
      luminosity: function luminosity(Cb, Cs) {
        return Cb.setLuminosity(Cs.getLuminosity());
      }
    };
    function _flattenColors(sourceColor, backdrop) {
      var blendMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';
      var blendingResult = blend(backdrop, sourceColor, blendMode);
      var r = simpleAlphaCompositing(sourceColor.red, sourceColor.alpha, backdrop.red, backdrop.alpha, blendingResult.r * 255);
      var g2 = simpleAlphaCompositing(sourceColor.green, sourceColor.alpha, backdrop.green, backdrop.alpha, blendingResult.g * 255);
      var b2 = simpleAlphaCompositing(sourceColor.blue, sourceColor.alpha, backdrop.blue, backdrop.alpha, blendingResult.b * 255);
      var \u03b1o = clamp2(sourceColor.alpha + backdrop.alpha * (1 - sourceColor.alpha), 0, 1);
      if (\u03b1o === 0) {
        return new color_default(r, g2, b2, \u03b1o);
      }
      var Cr = Math.round(r / \u03b1o);
      var Cg = Math.round(g2 / \u03b1o);
      var Cb = Math.round(b2 / \u03b1o);
      return new color_default(Cr, Cg, Cb, \u03b1o);
    }
    function simpleAlphaCompositing(Cs, \u03b1s, Cb, \u03b1b, blendingResult) {
      return \u03b1s * (1 - \u03b1b) * Cs + \u03b1s * \u03b1b * blendingResult + (1 - \u03b1s) * \u03b1b * Cb;
    }
    function clamp2(value, min, max2) {
      return Math.min(Math.max(min, value), max2);
    }
    function blend(Cb, Cs, blendMode) {
      if (nonSeparableBlendModes.includes(blendMode)) {
        return blendFunctions[blendMode](Cb, Cs);
      }
      var C = new color_default();
      [ 'r', 'g', 'b' ].forEach(function(channel) {
        C[channel] = blendFunctions[blendMode](Cb[channel], Cs[channel]);
      });
      return C;
    }
    function _flattenShadowColors(fgColor, bgColor) {
      var alpha = fgColor.alpha;
      var r = (1 - alpha) * bgColor.red + alpha * fgColor.red;
      var g2 = (1 - alpha) * bgColor.green + alpha * fgColor.green;
      var b2 = (1 - alpha) * bgColor.blue + alpha * fgColor.blue;
      var a2 = fgColor.alpha + bgColor.alpha * (1 - fgColor.alpha);
      return new color_default(r, g2, b2, a2);
    }
    function _getBackgroundStack(node) {
      var stacks = get_text_element_stack_default(node).map(function(stack) {
        stack = reduce_to_elements_below_floating_default(stack, node);
        stack = sortPageBackground(stack);
        return stack;
      });
      for (var index = 0; index < stacks.length; index++) {
        var stack = stacks[index];
        if (stack[0] !== node) {
          incomplete_data_default.set('bgColor', 'bgOverlap');
          return null;
        }
        if (index !== 0 && !shallowArraysEqual(stack, stacks[0])) {
          incomplete_data_default.set('bgColor', 'elmPartiallyObscuring');
          return null;
        }
      }
      return stacks[0] || null;
    }
    function sortPageBackground(elmStack) {
      var bodyIndex = elmStack.indexOf(document.body);
      var bgNodes = elmStack;
      var htmlBgColor = get_own_background_color_default(window.getComputedStyle(document.documentElement));
      if (bodyIndex > 1 && htmlBgColor.alpha === 0 && !element_has_image_default(document.documentElement)) {
        if (bodyIndex > 1) {
          bgNodes.splice(bodyIndex, 1);
          bgNodes.push(document.body);
        }
        var htmlIndex = bgNodes.indexOf(document.documentElement);
        if (htmlIndex > 0) {
          bgNodes.splice(htmlIndex, 1);
          bgNodes.push(document.documentElement);
        }
      }
      return bgNodes;
    }
    function shallowArraysEqual(a2, b2) {
      if (a2 === b2) {
        return true;
      }
      if (a2 === null || b2 === null) {
        return false;
      }
      if (a2.length !== b2.length) {
        return false;
      }
      for (var _i36 = 0; _i36 < a2.length; ++_i36) {
        if (a2[_i36] !== b2[_i36]) {
          return false;
        }
      }
      return true;
    }
    var SHADOW_STROKE_ALPHA = .54;
    var VISIBLE_SHADOW_MIN_PX = .5;
    var OPAQUE_STROKE_OFFSET_MIN_PX = 1.5;
    var edges = [ 'top', 'right', 'bottom', 'left' ];
    function _getStrokeColorsFromShadows(parsedShadows) {
      var _ref98 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref98$ignoreEdgeCoun = _ref98.ignoreEdgeCount, ignoreEdgeCount = _ref98$ignoreEdgeCoun === void 0 ? false : _ref98$ignoreEdgeCoun;
      var shadowMap = getShadowColorsMap(parsedShadows);
      var shadowsByColor = Object.entries(shadowMap).map(function(_ref99) {
        var _ref100 = _slicedToArray(_ref99, 2), colorStr = _ref100[0], sides = _ref100[1];
        var edgeCount = edges.filter(function(side) {
          return sides[side].length !== 0;
        }).length;
        return {
          colorStr: colorStr,
          sides: sides,
          edgeCount: edgeCount
        };
      });
      if (!ignoreEdgeCount && shadowsByColor.some(function(_ref101) {
        var edgeCount = _ref101.edgeCount;
        return edgeCount > 1 && edgeCount < 4;
      })) {
        return null;
      }
      return shadowsByColor.map(shadowGroupToColor).filter(function(shadow) {
        return shadow !== null;
      });
    }
    function getShadowColorsMap(parsedShadows) {
      var colorMap = {};
      var _iterator16 = _createForOfIteratorHelper(parsedShadows), _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
          var _colorMap$colorStr;
          var _step16$value = _step16.value, colorStr = _step16$value.colorStr, pixels = _step16$value.pixels;
          (_colorMap$colorStr = colorMap[colorStr]) !== null && _colorMap$colorStr !== void 0 ? _colorMap$colorStr : colorMap[colorStr] = {
            top: [],
            right: [],
            bottom: [],
            left: []
          };
          var borders = colorMap[colorStr];
          var _pixels = _slicedToArray(pixels, 2), offsetX = _pixels[0], offsetY = _pixels[1];
          if (offsetX > VISIBLE_SHADOW_MIN_PX) {
            borders.right.push(offsetX);
          } else if (-offsetX > VISIBLE_SHADOW_MIN_PX) {
            borders.left.push(-offsetX);
          }
          if (offsetY > VISIBLE_SHADOW_MIN_PX) {
            borders.bottom.push(offsetY);
          } else if (-offsetY > VISIBLE_SHADOW_MIN_PX) {
            borders.top.push(-offsetY);
          }
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      return colorMap;
    }
    function shadowGroupToColor(_ref102) {
      var colorStr = _ref102.colorStr, sides = _ref102.sides, edgeCount = _ref102.edgeCount;
      if (edgeCount !== 4) {
        return null;
      }
      var strokeColor = new color_default();
      strokeColor.parseString(colorStr);
      var density = 0;
      var isSolid = true;
      edges.forEach(function(edge) {
        density += sides[edge].length / 4;
        isSolid && (isSolid = sides[edge].every(function(offset) {
          return offset > OPAQUE_STROKE_OFFSET_MIN_PX;
        }));
      });
      if (!isSolid) {
        strokeColor.alpha = 1 - Math.pow(SHADOW_STROKE_ALPHA, density);
      }
      return strokeColor;
    }
    function _parseTextShadows(textShadow) {
      var current = {
        pixels: []
      };
      var str = textShadow.trim();
      var shadows = [ current ];
      if (!str) {
        return [];
      }
      while (str) {
        var colorMatch = str.match(/^[a-z]+(\([^)]+\))?/i) || str.match(/^#[0-9a-f]+/i);
        var pixelMatch = str.match(/^([0-9.-]+)px/i) || str.match(/^(0)/);
        if (colorMatch) {
          assert_default(!current.colorStr, 'Multiple colors identified in text-shadow: '.concat(textShadow));
          str = str.replace(colorMatch[0], '').trim();
          current.colorStr = colorMatch[0];
        } else if (pixelMatch) {
          assert_default(current.pixels.length < 3, 'Too many pixel units in text-shadow: '.concat(textShadow));
          str = str.replace(pixelMatch[0], '').trim();
          var pixelUnit = parseFloat((pixelMatch[1][0] === '.' ? '0' : '') + pixelMatch[1]);
          current.pixels.push(pixelUnit);
        } else if (str[0] === ',') {
          assert_default(current.pixels.length >= 2, 'Missing pixel value in text-shadow: '.concat(textShadow));
          current = {
            pixels: []
          };
          shadows.push(current);
          str = str.substr(1).trim();
        } else {
          throw new Error('Unable to process text-shadows: '.concat(str));
        }
      }
      shadows.forEach(function(_ref103) {
        var pixels = _ref103.pixels;
        if (pixels.length === 2) {
          pixels.push(0);
        }
      });
      return shadows;
    }
    function _getTextShadowColors(node) {
      var _ref104 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minRatio = _ref104.minRatio, maxRatio = _ref104.maxRatio, ignoreEdgeCount = _ref104.ignoreEdgeCount;
      var shadowColors = [];
      var style = window.getComputedStyle(node);
      var textShadow = style.getPropertyValue('text-shadow');
      if (textShadow === 'none') {
        return shadowColors;
      }
      var fontSizeStr = style.getPropertyValue('font-size');
      var fontSize = parseInt(fontSizeStr);
      assert_default(isNaN(fontSize) === false, 'Unable to determine font-size value '.concat(fontSizeStr));
      var thinShadows = [];
      var shadows = _parseTextShadows(textShadow);
      var _iterator17 = _createForOfIteratorHelper(shadows), _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
          var shadow = _step17.value;
          var colorStr = shadow.colorStr || style.getPropertyValue('color');
          var _shadow$pixels = _slicedToArray(shadow.pixels, 3), offsetX = _shadow$pixels[0], offsetY = _shadow$pixels[1], _shadow$pixels$ = _shadow$pixels[2], blurRadius = _shadow$pixels$ === void 0 ? 0 : _shadow$pixels$;
          if (maxRatio && blurRadius >= fontSize * maxRatio) {
            continue;
          }
          if (minRatio && blurRadius < fontSize * minRatio) {
            thinShadows.push({
              colorStr: colorStr,
              pixels: shadow.pixels
            });
            continue;
          }
          if (thinShadows.length > 0) {
            var _strokeColors = _getStrokeColorsFromShadows(thinShadows, {
              ignoreEdgeCount: ignoreEdgeCount
            });
            if (_strokeColors === null) {
              return null;
            }
            shadowColors.push.apply(shadowColors, _toConsumableArray(_strokeColors));
            thinShadows.splice(0, thinShadows.length);
          }
          var _color3 = textShadowColor({
            colorStr: colorStr,
            offsetX: offsetX,
            offsetY: offsetY,
            blurRadius: blurRadius,
            fontSize: fontSize
          });
          shadowColors.push(_color3);
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      if (thinShadows.length > 0) {
        var strokeColors = _getStrokeColorsFromShadows(thinShadows, {
          ignoreEdgeCount: ignoreEdgeCount
        });
        if (strokeColors === null) {
          return null;
        }
        shadowColors.push.apply(shadowColors, _toConsumableArray(strokeColors));
      }
      return shadowColors;
    }
    function textShadowColor(_ref105) {
      var colorStr = _ref105.colorStr, offsetX = _ref105.offsetX, offsetY = _ref105.offsetY, blurRadius = _ref105.blurRadius, fontSize = _ref105.fontSize;
      if (offsetX > blurRadius || offsetY > blurRadius) {
        return new color_default(0, 0, 0, 0);
      }
      var shadowColor = new color_default();
      shadowColor.parseString(colorStr);
      shadowColor.alpha *= blurRadiusToAlpha(blurRadius, fontSize);
      return shadowColor;
    }
    function blurRadiusToAlpha(blurRadius, fontSize) {
      if (blurRadius === 0) {
        return 1;
      }
      var relativeBlur = blurRadius / fontSize;
      return .185 / (relativeBlur + .4);
    }
    function _getStackingContext(elm, elmStack) {
      var _elmStack;
      var virtualNode = get_node_from_tree_default(elm);
      if (virtualNode._stackingContext) {
        return virtualNode._stackingContext;
      }
      var stackingContext = [];
      var contextMap = new Map();
      elmStack = (_elmStack = elmStack) !== null && _elmStack !== void 0 ? _elmStack : _getBackgroundStack(elm);
      elmStack.forEach(function(bgElm) {
        var _stackingOrder2;
        var bgVNode = get_node_from_tree_default(bgElm);
        var bgColor = getOwnBackgroundColor2(bgVNode);
        var stackingOrder = bgVNode._stackingOrder.filter(function(_ref106) {
          var vNode = _ref106.vNode;
          return !!vNode;
        });
        stackingOrder.forEach(function(_ref107, index) {
          var _stackingOrder;
          var vNode = _ref107.vNode;
          var ancestorVNode2 = (_stackingOrder = stackingOrder[index - 1]) === null || _stackingOrder === void 0 ? void 0 : _stackingOrder.vNode;
          var context2 = addToStackingContext(contextMap, vNode, ancestorVNode2);
          if (index === 0 && !contextMap.get(vNode)) {
            stackingContext.unshift(context2);
          }
          contextMap.set(vNode, context2);
        });
        var ancestorVNode = (_stackingOrder2 = stackingOrder[stackingOrder.length - 1]) === null || _stackingOrder2 === void 0 ? void 0 : _stackingOrder2.vNode;
        var context = addToStackingContext(contextMap, bgVNode, ancestorVNode);
        if (!stackingOrder.length) {
          stackingContext.unshift(context);
        }
        context.bgColor = bgColor;
      });
      virtualNode._stackingContext = stackingContext;
      return stackingContext;
    }
    function _stackingContextToColor(context) {
      var _context$descendants;
      if (!((_context$descendants = context.descendants) !== null && _context$descendants !== void 0 && _context$descendants.length)) {
        var color2 = context.bgColor;
        color2.alpha *= context.opacity;
        return {
          color: color2,
          blendMode: context.blendMode
        };
      }
      var sourceColor = context.descendants.reduce(reduceToColor, createStackingContext2());
      var color = _flattenColors(sourceColor, context.bgColor, context.descendants[0].blendMode);
      color.alpha *= context.opacity;
      return {
        color: color,
        blendMode: context.blendMode
      };
    }
    function reduceToColor(backdropContext, sourceContext) {
      var backdrop;
      if (backdropContext instanceof color_default) {
        backdrop = backdropContext;
      } else {
        backdrop = _stackingContextToColor(backdropContext).color;
      }
      var sourceColor = _stackingContextToColor(sourceContext).color;
      return _flattenColors(sourceColor, backdrop, sourceContext.blendMode);
    }
    function createStackingContext2(vNode, ancestorContext) {
      var _vNode$getComputedSty;
      return {
        vNode: vNode,
        ancestor: ancestorContext,
        opacity: parseFloat((_vNode$getComputedSty = vNode === null || vNode === void 0 ? void 0 : vNode.getComputedStylePropertyValue('opacity')) !== null && _vNode$getComputedSty !== void 0 ? _vNode$getComputedSty : 1),
        bgColor: new color_default(0, 0, 0, 0),
        blendMode: normalizeBlendMode(vNode === null || vNode === void 0 ? void 0 : vNode.getComputedStylePropertyValue('mix-blend-mode')),
        descendants: []
      };
    }
    function normalizeBlendMode(blendmode) {
      return !!blendmode ? blendmode : void 0;
    }
    function addToStackingContext(contextMap, vNode, ancestorVNode) {
      var _contextMap$get;
      var ancestorContext = contextMap.get(ancestorVNode);
      var context = (_contextMap$get = contextMap.get(vNode)) !== null && _contextMap$get !== void 0 ? _contextMap$get : createStackingContext2(vNode, ancestorContext);
      if (ancestorContext && ancestorVNode !== vNode && !ancestorContext.descendants.includes(context)) {
        ancestorContext.descendants.unshift(context);
      }
      return context;
    }
    function getOwnBackgroundColor2(vNode) {
      var bgColor = new color_default();
      bgColor.parseString(vNode.getComputedStylePropertyValue('background-color'));
      return bgColor;
    }
    function _getBackgroundColor2(elm) {
      var bgElms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var shadowOutlineEmMax = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : .1;
      var vNode = get_node_from_tree_default(elm);
      var bgColorCache = vNode._cache.getBackgroundColor;
      if (bgColorCache) {
        bgElms.push.apply(bgElms, _toConsumableArray(bgColorCache.bgElms));
        incomplete_data_default.set('bgColor', bgColorCache.incompleteData);
        return bgColorCache.bgColor;
      }
      var bgColor = _getBackgroundColor(elm, bgElms, shadowOutlineEmMax);
      vNode._cache.getBackgroundColor = {
        bgColor: bgColor,
        bgElms: bgElms,
        incompleteData: incomplete_data_default.get('bgColor')
      };
      return bgColor;
    }
    function _getBackgroundColor(elm, bgElms, shadowOutlineEmMax) {
      var _getTextShadowColors2, _bgColors;
      var elmStack = _getBackgroundStack(elm);
      if (!elmStack) {
        return null;
      }
      var textRects = get_visible_child_text_rects_default(elm);
      var bgColors = (_getTextShadowColors2 = _getTextShadowColors(elm, {
        minRatio: shadowOutlineEmMax,
        ignoreEdgeCount: true
      })) !== null && _getTextShadowColors2 !== void 0 ? _getTextShadowColors2 : [];
      if (bgColors.length) {
        bgColors = [ {
          color: bgColors.reduce(_flattenShadowColors)
        } ];
      }
      for (var _i37 = 0; _i37 < elmStack.length; _i37++) {
        var bgElm = elmStack[_i37];
        var bgElmStyle = window.getComputedStyle(bgElm);
        if (element_has_image_default(bgElm, bgElmStyle)) {
          bgElms.push(bgElm);
          return null;
        }
        var bgColor = get_own_background_color_default(bgElmStyle);
        if (bgColor.alpha === 0) {
          continue;
        }
        if (bgElmStyle.getPropertyValue('display') !== 'inline' && !fullyEncompasses(bgElm, textRects)) {
          bgElms.push(bgElm);
          incomplete_data_default.set('bgColor', 'elmPartiallyObscured');
          return null;
        }
        bgElms.push(bgElm);
        if (bgColor.alpha === 1) {
          break;
        }
      }
      var stackingContext = _getStackingContext(elm, elmStack);
      bgColors = stackingContext.map(_stackingContextToColor).concat(bgColors);
      var pageBgs = getPageBackgroundColors(elm, elmStack.includes(document.body));
      (_bgColors = bgColors).unshift.apply(_bgColors, _toConsumableArray(pageBgs));
      if (bgColors.length === 0) {
        return new color_default(255, 255, 255, 1);
      }
      var blendedColor = bgColors.reduce(function(bgColor, fgColor) {
        return _flattenColors(fgColor.color, bgColor.color instanceof color_default ? bgColor.color : bgColor, fgColor.blendMode);
      });
      return _flattenColors(blendedColor.color instanceof color_default ? blendedColor.color : blendedColor, new color_default(255, 255, 255, 1));
    }
    function fullyEncompasses(node, rects) {
      rects = Array.isArray(rects) ? rects : [ rects ];
      var nodeRect = node.getBoundingClientRect();
      var right = nodeRect.right, bottom = nodeRect.bottom;
      var style = window.getComputedStyle(node);
      var overflow = style.getPropertyValue('overflow');
      if ([ 'scroll', 'auto' ].includes(overflow) || node instanceof window.HTMLHtmlElement) {
        right = nodeRect.left + node.scrollWidth;
        bottom = nodeRect.top + node.scrollHeight;
      }
      return rects.every(function(rect) {
        return rect.top >= nodeRect.top && rect.bottom <= bottom && rect.left >= nodeRect.left && rect.right <= right;
      });
    }
    function normalizeBlendMode2(blendmode) {
      return !!blendmode ? blendmode : void 0;
    }
    function getPageBackgroundColors(elm, stackContainsBody) {
      var pageColors = [];
      if (!stackContainsBody) {
        var html = document.documentElement;
        var body = document.body;
        var htmlStyle = window.getComputedStyle(html);
        var bodyStyle = window.getComputedStyle(body);
        var htmlBgColor = get_own_background_color_default(htmlStyle);
        var bodyBgColor = get_own_background_color_default(bodyStyle);
        var bodyBgColorApplies = bodyBgColor.alpha !== 0 && fullyEncompasses(body, elm.getBoundingClientRect());
        if (bodyBgColor.alpha !== 0 && htmlBgColor.alpha === 0 || bodyBgColorApplies && bodyBgColor.alpha !== 1) {
          pageColors.unshift({
            color: bodyBgColor,
            blendMode: normalizeBlendMode2(bodyStyle.getPropertyValue('mix-blend-mode'))
          });
        }
        if (htmlBgColor.alpha !== 0 && (!bodyBgColorApplies || bodyBgColorApplies && bodyBgColor.alpha !== 1)) {
          pageColors.unshift({
            color: htmlBgColor,
            blendMode: normalizeBlendMode2(htmlStyle.getPropertyValue('mix-blend-mode'))
          });
        }
      }
      return pageColors;
    }
    function getContrast(bgColor, fgColor) {
      if (!fgColor || !bgColor) {
        return null;
      }
      if (fgColor.alpha < 1) {
        fgColor = _flattenColors(fgColor, bgColor);
      }
      var bL = bgColor.getRelativeLuminance();
      var fL = fgColor.getRelativeLuminance();
      return (Math.max(fL, bL) + .05) / (Math.min(fL, bL) + .05);
    }
    var get_contrast_default = getContrast;
    function _getForegroundColor(node, _, bgColor) {
      var _bgColor;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var nodeStyle = window.getComputedStyle(node);
      var colorStack = [ function() {
        return getStrokeColor(nodeStyle, options);
      }, function() {
        return getTextColor(nodeStyle);
      }, function() {
        return _getTextShadowColors(node, {
          minRatio: 0
        });
      } ];
      var fgColors = [];
      for (var _i38 = 0, _colorStack = colorStack; _i38 < _colorStack.length; _i38++) {
        var colorFn = _colorStack[_i38];
        var _color4 = colorFn();
        if (!_color4) {
          continue;
        }
        fgColors = fgColors.concat(_color4);
        if (_color4.alpha === 1) {
          break;
        }
      }
      var fgColor = fgColors.reduce(function(source, backdrop) {
        return _flattenColors(source, backdrop);
      });
      (_bgColor = bgColor) !== null && _bgColor !== void 0 ? _bgColor : bgColor = _getBackgroundColor2(node, []);
      if (bgColor === null) {
        var reason = incomplete_data_default.get('bgColor');
        incomplete_data_default.set('fgColor', reason);
        return null;
      }
      var stackingContexts = _getStackingContext(node);
      var context = findNodeInContexts(stackingContexts, node);
      return _flattenColors(calculateBlendedForegroundColor(fgColor, context, stackingContexts), new color_default(255, 255, 255, 1));
    }
    function getTextColor(nodeStyle) {
      return new color_default().parseString(nodeStyle.getPropertyValue('-webkit-text-fill-color') || nodeStyle.getPropertyValue('color'));
    }
    function getStrokeColor(nodeStyle, _ref108) {
      var _ref108$textStrokeEmM = _ref108.textStrokeEmMin, textStrokeEmMin = _ref108$textStrokeEmM === void 0 ? 0 : _ref108$textStrokeEmM;
      var strokeWidth = parseFloat(nodeStyle.getPropertyValue('-webkit-text-stroke-width'));
      if (strokeWidth === 0) {
        return null;
      }
      var fontSize = nodeStyle.getPropertyValue('font-size');
      var relativeStrokeWidth = strokeWidth / parseFloat(fontSize);
      if (isNaN(relativeStrokeWidth) || relativeStrokeWidth < textStrokeEmMin) {
        return null;
      }
      var strokeColor = nodeStyle.getPropertyValue('-webkit-text-stroke-color');
      return new color_default().parseString(strokeColor);
    }
    function calculateBlendedForegroundColor(fgColor, context, stackingContexts) {
      while (context) {
        var _context$ancestor;
        if (context.opacity === 1 && context.ancestor) {
          context = context.ancestor;
          continue;
        }
        fgColor.alpha *= context.opacity;
        var stack = ((_context$ancestor = context.ancestor) === null || _context$ancestor === void 0 ? void 0 : _context$ancestor.descendants) || stackingContexts;
        if (context.opacity !== 1) {
          stack = stack.slice(0, stack.indexOf(context));
        }
        var bgColors = stack.map(_stackingContextToColor);
        if (!bgColors.length) {
          context = context.ancestor;
          continue;
        }
        var bgColor = bgColors.reduce(function(backdrop, source) {
          return _flattenColors(source.color, backdrop.color instanceof color_default ? backdrop.color : backdrop);
        }, {
          color: new color_default(0, 0, 0, 0),
          blendMode: 'normal'
        });
        fgColor = _flattenColors(fgColor, bgColor);
        context = context.ancestor;
      }
      return fgColor;
    }
    function findNodeInContexts(contexts, node) {
      var _iterator18 = _createForOfIteratorHelper(contexts), _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
          var _context$vNode;
          var context = _step18.value;
          if (((_context$vNode = context.vNode) === null || _context$vNode === void 0 ? void 0 : _context$vNode.actualNode) === node) {
            return context;
          }
          var found = findNodeInContexts(context.descendants, node);
          if (found) {
            return found;
          }
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    }
    function hasValidContrastRatio(bg, fg, fontSize, isBold) {
      var contrast2 = get_contrast_default(bg, fg);
      var isSmallFont = isBold && Math.ceil(fontSize * 72) / 96 < 14 || !isBold && Math.ceil(fontSize * 72) / 96 < 18;
      var expectedContrastRatio = isSmallFont ? 4.5 : 3;
      return {
        isValid: contrast2 > expectedContrastRatio,
        contrastRatio: contrast2,
        expectedContrastRatio: expectedContrastRatio
      };
    }
    var has_valid_contrast_ratio_default = hasValidContrastRatio;
    var forms_exports = {};
    __export(forms_exports, {
      isAriaCombobox: function isAriaCombobox() {
        return is_aria_combobox_default;
      },
      isAriaListbox: function isAriaListbox() {
        return is_aria_listbox_default;
      },
      isAriaRange: function isAriaRange() {
        return is_aria_range_default;
      },
      isAriaTextbox: function isAriaTextbox() {
        return is_aria_textbox_default;
      },
      isDisabled: function isDisabled() {
        return is_disabled_default;
      },
      isNativeSelect: function isNativeSelect() {
        return is_native_select_default;
      },
      isNativeTextbox: function isNativeTextbox() {
        return is_native_textbox_default;
      }
    });
    var disabledNodeNames = [ 'fieldset', 'button', 'select', 'input', 'textarea' ];
    function isDisabled(virtualNode) {
      var disabledState = virtualNode._isDisabled;
      if (typeof disabledState === 'boolean') {
        return disabledState;
      }
      var nodeName2 = virtualNode.props.nodeName;
      var ariaDisabled = virtualNode.attr('aria-disabled');
      if (disabledNodeNames.includes(nodeName2) && virtualNode.hasAttr('disabled')) {
        disabledState = true;
      } else if (ariaDisabled) {
        disabledState = ariaDisabled.toLowerCase() === 'true';
      } else if (virtualNode.parent) {
        disabledState = isDisabled(virtualNode.parent);
      } else {
        disabledState = false;
      }
      virtualNode._isDisabled = disabledState;
      return disabledState;
    }
    var is_disabled_default = isDisabled;
    function identicalLinksSamePurposeEvaluate(node, options, virtualNode) {
      var accText = text_exports.accessibleTextVirtual(virtualNode);
      var name = text_exports.sanitize(text_exports.removeUnicode(accText, {
        emoji: true,
        nonBmp: true,
        punctuations: true
      })).toLowerCase();
      if (!name) {
        return void 0;
      }
      var afterData = {
        name: name,
        urlProps: dom_exports.urlPropsFromAttribute(node, 'href')
      };
      this.data(afterData);
      this.relatedNodes([ node ]);
      return true;
    }
    var identical_links_same_purpose_evaluate_default = identicalLinksSamePurposeEvaluate;
    function isIdenticalObject(a2, b2) {
      if (!a2 || !b2) {
        return false;
      }
      var aProps = Object.getOwnPropertyNames(a2);
      var bProps = Object.getOwnPropertyNames(b2);
      if (aProps.length !== bProps.length) {
        return false;
      }
      var result = aProps.every(function(propName) {
        var aValue = a2[propName];
        var bValue = b2[propName];
        if (_typeof(aValue) !== _typeof(bValue)) {
          return false;
        }
        if (_typeof(aValue) === 'object' || _typeof(bValue) === 'object') {
          return isIdenticalObject(aValue, bValue);
        }
        return aValue === bValue;
      });
      return result;
    }
    function identicalLinksSamePurposeAfter(results) {
      if (results.length < 2) {
        return results;
      }
      var incompleteResults = results.filter(function(_ref109) {
        var result = _ref109.result;
        return result !== void 0;
      });
      var uniqueResults = [];
      var nameMap = {};
      var _loop8 = function _loop8(index) {
        var _currentResult$relate;
        var currentResult = incompleteResults[index];
        var _currentResult$data = currentResult.data, name = _currentResult$data.name, urlProps = _currentResult$data.urlProps;
        if (nameMap[name]) {
          return 1;
        }
        var sameNameResults = incompleteResults.filter(function(_ref110, resultNum) {
          var data = _ref110.data;
          return data.name === name && resultNum !== index;
        });
        var isSameUrl = sameNameResults.every(function(_ref111) {
          var data = _ref111.data;
          return isIdenticalObject(data.urlProps, urlProps);
        });
        if (sameNameResults.length && !isSameUrl) {
          currentResult.result = void 0;
        }
        currentResult.relatedNodes = [];
        (_currentResult$relate = currentResult.relatedNodes).push.apply(_currentResult$relate, _toConsumableArray(sameNameResults.map(function(node) {
          return node.relatedNodes[0];
        })));
        nameMap[name] = sameNameResults;
        uniqueResults.push(currentResult);
      };
      for (var index = 0; index < incompleteResults.length; index++) {
        if (_loop8(index)) {
          continue;
        }
      }
      return uniqueResults;
    }
    var identical_links_same_purpose_after_default = identicalLinksSamePurposeAfter;
    function getLevel(vNode) {
      var role = get_role_default(vNode);
      var headingRole = role && role.includes('heading');
      var ariaHeadingLevel = vNode.attr('aria-level');
      var ariaLevel = parseInt(ariaHeadingLevel, 10);
      var _ref112 = vNode.props.nodeName.match(/h(\d)/) || [], _ref113 = _slicedToArray(_ref112, 2), headingLevel = _ref113[1];
      if (!headingRole) {
        return -1;
      }
      if (headingLevel && !ariaHeadingLevel) {
        return parseInt(headingLevel, 10);
      }
      if (isNaN(ariaLevel) || ariaLevel < 1) {
        if (headingLevel) {
          return parseInt(headingLevel, 10);
        }
        return 2;
      }
      if (ariaLevel) {
        return ariaLevel;
      }
      return -1;
    }
    function headingOrderEvaluate() {
      var headingOrder = cache_default.get('headingOrder');
      if (headingOrder) {
        return true;
      }
      var selector = 'h1, h2, h3, h4, h5, h6, [role=heading], iframe, frame';
      var vNodes = query_selector_all_filter_default(axe._tree[0], selector, _isVisibleToScreenReaders);
      headingOrder = vNodes.map(function(vNode) {
        return {
          ancestry: [ _getAncestry(vNode.actualNode) ],
          level: getLevel(vNode)
        };
      });
      this.data({
        headingOrder: headingOrder
      });
      cache_default.set('headingOrder', vNodes);
      return true;
    }
    var heading_order_evaluate_default = headingOrderEvaluate;
    function headingOrderAfter(results) {
      var headingOrder = getHeadingOrder(results);
      results.forEach(function(result) {
        result.result = getHeadingOrderOutcome(result, headingOrder);
      });
      return results;
    }
    function getHeadingOrderOutcome(result, headingOrder) {
      var _headingOrder$index$l, _headingOrder$index, _headingOrder$level, _headingOrder;
      var index = findHeadingOrderIndex(headingOrder, result.node.ancestry);
      var currLevel = (_headingOrder$index$l = (_headingOrder$index = headingOrder[index]) === null || _headingOrder$index === void 0 ? void 0 : _headingOrder$index.level) !== null && _headingOrder$index$l !== void 0 ? _headingOrder$index$l : -1;
      var prevLevel = (_headingOrder$level = (_headingOrder = headingOrder[index - 1]) === null || _headingOrder === void 0 ? void 0 : _headingOrder.level) !== null && _headingOrder$level !== void 0 ? _headingOrder$level : -1;
      if (index === 0) {
        return true;
      }
      if (currLevel === -1) {
        return void 0;
      }
      return currLevel - prevLevel <= 1;
    }
    function getHeadingOrder(results) {
      results = _toConsumableArray(results);
      results.sort(function(_ref114, _ref115) {
        var nodeA = _ref114.node;
        var nodeB = _ref115.node;
        return nodeA.ancestry.length - nodeB.ancestry.length;
      });
      var headingOrder = results.reduce(mergeHeadingOrder, []);
      return headingOrder.filter(function(_ref116) {
        var level = _ref116.level;
        return level !== -1;
      });
    }
    function mergeHeadingOrder(mergedHeadingOrder, result) {
      var _result$data;
      var frameHeadingOrder = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.headingOrder;
      var frameAncestry = shortenArray(result.node.ancestry, 1);
      if (!frameHeadingOrder) {
        return mergedHeadingOrder;
      }
      var normalizedHeadingOrder = frameHeadingOrder.map(function(heading) {
        return addFrameToHeadingAncestry(heading, frameAncestry);
      });
      var index = getFrameIndex(mergedHeadingOrder, frameAncestry);
      if (index === -1) {
        mergedHeadingOrder.push.apply(mergedHeadingOrder, _toConsumableArray(normalizedHeadingOrder));
      } else {
        mergedHeadingOrder.splice.apply(mergedHeadingOrder, [ index, 0 ].concat(_toConsumableArray(normalizedHeadingOrder)));
      }
      return mergedHeadingOrder;
    }
    function getFrameIndex(headingOrder, frameAncestry) {
      while (frameAncestry.length) {
        var index = findHeadingOrderIndex(headingOrder, frameAncestry);
        if (index !== -1) {
          return index;
        }
        frameAncestry = shortenArray(frameAncestry, 1);
      }
      return -1;
    }
    function findHeadingOrderIndex(headingOrder, ancestry) {
      return headingOrder.findIndex(function(heading) {
        return _matchAncestry(heading.ancestry, ancestry);
      });
    }
    function addFrameToHeadingAncestry(heading, frameAncestry) {
      var ancestry = frameAncestry.concat(heading.ancestry);
      return _extends({}, heading, {
        ancestry: ancestry
      });
    }
    function shortenArray(arr, spliceLength) {
      return arr.slice(0, arr.length - spliceLength);
    }
    function targetSizeEvaluate(node, options, vNode) {
      var minSize = (options === null || options === void 0 ? void 0 : options.minSize) || 24;
      var nodeRect = vNode.boundingClientRect;
      if (_rectHasMinimumSize(minSize * 10, nodeRect)) {
        this.data({
          messageKey: 'large',
          minSize: minSize
        });
        return true;
      }
      var hasMinimumSize = _rectHasMinimumSize.bind(null, minSize);
      var nearbyElms = _findNearbyElms(vNode);
      var overflowingContent = filterOverflowingContent(vNode, nearbyElms);
      var _filterByElmsOverlap = filterByElmsOverlap(vNode, nearbyElms), fullyObscuringElms = _filterByElmsOverlap.fullyObscuringElms, partialObscuringElms = _filterByElmsOverlap.partialObscuringElms;
      if (overflowingContent.length && (fullyObscuringElms.length || !hasMinimumSize(nodeRect))) {
        this.data({
          minSize: minSize,
          messageKey: 'contentOverflow'
        });
        this.relatedNodes(mapActualNodes(overflowingContent));
        return void 0;
      }
      if (fullyObscuringElms.length) {
        this.relatedNodes(mapActualNodes(fullyObscuringElms));
        this.data({
          messageKey: 'obscured'
        });
        return true;
      }
      var negativeOutcome = _isInTabOrder(vNode) ? false : void 0;
      if (!hasMinimumSize(nodeRect)) {
        this.data(_extends({
          minSize: minSize
        }, toDecimalSize(nodeRect)));
        return negativeOutcome;
      }
      var obscuredWidgets = filterFocusableWidgets(partialObscuringElms);
      if (!obscuredWidgets.length) {
        this.data(_extends({
          minSize: minSize
        }, toDecimalSize(nodeRect)));
        return true;
      }
      var largestInnerRect = getLargestUnobscuredArea(vNode, obscuredWidgets);
      if (!largestInnerRect) {
        this.data({
          minSize: minSize,
          messageKey: 'tooManyRects'
        });
        return void 0;
      }
      if (!hasMinimumSize(largestInnerRect)) {
        if (overflowingContent.length) {
          this.data({
            minSize: minSize,
            messageKey: 'contentOverflow'
          });
          this.relatedNodes(mapActualNodes(overflowingContent));
          return void 0;
        }
        var allTabbable = obscuredWidgets.every(_isInTabOrder);
        var messageKey = 'partiallyObscured'.concat(allTabbable ? '' : 'NonTabbable');
        this.data(_extends({
          messageKey: messageKey,
          minSize: minSize
        }, toDecimalSize(largestInnerRect)));
        this.relatedNodes(mapActualNodes(obscuredWidgets));
        return allTabbable ? negativeOutcome : void 0;
      }
      this.data(_extends({
        minSize: minSize
      }, toDecimalSize(largestInnerRect || nodeRect)));
      this.relatedNodes(mapActualNodes(obscuredWidgets));
      return true;
    }
    function filterOverflowingContent(vNode, nearbyElms) {
      return nearbyElms.filter(function(nearbyElm) {
        return !isEnclosedRect2(nearbyElm, vNode) && isDescendantNotInTabOrder2(vNode, nearbyElm);
      });
    }
    function filterByElmsOverlap(vNode, nearbyElms) {
      var fullyObscuringElms = [];
      var partialObscuringElms = [];
      var _iterator19 = _createForOfIteratorHelper(nearbyElms), _step19;
      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
          var vNeighbor = _step19.value;
          if (!isDescendantNotInTabOrder2(vNode, vNeighbor) && _hasVisualOverlap(vNode, vNeighbor) && getCssPointerEvents(vNeighbor) !== 'none') {
            if (isEnclosedRect2(vNode, vNeighbor)) {
              fullyObscuringElms.push(vNeighbor);
            } else {
              partialObscuringElms.push(vNeighbor);
            }
          }
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
      return {
        fullyObscuringElms: fullyObscuringElms,
        partialObscuringElms: partialObscuringElms
      };
    }
    function getLargestUnobscuredArea(vNode, obscuredNodes) {
      var nodeRect = vNode.boundingClientRect;
      var obscuringRects = obscuredNodes.map(function(_ref117) {
        var rect = _ref117.boundingClientRect;
        return rect;
      });
      var unobscuredRects;
      try {
        unobscuredRects = _splitRects(nodeRect, obscuringRects);
      } catch (_unused9) {
        return null;
      }
      return getLargestRect2(unobscuredRects);
    }
    function getLargestRect2(rects, minSize) {
      return rects.reduce(function(rectA, rectB) {
        var rectAisMinimum = _rectHasMinimumSize(minSize, rectA);
        var rectBisMinimum = _rectHasMinimumSize(minSize, rectB);
        if (rectAisMinimum !== rectBisMinimum) {
          return rectAisMinimum ? rectA : rectB;
        }
        var areaA = rectA.width * rectA.height;
        var areaB = rectB.width * rectB.height;
        return areaA > areaB ? rectA : rectB;
      });
    }
    function filterFocusableWidgets(vNodes) {
      return vNodes.filter(function(vNode) {
        return get_role_type_default(vNode) === 'widget' && _isFocusable(vNode);
      });
    }
    function isEnclosedRect2(vNodeA, vNodeB) {
      var rectA = vNodeA.boundingClientRect;
      var rectB = vNodeB.boundingClientRect;
      return rectA.top >= rectB.top && rectA.left >= rectB.left && rectA.bottom <= rectB.bottom && rectA.right <= rectB.right;
    }
    function getCssPointerEvents(vNode) {
      return vNode.getComputedStylePropertyValue('pointer-events');
    }
    function toDecimalSize(rect) {
      return {
        width: Math.round(rect.width * 10) / 10,
        height: Math.round(rect.height * 10) / 10
      };
    }
    function isDescendantNotInTabOrder2(vAncestor, vNode) {
      return _contains(vAncestor, vNode) && !_isInTabOrder(vNode);
    }
    function mapActualNodes(vNodes) {
      return vNodes.map(function(_ref118) {
        var actualNode = _ref118.actualNode;
        return actualNode;
      });
    }
    var roundingMargin2 = .05;
    function targetOffsetEvaluate(node, options, vNode) {
      var minOffset = (options === null || options === void 0 ? void 0 : options.minOffset) || 24;
      if (_rectHasMinimumSize(minOffset * 10, vNode.boundingClientRect)) {
        this.data({
          messageKey: 'large',
          minOffset: minOffset
        });
        return true;
      }
      var closeNeighbors = [];
      var closestOffset = minOffset;
      var _iterator20 = _createForOfIteratorHelper(_findNearbyElms(vNode, minOffset)), _step20;
      try {
        for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
          var vNeighbor = _step20.value;
          if (get_role_type_default(vNeighbor) !== 'widget' || !_isFocusable(vNeighbor)) {
            continue;
          }
          var offset = null;
          try {
            offset = _getOffset(vNode, vNeighbor, minOffset / 2);
          } catch (err2) {
            if (err2.message.startsWith('splitRects')) {
              this.data({
                messageKey: 'tooManyRects',
                closestOffset: 0,
                minOffset: minOffset
              });
              return void 0;
            }
            throw err2;
          }
          if (offset === null) {
            continue;
          }
          offset = roundToSingleDecimal(offset) * 2;
          if (offset + roundingMargin2 >= minOffset) {
            continue;
          }
          closestOffset = Math.min(closestOffset, offset);
          closeNeighbors.push(vNeighbor);
        }
      } catch (err) {
        _iterator20.e(err);
      } finally {
        _iterator20.f();
      }
      if (closeNeighbors.length === 0) {
        this.data({
          closestOffset: closestOffset,
          minOffset: minOffset
        });
        return true;
      }
      this.relatedNodes(closeNeighbors.map(function(_ref119) {
        var actualNode = _ref119.actualNode;
        return actualNode;
      }));
      if (!closeNeighbors.some(_isInTabOrder)) {
        this.data({
          messageKey: 'nonTabbableNeighbor',
          closestOffset: closestOffset,
          minOffset: minOffset
        });
        return void 0;
      }
      this.data({
        closestOffset: closestOffset,
        minOffset: minOffset
      });
      return _isInTabOrder(vNode) ? false : void 0;
    }
    function roundToSingleDecimal(num) {
      return Math.round(num * 10) / 10;
    }
    function metaViewportScaleEvaluate(node, options, virtualNode) {
      var _ref120 = options || {}, _ref120$scaleMinimum = _ref120.scaleMinimum, scaleMinimum = _ref120$scaleMinimum === void 0 ? 2 : _ref120$scaleMinimum, _ref120$lowerBound = _ref120.lowerBound, lowerBound = _ref120$lowerBound === void 0 ? false : _ref120$lowerBound;
      var content = virtualNode.attr('content') || '';
      if (!content) {
        return true;
      }
      var result = content.split(/[;,]/).reduce(function(out, item) {
        var contentValue = item.trim();
        if (!contentValue) {
          return out;
        }
        var _contentValue$split = contentValue.split('='), _contentValue$split2 = _slicedToArray(_contentValue$split, 2), key = _contentValue$split2[0], value = _contentValue$split2[1];
        if (!key || !value) {
          return out;
        }
        var curatedKey = key.toLowerCase().trim();
        var curatedValue = value.toLowerCase().trim();
        if (curatedKey === 'maximum-scale' && curatedValue === 'yes') {
          curatedValue = 1;
        }
        if (curatedKey === 'maximum-scale' && parseFloat(curatedValue) < 0) {
          return out;
        }
        out[curatedKey] = curatedValue;
        return out;
      }, {});
      if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {
        return true;
      }
      if (!lowerBound && result['user-scalable'] === 'no') {
        this.data('user-scalable=no');
        return false;
      }
      var userScalableAsFloat = parseFloat(result['user-scalable']);
      if (!lowerBound && result['user-scalable'] && (userScalableAsFloat || userScalableAsFloat === 0) && userScalableAsFloat > -1 && userScalableAsFloat < 1) {
        this.data('user-scalable');
        return false;
      }
      if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < scaleMinimum) {
        this.data('maximum-scale');
        return false;
      }
      return true;
    }
    var meta_viewport_scale_evaluate_default = metaViewportScaleEvaluate;
    function cssOrientationLockEvaluate(node, options, virtualNode, context) {
      var _ref121 = context || {}, _ref121$cssom = _ref121.cssom, cssom = _ref121$cssom === void 0 ? void 0 : _ref121$cssom;
      var _ref122 = options || {}, _ref122$degreeThresho = _ref122.degreeThreshold, degreeThreshold = _ref122$degreeThresho === void 0 ? 0 : _ref122$degreeThresho;
      if (!cssom || !cssom.length) {
        return void 0;
      }
      var isLocked = false;
      var relatedElements = [];
      var rulesGroupByDocumentFragment = groupCssomByDocument(cssom);
      var _loop9 = function _loop9() {
        var key = _Object$keys3[_i39];
        var _rulesGroupByDocument = rulesGroupByDocumentFragment[key], root = _rulesGroupByDocument.root, rules = _rulesGroupByDocument.rules;
        var orientationRules = rules.filter(isMediaRuleWithOrientation);
        if (!orientationRules.length) {
          return 1;
        }
        orientationRules.forEach(function(_ref123) {
          var cssRules = _ref123.cssRules;
          Array.from(cssRules).forEach(function(cssRule) {
            var locked = getIsOrientationLocked(cssRule);
            if (locked && cssRule.selectorText.toUpperCase() !== 'HTML') {
              var elms = Array.from(root.querySelectorAll(cssRule.selectorText)) || [];
              relatedElements = relatedElements.concat(elms);
            }
            isLocked = isLocked || locked;
          });
        });
      };
      for (var _i39 = 0, _Object$keys3 = Object.keys(rulesGroupByDocumentFragment); _i39 < _Object$keys3.length; _i39++) {
        if (_loop9()) {
          continue;
        }
      }
      if (!isLocked) {
        return true;
      }
      if (relatedElements.length) {
        this.relatedNodes(relatedElements);
      }
      return false;
      function groupCssomByDocument(cssObjectModel) {
        return cssObjectModel.reduce(function(out, _ref124) {
          var sheet = _ref124.sheet, root = _ref124.root, shadowId = _ref124.shadowId;
          var key = shadowId ? shadowId : 'topDocument';
          if (!out[key]) {
            out[key] = {
              root: root,
              rules: []
            };
          }
          if (!sheet || !sheet.cssRules) {
            return out;
          }
          var rules = Array.from(sheet.cssRules);
          out[key].rules = out[key].rules.concat(rules);
          return out;
        }, {});
      }
      function isMediaRuleWithOrientation(_ref125) {
        var type2 = _ref125.type, cssText = _ref125.cssText;
        if (type2 !== 4) {
          return false;
        }
        return /orientation:\s*landscape/i.test(cssText) || /orientation:\s*portrait/i.test(cssText);
      }
      function getIsOrientationLocked(_ref126) {
        var selectorText = _ref126.selectorText, style = _ref126.style;
        if (!selectorText || style.length <= 0) {
          return false;
        }
        var transformStyle = style.transform || style.webkitTransform || style.msTransform || false;
        if (!transformStyle && !style.rotate) {
          return false;
        }
        var transformDegrees = getTransformDegrees(transformStyle);
        var rotateDegrees = getRotationInDegrees('rotate', style.rotate);
        var degrees = transformDegrees + rotateDegrees;
        if (!degrees) {
          return false;
        }
        degrees = Math.abs(degrees);
        if (Math.abs(degrees - 180) % 180 <= degreeThreshold) {
          return false;
        }
        return Math.abs(degrees - 90) % 90 <= degreeThreshold;
      }
      function getTransformDegrees(transformStyle) {
        if (!transformStyle) {
          return 0;
        }
        var matches4 = transformStyle.match(/(rotate|rotateZ|rotate3d|matrix|matrix3d)\(([^)]+)\)(?!.*(rotate|rotateZ|rotate3d|matrix|matrix3d))/);
        if (!matches4) {
          return 0;
        }
        var _matches2 = _slicedToArray(matches4, 3), transformFn = _matches2[1], transformFnValue = _matches2[2];
        return getRotationInDegrees(transformFn, transformFnValue);
      }
      function getRotationInDegrees(transformFunction, transformFnValue) {
        switch (transformFunction) {
         case 'rotate':
         case 'rotateZ':
          return getAngleInDegrees(transformFnValue);

         case 'rotate3d':
          var _transformFnValue$spl = transformFnValue.split(',').map(function(value) {
            return value.trim();
          }), _transformFnValue$spl2 = _slicedToArray(_transformFnValue$spl, 4), z = _transformFnValue$spl2[2], angleWithUnit = _transformFnValue$spl2[3];
          if (parseInt(z) === 0) {
            return;
          }
          return getAngleInDegrees(angleWithUnit);

         case 'matrix':
         case 'matrix3d':
          return getAngleInDegreesFromMatrixTransform(transformFnValue);

         default:
          return 0;
        }
      }
      function getAngleInDegrees(angleWithUnit) {
        var _ref127 = angleWithUnit.match(/(deg|grad|rad|turn)/) || [], _ref128 = _slicedToArray(_ref127, 1), unit = _ref128[0];
        if (!unit) {
          return 0;
        }
        var angle = parseFloat(angleWithUnit.replace(unit, ''));
        switch (unit) {
         case 'rad':
          return convertRadToDeg(angle);

         case 'grad':
          return convertGradToDeg(angle);

         case 'turn':
          return convertTurnToDeg(angle);

         case 'deg':
         default:
          return parseInt(angle);
        }
      }
      function getAngleInDegreesFromMatrixTransform(transformFnValue) {
        var values2 = transformFnValue.split(',');
        if (values2.length <= 6) {
          var _values = _slicedToArray(values2, 2), a2 = _values[0], b3 = _values[1];
          var radians = Math.atan2(parseFloat(b3), parseFloat(a2));
          return convertRadToDeg(radians);
        }
        var sinB = parseFloat(values2[8]);
        var b2 = Math.asin(sinB);
        var cosB = Math.cos(b2);
        var rotateZRadians = Math.acos(parseFloat(values2[0]) / cosB);
        return convertRadToDeg(rotateZRadians);
      }
      function convertRadToDeg(radians) {
        return Math.round(radians * (180 / Math.PI));
      }
      function convertGradToDeg(grad) {
        grad = grad % 400;
        if (grad < 0) {
          grad += 400;
        }
        return Math.round(grad / 400 * 360);
      }
      function convertTurnToDeg(turn) {
        return Math.round(360 / (1 / turn));
      }
    }
    var css_orientation_lock_evaluate_default = cssOrientationLockEvaluate;
    function noAutoplayAudioEvaluate(node, options) {
      var hasControls = node.hasAttribute('controls');
      if (node.hasAttribute('loop')) {
        return hasControls;
      }
      if (!node.duration) {
        console.warn('axe.utils.preloadMedia did not load metadata');
        return void 0;
      }
      var _options$allowedDurat = options.allowedDuration, allowedDuration = _options$allowedDurat === void 0 ? 3 : _options$allowedDurat;
      var playableDuration = getPlayableDuration(node);
      if (playableDuration <= allowedDuration) {
        return true;
      }
      if (!hasControls) {
        return false;
      }
      return true;
      function getPlayableDuration(elm) {
        if (!elm.currentSrc) {
          return 0;
        }
        var playbackRange = getPlaybackRange(elm.currentSrc);
        if (!playbackRange) {
          return Math.abs(elm.duration - (elm.currentTime || 0));
        }
        if (playbackRange.length === 1) {
          return Math.abs(elm.duration - playbackRange[0]);
        }
        return Math.abs(playbackRange[1] - playbackRange[0]);
      }
      function getPlaybackRange(src) {
        var match = src.match(/#t=(.*)/);
        if (!match) {
          return;
        }
        var _match = _slicedToArray(match, 2), value = _match[1];
        var ranges = value.split(',');
        return ranges.map(function(range2) {
          if (/:/.test(range2)) {
            return convertHourMinSecToSeconds(range2);
          }
          return parseFloat(range2);
        });
      }
      function convertHourMinSecToSeconds(hhMmSs) {
        var parts = hhMmSs.split(':');
        var secs = 0;
        var mins = 1;
        while (parts.length > 0) {
          secs += mins * parseInt(parts.pop(), 10);
          mins *= 60;
        }
        return parseFloat(secs);
      }
    }
    var no_autoplay_audio_evaluate_default = noAutoplayAudioEvaluate;
    function frameTestedEvaluate(node, options) {
      return options.isViolation ? false : void 0;
    }
    var frame_tested_evaluate_default = frameTestedEvaluate;
    var joinStr = ' > ';
    function frameTestedAfter(results) {
      var iframes = {};
      return results.filter(function(result) {
        var frameResult = result.node.ancestry[result.node.ancestry.length - 1] !== 'html';
        if (frameResult) {
          var ancestry2 = result.node.ancestry.flat(Infinity).join(joinStr);
          iframes[ancestry2] = result;
          return true;
        }
        var ancestry = result.node.ancestry.slice(0, result.node.ancestry.length - 1).flat(Infinity).join(joinStr);
        if (iframes[ancestry]) {
          iframes[ancestry].result = true;
        }
        return false;
      });
    }
    var frame_tested_after_default = frameTestedAfter;
    function captionEvaluate(node, options, virtualNode) {
      var tracks = query_selector_all_default(virtualNode, 'track');
      var hasCaptions = tracks.some(function(vNode) {
        return (vNode.attr('kind') || '').toLowerCase() === 'captions';
      });
      return hasCaptions ? false : void 0;
    }
    var caption_evaluate_default = captionEvaluate;
    function structuredDlitemsEvaluate(node, options, virtualNode) {
      var children = virtualNode.children;
      if (!children || !children.length) {
        return false;
      }
      var hasDt = false, hasDd = false, nodeName2;
      for (var _i40 = 0; _i40 < children.length; _i40++) {
        nodeName2 = children[_i40].props.nodeName.toUpperCase();
        if (nodeName2 === 'DT') {
          hasDt = true;
        }
        if (hasDt && nodeName2 === 'DD') {
          return false;
        }
        if (nodeName2 === 'DD') {
          hasDd = true;
        }
      }
      return hasDt || hasDd;
    }
    var structured_dlitems_evaluate_default = structuredDlitemsEvaluate;
    function onlyListitemsEvaluate(node, options, virtualNode) {
      var hasNonEmptyTextNode = false;
      var atLeastOneListitem = false;
      var isEmpty2 = true;
      var badNodes = [];
      var badRoleNodes = [];
      var badRoles = [];
      virtualNode.children.forEach(function(vNode) {
        var actualNode = vNode.actualNode;
        if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {
          hasNonEmptyTextNode = true;
          return;
        }
        if (actualNode.nodeType !== 1 || !_isVisibleToScreenReaders(actualNode)) {
          return;
        }
        isEmpty2 = false;
        var isLi = actualNode.nodeName.toUpperCase() === 'LI';
        var role = get_role_default(vNode);
        var isListItemRole = role === 'listitem';
        if (!isLi && !isListItemRole) {
          badNodes.push(actualNode);
        }
        if (isLi && !isListItemRole) {
          badRoleNodes.push(actualNode);
          if (!badRoles.includes(role)) {
            badRoles.push(role);
          }
        }
        if (isListItemRole) {
          atLeastOneListitem = true;
        }
      });
      if (hasNonEmptyTextNode || badNodes.length) {
        this.relatedNodes(badNodes);
        return true;
      }
      if (isEmpty2 || atLeastOneListitem) {
        return false;
      }
      this.relatedNodes(badRoleNodes);
      this.data({
        messageKey: 'roleNotValid',
        roles: badRoles.join(', ')
      });
      return true;
    }
    var only_listitems_evaluate_default = onlyListitemsEvaluate;
    function onlyDlitemsEvaluate(node, options, virtualNode) {
      var ALLOWED_ROLES = [ 'definition', 'term', 'list' ];
      var base = {
        badNodes: [],
        hasNonEmptyTextNode: false
      };
      var content = virtualNode.children.reduce(function(vNodes, child) {
        var actualNode = child.actualNode;
        if (actualNode.nodeName.toUpperCase() === 'DIV' && get_role_default(actualNode) === null) {
          return vNodes.concat(child.children);
        }
        return vNodes.concat(child);
      }, []);
      var result = content.reduce(function(out, childNode) {
        var actualNode = childNode.actualNode;
        var tagName = actualNode.nodeName.toUpperCase();
        if (actualNode.nodeType === 1 && _isVisibleToScreenReaders(actualNode)) {
          var explicitRole2 = get_explicit_role_default(actualNode);
          if (tagName !== 'DT' && tagName !== 'DD' || explicitRole2) {
            if (!ALLOWED_ROLES.includes(explicitRole2)) {
              out.badNodes.push(actualNode);
            }
          }
        } else if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {
          out.hasNonEmptyTextNode = true;
        }
        return out;
      }, base);
      if (result.badNodes.length) {
        this.relatedNodes(result.badNodes);
      }
      return !!result.badNodes.length || result.hasNonEmptyTextNode;
    }
    function listitemEvaluate(node, options, virtualNode) {
      var parent = virtualNode.parent;
      if (!parent) {
        return void 0;
      }
      var parentNodeName = parent.props.nodeName;
      var parentRole = get_explicit_role_default(parent);
      if ([ 'presentation', 'none', 'list' ].includes(parentRole)) {
        return true;
      }
      if (parentRole && is_valid_role_default(parentRole)) {
        this.data({
          messageKey: 'roleNotValid'
        });
        return false;
      }
      return [ 'ul', 'ol', 'menu' ].includes(parentNodeName);
    }
    function invalidChildrenEvaluate(node) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var relatedNodes = [];
      var issues = [];
      if (!virtualNode.children) {
        return void 0;
      }
      var vChildren = mapWithNested(virtualNode.children);
      while (vChildren.length) {
        var _vChild$actualNode;
        var _vChildren$shift = vChildren.shift(), vChild = _vChildren$shift.vChild, nested = _vChildren$shift.nested;
        if (options.divGroups && !nested && isDivGroup(vChild)) {
          if (!vChild.children) {
            return void 0;
          }
          var vGrandChildren = mapWithNested(vChild.children, true);
          vChildren.push.apply(vChildren, _toConsumableArray(vGrandChildren));
          continue;
        }
        var issue = getInvalidSelector(vChild, nested, options);
        if (!issue) {
          continue;
        }
        if (!issues.includes(issue)) {
          issues.push(issue);
        }
        if ((vChild === null || vChild === void 0 || (_vChild$actualNode = vChild.actualNode) === null || _vChild$actualNode === void 0 ? void 0 : _vChild$actualNode.nodeType) === 1) {
          relatedNodes.push(vChild.actualNode);
        }
      }
      if (issues.length === 0) {
        return false;
      }
      this.data({
        values: issues.join(', ')
      });
      this.relatedNodes(relatedNodes);
      return true;
    }
    function getInvalidSelector(vChild, nested, _ref129) {
      var _ref129$validRoles = _ref129.validRoles, validRoles = _ref129$validRoles === void 0 ? [] : _ref129$validRoles, _ref129$validNodeName = _ref129.validNodeNames, validNodeNames = _ref129$validNodeName === void 0 ? [] : _ref129$validNodeName;
      var _vChild$props = vChild.props, nodeName2 = _vChild$props.nodeName, nodeType = _vChild$props.nodeType, nodeValue = _vChild$props.nodeValue;
      var selector = nested ? 'div > ' : '';
      if (nodeType === 3 && nodeValue.trim() !== '') {
        return selector + '#text';
      }
      if (nodeType !== 1 || !_isVisibleToScreenReaders(vChild)) {
        return false;
      }
      var role = get_explicit_role_default(vChild);
      if (role) {
        return validRoles.includes(role) ? false : selector + '[role='.concat(role, ']');
      } else {
        return validNodeNames.includes(nodeName2) ? false : selector + nodeName2;
      }
    }
    function isDivGroup(vNode) {
      return vNode.props.nodeName === 'div' && get_explicit_role_default(vNode) === null;
    }
    function mapWithNested(vNodes) {
      var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return vNodes.map(function(vChild) {
        return {
          vChild: vChild,
          nested: nested
        };
      });
    }
    function dlitemEvaluate(node) {
      var parent = get_composed_parent_default(node);
      var parentTagName = parent.nodeName.toUpperCase();
      var parentRole = get_explicit_role_default(parent);
      if (parentTagName === 'DIV' && [ 'presentation', 'none', null ].includes(parentRole)) {
        parent = get_composed_parent_default(parent);
        parentTagName = parent.nodeName.toUpperCase();
        parentRole = get_explicit_role_default(parent);
      }
      if (parentTagName !== 'DL') {
        return false;
      }
      if (!parentRole || [ 'presentation', 'none', 'list' ].includes(parentRole)) {
        return true;
      }
      return false;
    }
    var dlitem_evaluate_default = dlitemEvaluate;
    function xmlLangMismatchEvaluate(node, options, vNode) {
      var primaryLangValue = get_base_lang_default(vNode.attr('lang'));
      var primaryXmlLangValue = get_base_lang_default(vNode.attr('xml:lang'));
      return primaryLangValue === primaryXmlLangValue;
    }
    var xml_lang_mismatch_evaluate_default = xmlLangMismatchEvaluate;
    function validLangEvaluate(node, options, virtualNode) {
      var invalid = [];
      options.attributes.forEach(function(langAttr) {
        var langVal = virtualNode.attr(langAttr);
        if (typeof langVal !== 'string') {
          return;
        }
        var baselangVal = get_base_lang_default(langVal);
        var invalidLang = options.value ? !options.value.map(get_base_lang_default).includes(baselangVal) : !valid_langs_default(baselangVal);
        if (baselangVal !== '' && invalidLang || langVal !== '' && !sanitize_default(langVal)) {
          invalid.push(langAttr + '="' + virtualNode.attr(langAttr) + '"');
        }
      });
      if (!invalid.length) {
        return false;
      }
      if (virtualNode.props.nodeName !== 'html' && !_hasLangText(virtualNode)) {
        return false;
      }
      this.data(invalid);
      return true;
    }
    var valid_lang_evaluate_default = validLangEvaluate;
    function hasValue(value) {
      return (value || '').trim() !== '';
    }
    function hasLangEvaluate(node, options, virtualNode) {
      var xhtml = typeof document !== 'undefined' ? is_xhtml_default(document) : false;
      if (options.attributes.includes('xml:lang') && options.attributes.includes('lang') && hasValue(virtualNode.attr('xml:lang')) && !hasValue(virtualNode.attr('lang')) && !xhtml) {
        this.data({
          messageKey: 'noXHTML'
        });
        return false;
      }
      var hasLang = options.attributes.some(function(name) {
        return hasValue(virtualNode.attr(name));
      });
      if (!hasLang) {
        this.data({
          messageKey: 'noLang'
        });
        return false;
      }
      return true;
    }
    var has_lang_evaluate_default = hasLangEvaluate;
    function landmarkIsUniqueEvaluate(node, options, virtualNode) {
      var role = get_role_default(node);
      var accessibleText2 = _accessibleTextVirtual(virtualNode);
      accessibleText2 = accessibleText2 ? accessibleText2.toLowerCase() : null;
      this.data({
        role: role,
        accessibleText: accessibleText2
      });
      this.relatedNodes([ node ]);
      return true;
    }
    var landmark_is_unique_evaluate_default = landmarkIsUniqueEvaluate;
    function landmarkIsUniqueAfter(results) {
      var uniqueLandmarks = [];
      return results.filter(function(currentResult) {
        var findMatch = function findMatch(someResult) {
          return currentResult.data.role === someResult.data.role && currentResult.data.accessibleText === someResult.data.accessibleText;
        };
        var matchedResult = uniqueLandmarks.find(findMatch);
        if (matchedResult) {
          matchedResult.result = false;
          matchedResult.relatedNodes.push(currentResult.relatedNodes[0]);
          return false;
        }
        uniqueLandmarks.push(currentResult);
        currentResult.relatedNodes = [];
        return true;
      });
    }
    var landmark_is_unique_after_default = landmarkIsUniqueAfter;
    function titleOnlyEvaluate(node, options, virtualNode) {
      var labelText2 = label_virtual_default2(virtualNode);
      var title = title_text_default(virtualNode);
      var ariaDescribedBy = virtualNode.attr('aria-describedby');
      return !labelText2 && !!(title || ariaDescribedBy);
    }
    var title_only_evaluate_default = titleOnlyEvaluate;
    function multipleLabelEvaluate(node) {
      var id = escape_selector_default(node.getAttribute('id'));
      var parent = node.parentNode;
      var root = get_root_node_default2(node);
      root = root.documentElement || root;
      var labels = Array.from(root.querySelectorAll('label[for="'.concat(id, '"]')));
      if (labels.length) {
        labels = labels.filter(function(label3) {
          return !_isHiddenForEveryone(label3);
        });
      }
      while (parent) {
        if (parent.nodeName.toUpperCase() === 'LABEL' && labels.indexOf(parent) === -1) {
          labels.push(parent);
        }
        parent = parent.parentNode;
      }
      this.relatedNodes(labels);
      if (labels.length > 1) {
        var ATVisibleLabels = labels.filter(function(label3) {
          return _isVisibleToScreenReaders(label3);
        });
        if (ATVisibleLabels.length > 1) {
          return void 0;
        }
        var labelledby = idrefs_default(node, 'aria-labelledby');
        return !labelledby.includes(ATVisibleLabels[0]) ? void 0 : false;
      }
      return false;
    }
    var multiple_label_evaluate_default = multipleLabelEvaluate;
    function isStringContained(compare, compareWith) {
      var curatedCompareWith = curateString(compareWith);
      var curatedCompare = curateString(compare);
      if (!curatedCompareWith || !curatedCompare) {
        return false;
      }
      return curatedCompareWith.includes(curatedCompare);
    }
    function curateString(str) {
      var noUnicodeStr = remove_unicode_default(str, {
        emoji: true,
        nonBmp: true,
        punctuations: true
      });
      return sanitize_default(noUnicodeStr);
    }
    function labelContentNameMismatchEvaluate(node, options, virtualNode) {
      var _options$occurrenceTh;
      var pixelThreshold = options === null || options === void 0 ? void 0 : options.pixelThreshold;
      var occurrenceThreshold = (_options$occurrenceTh = options === null || options === void 0 ? void 0 : options.occurrenceThreshold) !== null && _options$occurrenceTh !== void 0 ? _options$occurrenceTh : options === null || options === void 0 ? void 0 : options.occuranceThreshold;
      var accText = accessible_text_default(node).toLowerCase();
      var visibleText = sanitize_default(subtree_text_default(virtualNode, {
        subtreeDescendant: true,
        ignoreIconLigature: true,
        pixelThreshold: pixelThreshold,
        occurrenceThreshold: occurrenceThreshold
      })).toLowerCase();
      if (!visibleText) {
        return true;
      }
      if (is_human_interpretable_default(accText) < 1 || is_human_interpretable_default(visibleText) < 1) {
        return void 0;
      }
      return isStringContained(visibleText, accText);
    }
    var label_content_name_mismatch_evaluate_default = labelContentNameMismatchEvaluate;
    function implicitEvaluate(node, options, virtualNode) {
      try {
        var label3 = closest_default(virtualNode, 'label');
        if (label3) {
          var implicitLabel = sanitize_default(_accessibleTextVirtual(label3, {
            inControlContext: true,
            startNode: virtualNode
          }));
          if (label3.actualNode) {
            this.relatedNodes([ label3.actualNode ]);
          }
          this.data({
            implicitLabel: implicitLabel
          });
          return !!implicitLabel;
        }
        return false;
      } catch (_unused10) {
        return void 0;
      }
    }
    var implicit_evaluate_default = implicitEvaluate;
    function hiddenExplicitLabelEvaluate(node, options, virtualNode) {
      if (virtualNode.hasAttr('id')) {
        if (!virtualNode.actualNode) {
          return void 0;
        }
        var root = get_root_node_default2(node);
        var _id4 = escape_selector_default(node.getAttribute('id'));
        var label3 = root.querySelector('label[for="'.concat(_id4, '"]'));
        if (label3 && !_isVisibleToScreenReaders(label3)) {
          var name;
          try {
            name = _accessibleTextVirtual(virtualNode).trim();
          } catch (_unused11) {
            return void 0;
          }
          var isNameEmpty = name === '';
          return isNameEmpty;
        }
      }
      return false;
    }
    var hidden_explicit_label_evaluate_default = hiddenExplicitLabelEvaluate;
    function helpSameAsLabelEvaluate(node, options, virtualNode) {
      var labelText2 = label_virtual_default2(virtualNode);
      var check = node.getAttribute('title');
      if (!labelText2) {
        return false;
      }
      if (!check) {
        check = '';
        if (node.getAttribute('aria-describedby')) {
          var ref = idrefs_default(node, 'aria-describedby');
          check = ref.map(function(thing) {
            return thing ? accessible_text_default(thing) : '';
          }).join('');
        }
      }
      return sanitize_default(check) === sanitize_default(labelText2);
    }
    var help_same_as_label_evaluate_default = helpSameAsLabelEvaluate;
    function explicitEvaluate(node, options, virtualNode) {
      var _this7 = this;
      if (!virtualNode.attr('id')) {
        return false;
      }
      if (!virtualNode.actualNode) {
        return void 0;
      }
      var root = get_root_node_default2(virtualNode.actualNode);
      var id = escape_selector_default(virtualNode.attr('id'));
      var labels = Array.from(root.querySelectorAll('label[for="'.concat(id, '"]')));
      this.relatedNodes(labels);
      if (!labels.length) {
        return false;
      }
      try {
        return labels.some(function(label3) {
          if (!_isVisibleOnScreen(label3)) {
            return true;
          } else {
            var explicitLabel = sanitize_default(accessible_text_default(label3, {
              inControlContext: true,
              startNode: virtualNode
            }));
            _this7.data({
              explicitLabel: explicitLabel
            });
            return !!explicitLabel;
          }
        });
      } catch (_unused12) {
        return void 0;
      }
    }
    var explicit_evaluate_default = explicitEvaluate;
    function duplicateImgLabelEvaluate(node, options, virtualNode) {
      if ([ 'none', 'presentation' ].includes(get_role_default(virtualNode))) {
        return false;
      }
      var parentVNode = closest_default(virtualNode, options.parentSelector);
      if (!parentVNode) {
        return false;
      }
      var visibleText = visible_virtual_default(parentVNode, true).toLowerCase();
      if (visibleText === '') {
        return false;
      }
      return visibleText === _accessibleTextVirtual(virtualNode).toLowerCase();
    }
    var duplicate_img_label_evaluate_default = duplicateImgLabelEvaluate;
    function altSpaceValueEvaluate(node, options, virtualNode) {
      var alt = virtualNode.attr('alt');
      var isOnlySpace = /^\s+$/;
      return typeof alt === 'string' && isOnlySpace.test(alt);
    }
    var alt_space_value_evaluate_default = altSpaceValueEvaluate;
    function tabindexEvaluate(node, options, virtualNode) {
      var tabIndex = parse_tabindex_default(virtualNode.attr('tabindex'));
      return tabIndex === null || tabIndex <= 0;
    }
    var tabindex_evaluate_default = tabindexEvaluate;
    function noFocusableContentEvaluate(node, options, virtualNode) {
      if (!virtualNode.children) {
        return void 0;
      }
      try {
        var focusableDescendants2 = getFocusableDescendants(virtualNode);
        if (!focusableDescendants2.length) {
          return true;
        }
        var notHiddenElements = focusableDescendants2.filter(usesUnreliableHidingStrategy);
        if (notHiddenElements.length > 0) {
          this.data({
            messageKey: 'notHidden'
          });
          this.relatedNodes(notHiddenElements);
        } else {
          this.relatedNodes(focusableDescendants2);
        }
        return false;
      } catch (_unused13) {
        return void 0;
      }
    }
    function getFocusableDescendants(vNode) {
      if (!vNode.children) {
        if (vNode.props.nodeType === 1) {
          throw new Error('Cannot determine children');
        }
        return [];
      }
      var retVal = [];
      vNode.children.forEach(function(child) {
        if (get_role_type_default(child) === 'widget' && _isFocusable(child)) {
          retVal.push(child);
        } else {
          retVal.push.apply(retVal, _toConsumableArray(getFocusableDescendants(child)));
        }
      });
      return retVal;
    }
    function usesUnreliableHidingStrategy(vNode) {
      var tabIndex = parse_tabindex_default(vNode.attr('tabindex'));
      return tabIndex !== null && tabIndex < 0;
    }
    function landmarkIsTopLevelEvaluate(node) {
      var landmarks = get_aria_roles_by_type_default('landmark');
      var parent = get_composed_parent_default(node);
      var nodeRole = get_role_default(node);
      this.data({
        role: nodeRole
      });
      while (parent) {
        var role = parent.getAttribute('role');
        if (!role && parent.nodeName.toUpperCase() !== 'FORM') {
          role = implicit_role_default(parent);
        }
        if (role && landmarks.includes(role) && !(role === 'main' && nodeRole === 'complementary')) {
          return false;
        }
        parent = get_composed_parent_default(parent);
      }
      return true;
    }
    var landmark_is_top_level_evaluate_default = landmarkIsTopLevelEvaluate;
    function frameFocusableContentEvaluate(node, options, virtualNode) {
      if (!virtualNode.children) {
        return void 0;
      }
      try {
        return !virtualNode.children.some(function(child) {
          return focusableDescendants(child);
        });
      } catch (_unused14) {
        return void 0;
      }
    }
    function focusableDescendants(vNode) {
      if (_isInTabOrder(vNode)) {
        return true;
      }
      if (!vNode.children) {
        if (vNode.props.nodeType === 1) {
          throw new Error('Cannot determine children');
        }
        return false;
      }
      return vNode.children.some(function(child) {
        return focusableDescendants(child);
      });
    }
    function focusableNotTabbableEvaluate(node, options, virtualNode) {
      var elementsThatCanBeDisabled = [ 'button', 'fieldset', 'input', 'select', 'textarea' ];
      var tabbableElements = virtualNode.tabbableElements;
      if (!tabbableElements || !tabbableElements.length) {
        return true;
      }
      var relatedNodes = tabbableElements.filter(function(vNode) {
        return !elementsThatCanBeDisabled.includes(vNode.props.nodeName);
      });
      this.relatedNodes(relatedNodes.map(function(vNode) {
        return vNode.actualNode;
      }));
      if (relatedNodes.length === 0 || is_modal_open_default()) {
        return true;
      }
      return relatedNodes.every(function(vNode) {
        var pointerEvents = vNode.getComputedStylePropertyValue('pointer-events');
        var width = parseInt(vNode.getComputedStylePropertyValue('width'));
        var height = parseInt(vNode.getComputedStylePropertyValue('height'));
        return vNode.actualNode.onfocus || (width === 0 || height === 0) && pointerEvents === 'none';
      }) ? void 0 : false;
    }
    var focusable_not_tabbable_evaluate_default = focusableNotTabbableEvaluate;
    function focusableNoNameEvaluate(node, options, virtualNode) {
      if (!_isInTabOrder(virtualNode)) {
        return false;
      }
      try {
        return !_accessibleTextVirtual(virtualNode);
      } catch (_unused15) {
        return void 0;
      }
    }
    var focusable_no_name_evaluate_default = focusableNoNameEvaluate;
    function focusableModalOpenEvaluate(node, options, virtualNode) {
      var tabbableElements = virtualNode.tabbableElements.map(function(_ref130) {
        var actualNode = _ref130.actualNode;
        return actualNode;
      });
      if (!tabbableElements || !tabbableElements.length) {
        return true;
      }
      if (is_modal_open_default()) {
        this.relatedNodes(tabbableElements);
        return void 0;
      }
      return true;
    }
    var focusable_modal_open_evaluate_default = focusableModalOpenEvaluate;
    function focusableElementEvaluate(node, options, virtualNode) {
      if (virtualNode.hasAttr('contenteditable') && isContenteditable(virtualNode)) {
        return true;
      }
      return _isInTabOrder(virtualNode);
      function isContenteditable(vNode) {
        var contenteditable = vNode.attr('contenteditable');
        if (contenteditable === 'true' || contenteditable === '') {
          return true;
        }
        if (contenteditable === 'false') {
          return false;
        }
        var ancestor = closest_default(virtualNode.parent, '[contenteditable]');
        if (!ancestor) {
          return false;
        }
        return isContenteditable(ancestor);
      }
    }
    var focusable_element_evaluate_default = focusableElementEvaluate;
    function focusableDisabledEvaluate(node, options, virtualNode) {
      var elementsThatCanBeDisabled = [ 'button', 'fieldset', 'input', 'select', 'textarea' ];
      var tabbableElements = virtualNode.tabbableElements;
      if (!tabbableElements || !tabbableElements.length) {
        return true;
      }
      var relatedNodes = tabbableElements.filter(function(vNode) {
        return elementsThatCanBeDisabled.includes(vNode.props.nodeName);
      });
      this.relatedNodes(relatedNodes.map(function(vNode) {
        return vNode.actualNode;
      }));
      if (relatedNodes.length === 0 || is_modal_open_default()) {
        return true;
      }
      return relatedNodes.every(function(vNode) {
        var pointerEvents = vNode.getComputedStylePropertyValue('pointer-events');
        var width = parseInt(vNode.getComputedStylePropertyValue('width'));
        var height = parseInt(vNode.getComputedStylePropertyValue('height'));
        return vNode.actualNode.onfocus || (width === 0 || height === 0) && pointerEvents === 'none';
      }) ? void 0 : false;
    }
    var focusable_disabled_evaluate_default = focusableDisabledEvaluate;
    function focusableContentEvaluate(node, options, virtualNode) {
      var tabbableElements = virtualNode.tabbableElements;
      if (!tabbableElements) {
        return false;
      }
      var tabbableContentElements = tabbableElements.filter(function(el) {
        return el !== virtualNode;
      });
      return tabbableContentElements.length > 0;
    }
    var focusable_content_evaluate_default = focusableContentEvaluate;
    function accesskeysEvaluate(node, options, vNode) {
      if (!_isHiddenForEveryone(vNode)) {
        this.data(vNode.attr('accesskey'));
        this.relatedNodes([ node ]);
      }
      return true;
    }
    var accesskeys_evaluate_default = accesskeysEvaluate;
    function accesskeysAfter(results) {
      var seen = {};
      return results.filter(function(r) {
        if (!r.data) {
          return false;
        }
        var key = r.data.toUpperCase();
        if (!seen[key]) {
          seen[key] = r;
          r.relatedNodes = [];
          return true;
        }
        seen[key].relatedNodes.push(r.relatedNodes[0]);
        return false;
      }).map(function(r) {
        r.result = !!r.relatedNodes.length;
        return r;
      });
    }
    var accesskeys_after_default = accesskeysAfter;
    function pageNoDuplicateEvaluate(node, options, virtualNode) {
      if (!options || !options.selector || typeof options.selector !== 'string') {
        throw new TypeError('page-no-duplicate requires options.selector to be a string');
      }
      var key = 'page-no-duplicate;' + options.selector;
      if (cache_default.get(key)) {
        this.data('ignored');
        return;
      }
      cache_default.set(key, true);
      var elms = query_selector_all_filter_default(axe._tree[0], options.selector, function(elm) {
        return _isVisibleToScreenReaders(elm);
      });
      if (typeof options.nativeScopeFilter === 'string') {
        elms = elms.filter(function(elm) {
          return elm.actualNode.hasAttribute('role') || !find_up_virtual_default(elm, options.nativeScopeFilter);
        });
      }
      if (typeof options.role === 'string') {
        elms = elms.filter(function(elm) {
          return get_role_default(elm) === options.role;
        });
      }
      this.relatedNodes(elms.filter(function(elm) {
        return elm !== virtualNode;
      }).map(function(elm) {
        return elm.actualNode;
      }));
      return elms.length <= 1;
    }
    var page_no_duplicate_evaluate_default = pageNoDuplicateEvaluate;
    function pageNoDuplicateAfter(results) {
      return results.filter(function(checkResult) {
        return checkResult.data !== 'ignored';
      });
    }
    var page_no_duplicate_after_default = pageNoDuplicateAfter;
    function matchesDefinitionEvaluate(_, options, virtualNode) {
      return matches_default2(virtualNode, options.matcher);
    }
    var matches_definition_evaluate_default = matchesDefinitionEvaluate;
    function hasTextContentEvaluate(node, options, virtualNode) {
      try {
        return sanitize_default(subtree_text_default(virtualNode)) !== '';
      } catch (_unused16) {
        return void 0;
      }
    }
    function hasDescendant(node, options, virtualNode) {
      if (!options || !options.selector || typeof options.selector !== 'string') {
        throw new TypeError('has-descendant requires options.selector to be a string');
      }
      if (options.passForModal && is_modal_open_default()) {
        return true;
      }
      var matchingElms = query_selector_all_filter_default(virtualNode, options.selector, function(vNode) {
        return _isVisibleToScreenReaders(vNode);
      });
      this.relatedNodes(matchingElms.map(function(vNode) {
        return vNode.actualNode;
      }));
      return matchingElms.length > 0;
    }
    var has_descendant_evaluate_default = hasDescendant;
    function pageHasElmAfter(results) {
      var elmUsedAnywhere = results.some(function(frameResult) {
        return frameResult.result === true;
      });
      if (elmUsedAnywhere) {
        results.forEach(function(result) {
          result.result = true;
        });
      }
      return results;
    }
    var has_descendant_after_default = pageHasElmAfter;
    function attrNonSpaceContentEvaluate(node) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var vNode = arguments.length > 2 ? arguments[2] : undefined;
      if (!options.attribute || typeof options.attribute !== 'string') {
        throw new TypeError('attr-non-space-content requires options.attribute to be a string');
      }
      if (!vNode.hasAttr(options.attribute)) {
        this.data({
          messageKey: 'noAttr'
        });
        return false;
      }
      var attribute = vNode.attr(options.attribute);
      var attributeIsEmpty = !sanitize_default(attribute);
      if (attributeIsEmpty) {
        this.data({
          messageKey: 'emptyAttr'
        });
        return false;
      }
      return true;
    }
    var attr_non_space_content_evaluate_default = attrNonSpaceContentEvaluate;
    function autocompleteValidEvaluate(_node, options, virtualNode) {
      var autocomplete2 = virtualNode.attr('autocomplete') || '';
      return is_valid_autocomplete_default(autocomplete2, options);
    }
    var autocomplete_valid_evaluate_default = autocompleteValidEvaluate;
    function autocompleteAppropriateEvaluate(node, options, virtualNode) {
      if (virtualNode.props.nodeName !== 'input') {
        return true;
      }
      var number = [ 'text', 'search', 'number', 'tel' ];
      var url = [ 'text', 'search', 'url' ];
      var allowedTypesMap = {
        bday: [ 'text', 'search', 'date' ],
        email: [ 'text', 'search', 'email' ],
        username: [ 'text', 'search', 'email' ],
        'street-address': [ 'text' ],
        tel: [ 'text', 'search', 'tel' ],
        'tel-country-code': [ 'text', 'search', 'tel' ],
        'tel-national': [ 'text', 'search', 'tel' ],
        'tel-area-code': [ 'text', 'search', 'tel' ],
        'tel-local': [ 'text', 'search', 'tel' ],
        'tel-local-prefix': [ 'text', 'search', 'tel' ],
        'tel-local-suffix': [ 'text', 'search', 'tel' ],
        'tel-extension': [ 'text', 'search', 'tel' ],
        'cc-number': number,
        'cc-exp': [ 'text', 'search', 'month', 'tel' ],
        'cc-exp-month': number,
        'cc-exp-year': number,
        'cc-csc': number,
        'transaction-amount': number,
        'bday-day': number,
        'bday-month': number,
        'bday-year': number,
        'new-password': [ 'text', 'search', 'password' ],
        'current-password': [ 'text', 'search', 'password' ],
        url: url,
        photo: url,
        impp: url
      };
      if (_typeof(options) === 'object') {
        Object.keys(options).forEach(function(key) {
          if (!allowedTypesMap[key]) {
            allowedTypesMap[key] = [];
          }
          allowedTypesMap[key] = allowedTypesMap[key].concat(options[key]);
        });
      }
      var autocompleteAttr = virtualNode.attr('autocomplete');
      var autocompleteTerms = autocompleteAttr.split(/\s+/g).map(function(term) {
        return term.toLowerCase();
      });
      var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];
      if (_autocomplete.stateTerms.includes(purposeTerm)) {
        return true;
      }
      var allowedTypes = allowedTypesMap[purposeTerm];
      var type2 = virtualNode.hasAttr('type') ? sanitize_default(virtualNode.attr('type')).toLowerCase() : 'text';
      type2 = valid_input_type_default().includes(type2) ? type2 : 'text';
      if (typeof allowedTypes === 'undefined') {
        return type2 === 'text';
      }
      return allowedTypes.includes(type2);
    }
    var autocomplete_appropriate_evaluate_default = autocompleteAppropriateEvaluate;
    var blockLike2 = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];
    function linkInTextBlockStyleEvaluate(node) {
      if (isBlock2(node)) {
        return false;
      }
      var parentBlock = get_composed_parent_default(node);
      while (parentBlock && parentBlock.nodeType === 1 && !isBlock2(parentBlock)) {
        parentBlock = get_composed_parent_default(parentBlock);
      }
      if (!parentBlock) {
        return void 0;
      }
      this.relatedNodes([ parentBlock ]);
      if (element_is_distinct_default(node, parentBlock)) {
        return true;
      }
      if (hasPseudoContent(node)) {
        this.data({
          messageKey: 'pseudoContent'
        });
        return void 0;
      }
      return false;
    }
    function isBlock2(elm) {
      var display2 = window.getComputedStyle(elm).getPropertyValue('display');
      return blockLike2.indexOf(display2) !== -1 || display2.substr(0, 6) === 'table-';
    }
    function hasPseudoContent(node) {
      for (var _i41 = 0, _arr3 = [ 'before', 'after' ]; _i41 < _arr3.length; _i41++) {
        var pseudo = _arr3[_i41];
        var style = window.getComputedStyle(node, ':'.concat(pseudo));
        var content = style.getPropertyValue('content');
        if (content !== 'none') {
          return true;
        }
      }
      return false;
    }
    function getContrast2(color1, color2) {
      var c1lum = color1.getRelativeLuminance();
      var c2lum = color2.getRelativeLuminance();
      return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);
    }
    var blockLike3 = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];
    function isBlock3(elm) {
      var display2 = window.getComputedStyle(elm).getPropertyValue('display');
      return blockLike3.indexOf(display2) !== -1 || display2.substr(0, 6) === 'table-';
    }
    function linkInTextBlockEvaluate(node, options) {
      var requiredContrastRatio = options.requiredContrastRatio, allowSameColor = options.allowSameColor;
      if (isBlock3(node)) {
        return false;
      }
      var parentBlock = get_composed_parent_default(node);
      while (parentBlock && parentBlock.nodeType === 1 && !isBlock3(parentBlock)) {
        parentBlock = get_composed_parent_default(parentBlock);
      }
      if (!parentBlock) {
        return void 0;
      }
      this.relatedNodes([ parentBlock ]);
      var nodeColor = _getForegroundColor(node);
      var parentColor = _getForegroundColor(parentBlock);
      var nodeBackgroundColor = _getBackgroundColor2(node);
      var parentBackgroundColor = _getBackgroundColor2(parentBlock);
      var textContrast = nodeColor && parentColor ? getContrast2(nodeColor, parentColor) : void 0;
      if (textContrast) {
        textContrast = Math.floor(textContrast * 100) / 100;
      }
      if (textContrast && textContrast >= requiredContrastRatio) {
        return true;
      }
      var backgroundContrast = nodeBackgroundColor && parentBackgroundColor ? getContrast2(nodeBackgroundColor, parentBackgroundColor) : void 0;
      if (backgroundContrast) {
        backgroundContrast = Math.floor(backgroundContrast * 100) / 100;
      }
      if (backgroundContrast && backgroundContrast >= requiredContrastRatio) {
        return true;
      }
      if (!backgroundContrast) {
        var _incomplete_data_defa;
        var reason = (_incomplete_data_defa = incomplete_data_default.get('bgColor')) !== null && _incomplete_data_defa !== void 0 ? _incomplete_data_defa : 'bgContrast';
        this.data({
          messageKey: reason
        });
        incomplete_data_default.clear();
        return void 0;
      }
      if (!textContrast) {
        return void 0;
      }
      if (allowSameColor && textContrast === 1 && backgroundContrast === 1) {
        return true;
      }
      if (textContrast === 1 && backgroundContrast > 1) {
        this.data({
          messageKey: 'bgContrast',
          contrastRatio: backgroundContrast,
          requiredContrastRatio: requiredContrastRatio,
          nodeBackgroundColor: nodeBackgroundColor ? nodeBackgroundColor.toHexString() : void 0,
          parentBackgroundColor: parentBackgroundColor ? parentBackgroundColor.toHexString() : void 0
        });
        return false;
      }
      this.data({
        messageKey: 'fgContrast',
        contrastRatio: textContrast,
        requiredContrastRatio: requiredContrastRatio,
        nodeColor: nodeColor ? nodeColor.toHexString() : void 0,
        parentColor: parentColor ? parentColor.toHexString() : void 0
      });
      return false;
    }
    var link_in_text_block_evaluate_default = linkInTextBlockEvaluate;
    function colorContrastEvaluate(node, options, virtualNode) {
      var ignoreUnicode = options.ignoreUnicode, ignoreLength = options.ignoreLength, ignorePseudo = options.ignorePseudo, boldValue = options.boldValue, boldTextPt = options.boldTextPt, largeTextPt = options.largeTextPt, contrastRatio = options.contrastRatio, shadowOutlineEmMax = options.shadowOutlineEmMax, pseudoSizeThreshold = options.pseudoSizeThreshold;
      if (!_isVisibleOnScreen(node)) {
        this.data({
          messageKey: 'hidden'
        });
        return true;
      }
      var visibleText = visible_virtual_default(virtualNode, false, true);
      if (ignoreUnicode && textIsEmojis(visibleText)) {
        this.data({
          messageKey: 'nonBmp'
        });
        return void 0;
      }
      var nodeStyle = window.getComputedStyle(node);
      var fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));
      var fontWeight = nodeStyle.getPropertyValue('font-weight');
      var bold = parseFloat(fontWeight) >= boldValue || fontWeight === 'bold';
      var ptSize = Math.ceil(fontSize * 72) / 96;
      var isSmallFont = bold && ptSize < boldTextPt || !bold && ptSize < largeTextPt;
      var _ref131 = isSmallFont ? contrastRatio.normal : contrastRatio.large, expected = _ref131.expected, minThreshold = _ref131.minThreshold, maxThreshold = _ref131.maxThreshold;
      var pseudoElm = findPseudoElement(virtualNode, {
        ignorePseudo: ignorePseudo,
        pseudoSizeThreshold: pseudoSizeThreshold
      });
      if (pseudoElm) {
        this.data({
          fontSize: ''.concat((fontSize * 72 / 96).toFixed(1), 'pt (').concat(fontSize, 'px)'),
          fontWeight: bold ? 'bold' : 'normal',
          messageKey: 'pseudoContent',
          expectedContrastRatio: expected + ':1'
        });
        this.relatedNodes(pseudoElm.actualNode);
        return void 0;
      }
      var shadowColors = _getTextShadowColors(node, {
        minRatio: .001,
        maxRatio: shadowOutlineEmMax
      });
      if (shadowColors === null) {
        this.data({
          messageKey: 'complexTextShadows'
        });
        return void 0;
      }
      var bgNodes = [];
      var bgColor = _getBackgroundColor2(node, bgNodes, shadowOutlineEmMax);
      var fgColor = _getForegroundColor(node, false, bgColor, options);
      var contrast2 = null;
      var contrastContributor = null;
      var shadowColor = null;
      if (shadowColors.length === 0) {
        contrast2 = get_contrast_default(bgColor, fgColor);
      } else if (fgColor && bgColor) {
        shadowColor = [].concat(_toConsumableArray(shadowColors), [ bgColor ]).reduce(_flattenShadowColors);
        var fgBgContrast = get_contrast_default(bgColor, fgColor);
        var bgShContrast = get_contrast_default(bgColor, shadowColor);
        var fgShContrast = get_contrast_default(shadowColor, fgColor);
        contrast2 = Math.max(fgBgContrast, bgShContrast, fgShContrast);
        if (contrast2 !== fgBgContrast) {
          contrastContributor = bgShContrast > fgShContrast ? 'shadowOnBgColor' : 'fgOnShadowColor';
        }
      }
      var isValid = contrast2 > expected;
      if (typeof minThreshold === 'number' && (typeof contrast2 !== 'number' || contrast2 < minThreshold) || typeof maxThreshold === 'number' && (typeof contrast2 !== 'number' || contrast2 > maxThreshold)) {
        this.data({
          contrastRatio: contrast2
        });
        return true;
      }
      var truncatedResult = Math.floor(contrast2 * 100) / 100;
      var missing;
      if (bgColor === null) {
        missing = incomplete_data_default.get('bgColor');
      } else if (!isValid) {
        missing = contrastContributor;
      }
      var equalRatio = truncatedResult === 1;
      var shortTextContent = visibleText.length === 1;
      if (equalRatio) {
        missing = incomplete_data_default.set('bgColor', 'equalRatio');
      } else if (!isValid && shortTextContent && !ignoreLength) {
        missing = 'shortTextContent';
      }
      this.data({
        fgColor: fgColor ? fgColor.toHexString() : void 0,
        bgColor: bgColor ? bgColor.toHexString() : void 0,
        contrastRatio: truncatedResult,
        fontSize: ''.concat((fontSize * 72 / 96).toFixed(1), 'pt (').concat(fontSize, 'px)'),
        fontWeight: bold ? 'bold' : 'normal',
        messageKey: missing,
        expectedContrastRatio: expected + ':1',
        shadowColor: shadowColor ? shadowColor.toHexString() : void 0
      });
      if (fgColor === null || bgColor === null || equalRatio || shortTextContent && !ignoreLength && !isValid) {
        missing = null;
        incomplete_data_default.clear();
        this.relatedNodes(bgNodes);
        return void 0;
      }
      if (!isValid) {
        this.relatedNodes(bgNodes);
      }
      return isValid;
    }
    function findPseudoElement(vNode, _ref132) {
      var _ref132$pseudoSizeThr = _ref132.pseudoSizeThreshold, pseudoSizeThreshold = _ref132$pseudoSizeThr === void 0 ? .25 : _ref132$pseudoSizeThr, _ref132$ignorePseudo = _ref132.ignorePseudo, ignorePseudo = _ref132$ignorePseudo === void 0 ? false : _ref132$ignorePseudo;
      if (ignorePseudo) {
        return;
      }
      var rect = vNode.boundingClientRect;
      var minimumSize = rect.width * rect.height * pseudoSizeThreshold;
      do {
        var beforeSize = getPseudoElementArea(vNode.actualNode, ':before');
        var afterSize = getPseudoElementArea(vNode.actualNode, ':after');
        if (beforeSize + afterSize > minimumSize) {
          return vNode;
        }
      } while (vNode = vNode.parent);
    }
    var getPseudoElementArea = memoize_default(function getPseudoElementArea2(node, pseudo) {
      var style = window.getComputedStyle(node, pseudo);
      var matchPseudoStyle = function matchPseudoStyle(prop, value) {
        return style.getPropertyValue(prop) === value;
      };
      if (matchPseudoStyle('content', 'none') || matchPseudoStyle('display', 'none') || matchPseudoStyle('visibility', 'hidden') || matchPseudoStyle('position', 'absolute') === false) {
        return 0;
      }
      if (get_own_background_color_default(style).alpha === 0 && matchPseudoStyle('background-image', 'none')) {
        return 0;
      }
      var pseudoWidth = parseUnit(style.getPropertyValue('width'));
      var pseudoHeight = parseUnit(style.getPropertyValue('height'));
      if (pseudoWidth.unit !== 'px' || pseudoHeight.unit !== 'px') {
        return pseudoWidth.value === 0 || pseudoHeight.value === 0 ? 0 : Infinity;
      }
      return pseudoWidth.value * pseudoHeight.value;
    });
    function textIsEmojis(visibleText) {
      var options = {
        nonBmp: true
      };
      var hasUnicodeChars = has_unicode_default(visibleText, options);
      var hasNonUnicodeChars = sanitize_default(remove_unicode_default(visibleText, options)) === '';
      return hasUnicodeChars && hasNonUnicodeChars;
    }
    function parseUnit(str) {
      var unitRegex = /^([0-9.]+)([a-z]+)$/i;
      var _ref133 = str.match(unitRegex) || [], _ref134 = _slicedToArray(_ref133, 3), _ref134$ = _ref134[1], value = _ref134$ === void 0 ? '' : _ref134$, _ref134$2 = _ref134[2], unit = _ref134$2 === void 0 ? '' : _ref134$2;
      return {
        value: parseFloat(value),
        unit: unit.toLowerCase()
      };
    }
    var VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS = {
      ARTICLE: true,
      ASIDE: true,
      NAV: true,
      SECTION: true
    };
    var VALID_ROLES_FOR_SCROLLABLE_REGIONS = {
      alert: true,
      alertdialog: true,
      application: true,
      article: true,
      banner: false,
      complementary: true,
      contentinfo: true,
      dialog: true,
      form: true,
      log: true,
      main: true,
      navigation: true,
      region: true,
      search: false,
      status: true,
      tabpanel: true
    };
    function validScrollableTagName(node) {
      var nodeName2 = node.nodeName.toUpperCase();
      return VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS[nodeName2] || false;
    }
    function validScrollableRole(node, options) {
      var role = get_explicit_role_default(node);
      if (!role) {
        return false;
      }
      return VALID_ROLES_FOR_SCROLLABLE_REGIONS[role] || options.roles.includes(role) || false;
    }
    function validScrollableSemanticsEvaluate(node, options) {
      return validScrollableRole(node, options) || validScrollableTagName(node);
    }
    var valid_scrollable_semantics_evaluate_default = validScrollableSemanticsEvaluate;
    function unsupportedroleEvaluate(node, options, virtualNode) {
      var role = get_role_default(virtualNode, {
        dpub: true,
        fallback: true
      });
      var isUnsupported = is_unsupported_role_default(role);
      if (isUnsupported) {
        this.data(role);
      }
      return isUnsupported;
    }
    var unsupportedrole_evaluate_default = unsupportedroleEvaluate;
    function noImplicitExplicitLabelEvaluate(node, options, virtualNode) {
      var role = get_role_default(virtualNode, {
        noImplicit: true
      });
      this.data(role);
      var label3;
      var accText;
      try {
        label3 = sanitize_default(label_text_default(virtualNode)).toLowerCase();
        accText = sanitize_default(_accessibleTextVirtual(virtualNode)).toLowerCase();
      } catch (_unused17) {
        return void 0;
      }
      if (!accText && !label3) {
        return false;
      }
      if (!accText && label3) {
        return void 0;
      }
      if (!accText.includes(label3)) {
        return void 0;
      }
      return false;
    }
    var no_implicit_explicit_label_evaluate_default = noImplicitExplicitLabelEvaluate;
    function isElementFocusableEvaluate(node, options, virtualNode) {
      return _isFocusable(virtualNode);
    }
    var is_element_focusable_evaluate_default = isElementFocusableEvaluate;
    function invalidroleEvaluate(node, options, virtualNode) {
      var allRoles = token_list_default(virtualNode.attr('role'));
      var allInvalid = allRoles.every(function(role) {
        return !is_valid_role_default(role.toLowerCase(), {
          allowAbstract: true
        });
      });
      if (allInvalid) {
        this.data(allRoles);
        return true;
      }
      return false;
    }
    var invalidrole_evaluate_default = invalidroleEvaluate;
    function hasWidgetRoleEvaluate(node) {
      var role = node.getAttribute('role');
      if (role === null) {
        return false;
      }
      var roleType = get_role_type_default(role);
      return roleType === 'widget' || roleType === 'composite';
    }
    var has_widget_role_evaluate_default = hasWidgetRoleEvaluate;
    function hasGlobalAriaAttributeEvaluate(node, options, virtualNode) {
      var globalAttrs = get_global_aria_attrs_default().filter(function(attr) {
        return virtualNode.hasAttr(attr);
      });
      this.data(globalAttrs);
      return globalAttrs.length > 0;
    }
    var has_global_aria_attribute_evaluate_default = hasGlobalAriaAttributeEvaluate;
    function nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) {
      var hasImplicitRole = implicit_role_default(virtualNode);
      return !hasImplicitRole && explicitRoles.length === 2 && explicitRoles.includes('none') && explicitRoles.includes('presentation');
    }
    function fallbackroleEvaluate(node, options, virtualNode) {
      var explicitRoles = token_list_default(virtualNode.attr('role'));
      if (explicitRoles.length <= 1) {
        return false;
      }
      return nonePresentationOnElementWithNoImplicitRole(virtualNode, explicitRoles) ? void 0 : true;
    }
    var fallbackrole_evaluate_default = fallbackroleEvaluate;
    function deprecatedroleEvaluate(node, options, virtualNode) {
      var role = get_role_default(virtualNode, {
        dpub: true,
        fallback: true
      });
      var roleDefinition = standards_default.ariaRoles[role];
      if (!(roleDefinition !== null && roleDefinition !== void 0 && roleDefinition.deprecated)) {
        return false;
      }
      this.data(role);
      return true;
    }
    function brailleRoleDescriptionEquivalentEvaluate(node, options, virtualNode) {
      var _virtualNode$attr;
      var brailleRoleDesc = (_virtualNode$attr = virtualNode.attr('aria-brailleroledescription')) !== null && _virtualNode$attr !== void 0 ? _virtualNode$attr : '';
      if (sanitize_default(brailleRoleDesc) === '') {
        return true;
      }
      var roleDesc = virtualNode.attr('aria-roledescription');
      if (typeof roleDesc !== 'string') {
        this.data({
          messageKey: 'noRoleDescription'
        });
        return false;
      }
      if (sanitize_default(roleDesc) === '') {
        this.data({
          messageKey: 'emptyRoleDescription'
        });
        return false;
      }
      return true;
    }
    function brailleLabelEquivalentEvaluate(node, options, virtualNode) {
      var _virtualNode$attr2;
      var brailleLabel = (_virtualNode$attr2 = virtualNode.attr('aria-braillelabel')) !== null && _virtualNode$attr2 !== void 0 ? _virtualNode$attr2 : '';
      if (!brailleLabel.trim()) {
        return true;
      }
      try {
        return sanitize_default(_accessibleTextVirtual(virtualNode)) !== '';
      } catch (_unused18) {
        return void 0;
      }
    }
    function ariaValidAttrValueEvaluate(node, options, virtualNode) {
      options = Array.isArray(options.value) ? options.value : [];
      var needsReview = '';
      var messageKey = '';
      var invalid = [];
      var aria = /^aria-/;
      var skipAttrs = [ 'aria-errormessage' ];
      var preChecks = {
        'aria-controls': function ariaControls() {
          var hasPopup = [ 'false', null ].includes(virtualNode.attr('aria-haspopup')) === false;
          if (hasPopup) {
            needsReview = 'aria-controls="'.concat(virtualNode.attr('aria-controls'), '"');
            messageKey = 'controlsWithinPopup';
          }
          return virtualNode.attr('aria-expanded') !== 'false' && virtualNode.attr('aria-selected') !== 'false' && hasPopup === false;
        },
        'aria-current': function ariaCurrent(validValue) {
          if (!validValue) {
            needsReview = 'aria-current="'.concat(virtualNode.attr('aria-current'), '"');
            messageKey = 'ariaCurrent';
          }
          return;
        },
        'aria-owns': function ariaOwns() {
          return virtualNode.attr('aria-expanded') !== 'false';
        },
        'aria-describedby': function ariaDescribedby(validValue) {
          if (!validValue) {
            needsReview = 'aria-describedby="'.concat(virtualNode.attr('aria-describedby'), '"');
            messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? 'noIdShadow' : 'noId';
          }
          return;
        },
        'aria-labelledby': function ariaLabelledby(validValue) {
          if (!validValue) {
            needsReview = 'aria-labelledby="'.concat(virtualNode.attr('aria-labelledby'), '"');
            messageKey = axe._tree && axe._tree[0]._hasShadowRoot ? 'noIdShadow' : 'noId';
          }
        }
      };
      virtualNode.attrNames.forEach(function(attrName) {
        if (skipAttrs.includes(attrName) || options.includes(attrName) || !aria.test(attrName)) {
          return;
        }
        var validValue;
        var attrValue = virtualNode.attr(attrName);
        try {
          validValue = validate_attr_value_default(virtualNode, attrName);
        } catch (_unused19) {
          needsReview = ''.concat(attrName, '="').concat(attrValue, '"');
          messageKey = 'idrefs';
          return;
        }
        if ((preChecks[attrName] ? preChecks[attrName](validValue) : true) && !validValue) {
          if (attrValue === '' && !isStringType(attrName)) {
            needsReview = attrName;
            messageKey = 'empty';
          } else {
            invalid.push(''.concat(attrName, '="').concat(attrValue, '"'));
          }
        }
      });
      if (invalid.length) {
        this.data(invalid);
        return false;
      }
      if (needsReview) {
        this.data({
          messageKey: messageKey,
          needsReview: needsReview
        });
        return void 0;
      }
      return true;
    }
    function isStringType(attrName) {
      var _standards_default$ar;
      return ((_standards_default$ar = standards_default.ariaAttrs[attrName]) === null || _standards_default$ar === void 0 ? void 0 : _standards_default$ar.type) === 'string';
    }
    function ariaValidAttrEvaluate(node, options, virtualNode) {
      options = Array.isArray(options.value) ? options.value : [];
      var invalid = [];
      var aria = /^aria-/;
      virtualNode.attrNames.forEach(function(attr) {
        if (options.indexOf(attr) === -1 && aria.test(attr) && !validate_attr_default(attr)) {
          invalid.push(attr);
        }
      });
      if (invalid.length) {
        this.data(invalid);
        return false;
      }
      return true;
    }
    var aria_valid_attr_evaluate_default = ariaValidAttrEvaluate;
    function ariaUnsupportedAttrEvaluate(node, options, virtualNode) {
      var unsupportedAttrs = virtualNode.attrNames.filter(function(name) {
        var attribute = standards_default.ariaAttrs[name];
        if (!validate_attr_default(name)) {
          return false;
        }
        var unsupported = attribute.unsupported;
        if (_typeof(unsupported) !== 'object') {
          return !!unsupported;
        }
        return !matches_default2(node, unsupported.exceptions);
      });
      if (unsupportedAttrs.length) {
        this.data(unsupportedAttrs);
        return true;
      }
      return false;
    }
    var aria_unsupported_attr_evaluate_default = ariaUnsupportedAttrEvaluate;
    function ariaRoledescriptionEvaluate(node) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var role = get_role_default(virtualNode);
      var supportedRoles = options.supportedRoles || [];
      if (supportedRoles.includes(role)) {
        return true;
      }
      if (role && role !== 'presentation' && role !== 'none') {
        return void 0;
      }
      return false;
    }
    var aria_roledescription_evaluate_default = ariaRoledescriptionEvaluate;
    function getMissingContext(virtualNode, ownGroupRoles, reqContext, includeElement) {
      var explicitRole2 = get_explicit_role_default(virtualNode);
      if (!reqContext) {
        reqContext = required_context_default(explicitRole2);
      }
      if (!reqContext) {
        return null;
      }
      var allowsGroup = reqContext.includes('group');
      var vNode = includeElement ? virtualNode : virtualNode.parent;
      while (vNode) {
        var role = get_role_default(vNode, {
          noPresentational: true
        });
        if (!role) {
          vNode = vNode.parent;
        } else if (role === 'group' && allowsGroup) {
          if (ownGroupRoles.includes(explicitRole2)) {
            reqContext.push(explicitRole2);
          }
          reqContext = reqContext.filter(function(r) {
            return r !== 'group';
          });
          vNode = vNode.parent;
        } else if (reqContext.includes(role)) {
          return null;
        } else {
          return reqContext;
        }
      }
      return reqContext;
    }
    function getAriaOwners(element) {
      var owners = [];
      var o = null;
      while (element) {
        if (element.getAttribute('id')) {
          var _id5 = escape_selector_default(element.getAttribute('id'));
          var doc = get_root_node_default2(element);
          o = doc.querySelector('[aria-owns~='.concat(_id5, ']'));
          if (o) {
            owners.push(o);
          }
        }
        element = element.parentElement;
      }
      return owners.length ? owners : null;
    }
    function ariaRequiredParentEvaluate(node, options, virtualNode) {
      var ownGroupRoles = options && Array.isArray(options.ownGroupRoles) ? options.ownGroupRoles : [];
      var missingParents = getMissingContext(virtualNode, ownGroupRoles);
      if (!missingParents) {
        return true;
      }
      var owners = getAriaOwners(node);
      if (owners) {
        for (var _i42 = 0, l = owners.length; _i42 < l; _i42++) {
          missingParents = getMissingContext(get_node_from_tree_default(owners[_i42]), ownGroupRoles, missingParents, true);
          if (!missingParents) {
            return true;
          }
        }
      }
      this.data(missingParents);
      return false;
    }
    var aria_required_parent_evaluate_default = ariaRequiredParentEvaluate;
    function ariaRequiredChildrenEvaluate(node, options, virtualNode) {
      var reviewEmpty = options && Array.isArray(options.reviewEmpty) ? options.reviewEmpty : [];
      var explicitRole2 = get_explicit_role_default(virtualNode, {
        dpub: true
      });
      var required = required_owned_default(explicitRole2);
      if (required === null) {
        return true;
      }
      var ownedRoles = getOwnedRoles(virtualNode, required);
      var unallowed = ownedRoles.filter(function(_ref135) {
        var role = _ref135.role, vNode = _ref135.vNode;
        return vNode.props.nodeType === 1 && !required.includes(role);
      });
      if (unallowed.length) {
        this.relatedNodes(unallowed.map(function(_ref136) {
          var vNode = _ref136.vNode;
          return vNode;
        }));
        this.data({
          messageKey: 'unallowed',
          values: unallowed.map(function(_ref137) {
            var vNode = _ref137.vNode, attr = _ref137.attr;
            return getUnallowedSelector(vNode, attr);
          }).filter(function(selector, index, array) {
            return array.indexOf(selector) === index;
          }).join(', ')
        });
        return false;
      }
      if (hasRequiredChildren(required, ownedRoles)) {
        return true;
      }
      if (virtualNode.attr('aria-busy') === 'true') {
        this.data({
          messageKey: 'aria-busy'
        });
        return true;
      }
      this.data(required);
      if (reviewEmpty.includes(explicitRole2) && !ownedRoles.some(isContent)) {
        return void 0;
      }
      return false;
    }
    function getOwnedRoles(virtualNode, required) {
      var vNode;
      var ownedRoles = [];
      var ownedVirtual = get_owned_virtual_default(virtualNode);
      var _loop10 = function _loop10() {
        if (vNode.props.nodeType === 3) {
          ownedRoles.push({
            vNode: vNode,
            role: null
          });
        }
        if (vNode.props.nodeType !== 1 || !_isVisibleToScreenReaders(vNode)) {
          return 1;
        }
        var role = get_role_default(vNode, {
          noPresentational: true
        });
        var globalAriaAttr = getGlobalAriaAttr(vNode);
        var hasGlobalAriaOrFocusable = !!globalAriaAttr || _isFocusable(vNode);
        if (!role && !hasGlobalAriaOrFocusable || [ 'group', 'rowgroup' ].includes(role) && required.some(function(requiredRole) {
          return requiredRole === role;
        })) {
          ownedVirtual.push.apply(ownedVirtual, _toConsumableArray(vNode.children));
        } else if (role || hasGlobalAriaOrFocusable) {
          var attr = globalAriaAttr || 'tabindex';
          ownedRoles.push({
            role: role,
            attr: attr,
            vNode: vNode
          });
        }
      };
      while (vNode = ownedVirtual.shift()) {
        if (_loop10()) {
          continue;
        }
      }
      return ownedRoles;
    }
    function hasRequiredChildren(required, ownedRoles) {
      return ownedRoles.some(function(_ref138) {
        var role = _ref138.role;
        return role && required.includes(role);
      });
    }
    function getGlobalAriaAttr(vNode) {
      return get_global_aria_attrs_default().find(function(attr) {
        return vNode.hasAttr(attr);
      });
    }
    function getUnallowedSelector(vNode, attr) {
      var _vNode$props = vNode.props, nodeName2 = _vNode$props.nodeName, nodeType = _vNode$props.nodeType;
      if (nodeType === 3) {
        return '#text';
      }
      var role = get_explicit_role_default(vNode, {
        dpub: true
      });
      if (role) {
        return '[role='.concat(role, ']');
      }
      if (attr) {
        return nodeName2 + '['.concat(attr, ']');
      }
      return nodeName2;
    }
    function isContent(_ref139) {
      var vNode = _ref139.vNode;
      if (vNode.props.nodeType === 3) {
        return vNode.props.nodeValue.trim().length > 0;
      }
      return has_content_virtual_default(vNode, false, true);
    }
    function ariaRequiredAttrEvaluate(node) {
      var _virtualNode$attr3;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var role = get_explicit_role_default(virtualNode);
      var attrs = virtualNode.attrNames;
      var requiredAttrs = required_attr_default(role);
      if (Array.isArray(options[role])) {
        requiredAttrs = unique_array_default(options[role], requiredAttrs);
      }
      if (!role || !attrs.length || !requiredAttrs.length) {
        return true;
      }
      if (isStaticSeparator(virtualNode, role) || isClosedCombobox(virtualNode, role)) {
        return true;
      }
      if (role === 'slider' && (_virtualNode$attr3 = virtualNode.attr('aria-valuetext')) !== null && _virtualNode$attr3 !== void 0 && _virtualNode$attr3.trim()) {
        return true;
      }
      var elmSpec = get_element_spec_default(virtualNode);
      var missingAttrs = requiredAttrs.filter(function(requiredAttr2) {
        return !virtualNode.attr(requiredAttr2) && !hasImplicitAttr(elmSpec, requiredAttr2);
      });
      if (missingAttrs.length) {
        this.data(missingAttrs);
        return false;
      }
      return true;
    }
    function isStaticSeparator(vNode, role) {
      return role === 'separator' && !_isFocusable(vNode);
    }
    function hasImplicitAttr(elmSpec, attr) {
      var _elmSpec$implicitAttr;
      return ((_elmSpec$implicitAttr = elmSpec.implicitAttrs) === null || _elmSpec$implicitAttr === void 0 ? void 0 : _elmSpec$implicitAttr[attr]) !== void 0;
    }
    function isClosedCombobox(vNode, role) {
      return role === 'combobox' && vNode.attr('aria-expanded') === 'false';
    }
    function ariaProhibitedAttrEvaluate(node) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var elementsAllowedAriaLabel = (options === null || options === void 0 ? void 0 : options.elementsAllowedAriaLabel) || [];
      var nodeName2 = virtualNode.props.nodeName;
      var role = get_role_default(virtualNode, {
        chromium: true
      });
      var prohibitedList = listProhibitedAttrs(virtualNode, role, nodeName2, elementsAllowedAriaLabel);
      var prohibited = prohibitedList.filter(function(attrName) {
        if (!virtualNode.attrNames.includes(attrName)) {
          return false;
        }
        return sanitize_default(virtualNode.attr(attrName)) !== '';
      });
      if (prohibited.length === 0) {
        return false;
      }
      var messageKey = virtualNode.hasAttr('role') ? 'hasRole' : 'noRole';
      messageKey += prohibited.length > 1 ? 'Plural' : 'Singular';
      this.data({
        role: role,
        nodeName: nodeName2,
        messageKey: messageKey,
        prohibited: prohibited
      });
      var textContent = subtree_text_default(virtualNode, {
        subtreeDescendant: true
      });
      if (sanitize_default(textContent) !== '') {
        return void 0;
      }
      return true;
    }
    function listProhibitedAttrs(vNode, role, nodeName2, elementsAllowedAriaLabel) {
      var roleSpec = standards_default.ariaRoles[role];
      if (roleSpec) {
        return roleSpec.prohibitedAttrs || [];
      }
      if (!!role || elementsAllowedAriaLabel.includes(nodeName2) || getClosestAncestorRoleType(vNode) === 'widget') {
        return [];
      }
      return [ 'aria-label', 'aria-labelledby' ];
    }
    var getClosestAncestorRoleType = memoize_default(function getClosestAncestorRoleTypeMemoized(vNode) {
      if (!vNode) {
        return;
      }
      var role = get_role_default(vNode, {
        noPresentational: true,
        chromium: true
      });
      if (role) {
        return get_role_type_default(role);
      }
      return getClosestAncestorRoleType(vNode.parent);
    });
    function ariaLevelEvaluate(node, options, virtualNode) {
      var ariaHeadingLevel = virtualNode.attr('aria-level');
      var ariaLevel = parseInt(ariaHeadingLevel, 10);
      if (ariaLevel > 6) {
        return void 0;
      }
      return true;
    }
    var aria_level_evaluate_default = ariaLevelEvaluate;
    function ariaHiddenBodyEvaluate(node, options, virtualNode) {
      return virtualNode.attr('aria-hidden') !== 'true';
    }
    var aria_hidden_body_evaluate_default = ariaHiddenBodyEvaluate;
    function ariaErrormessageEvaluate(node, options, virtualNode) {
      options = Array.isArray(options) ? options : [];
      var errorMessageAttr = virtualNode.attr('aria-errormessage');
      var hasAttr = virtualNode.hasAttr('aria-errormessage');
      var invaid = virtualNode.attr('aria-invalid');
      var hasInvallid = virtualNode.hasAttr('aria-invalid');
      if (!hasInvallid || invaid === 'false') {
        return true;
      }
      function validateAttrValue2(attr) {
        if (attr.trim() === '') {
          return standards_default.ariaAttrs['aria-errormessage'].allowEmpty;
        }
        var idref;
        try {
          idref = attr && idrefs_default(virtualNode, 'aria-errormessage')[0];
        } catch (_unused20) {
          this.data({
            messageKey: 'idrefs',
            values: token_list_default(attr)
          });
          return void 0;
        }
        if (idref) {
          if (!_isVisibleToScreenReaders(idref)) {
            this.data({
              messageKey: 'hidden',
              values: token_list_default(attr)
            });
            return false;
          }
          return idref.getAttribute('role') === 'alert' || idref.getAttribute('aria-live') === 'assertive' || idref.getAttribute('aria-live') === 'polite' || token_list_default(virtualNode.attr('aria-describedby')).indexOf(attr) > -1;
        }
        return;
      }
      if (options.indexOf(errorMessageAttr) === -1 && hasAttr) {
        this.data(token_list_default(errorMessageAttr));
        return validateAttrValue2.call(this, errorMessageAttr);
      }
      return true;
    }
    function ariaConditionalRowAttr(node) {
      var _invalidTableRowAttrs, _invalidTableRowAttrs2;
      var _ref140 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, invalidTableRowAttrs = _ref140.invalidTableRowAttrs;
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var invalidAttrs = (_invalidTableRowAttrs = invalidTableRowAttrs === null || invalidTableRowAttrs === void 0 || (_invalidTableRowAttrs2 = invalidTableRowAttrs.filter) === null || _invalidTableRowAttrs2 === void 0 ? void 0 : _invalidTableRowAttrs2.call(invalidTableRowAttrs, function(invalidAttr) {
        return virtualNode.hasAttr(invalidAttr);
      })) !== null && _invalidTableRowAttrs !== void 0 ? _invalidTableRowAttrs : [];
      if (invalidAttrs.length === 0) {
        return true;
      }
      var owner = getRowOwner(virtualNode);
      var ownerRole = owner && get_role_default(owner);
      if (!ownerRole || ownerRole === 'treegrid') {
        return true;
      }
      var messageKey = 'row'.concat(invalidAttrs.length > 1 ? 'Plural' : 'Singular');
      this.data({
        messageKey: messageKey,
        invalidAttrs: invalidAttrs,
        ownerRole: ownerRole
      });
      return false;
    }
    function getRowOwner(virtualNode) {
      if (!virtualNode.parent) {
        return;
      }
      var rowOwnerQuery = 'table:not([role]), [role~="treegrid"], [role~="table"], [role~="grid"]';
      return closest_default(virtualNode, rowOwnerQuery);
    }
    function ariaConditionalCheckboxAttr(node, options, virtualNode) {
      var _virtualNode$props = virtualNode.props, nodeName2 = _virtualNode$props.nodeName, type2 = _virtualNode$props.type;
      var ariaChecked = normalizeAriaChecked(virtualNode.attr('aria-checked'));
      if (nodeName2 !== 'input' || type2 !== 'checkbox' || !ariaChecked) {
        return true;
      }
      var checkState = getCheckState(virtualNode);
      if (ariaChecked === checkState) {
        return true;
      }
      this.data({
        messageKey: 'checkbox',
        checkState: checkState
      });
      return false;
    }
    function getCheckState(vNode) {
      if (vNode.props.indeterminate) {
        return 'mixed';
      }
      return vNode.props.checked ? 'true' : 'false';
    }
    function normalizeAriaChecked(ariaCheckedVal) {
      if (!ariaCheckedVal) {
        return '';
      }
      ariaCheckedVal = ariaCheckedVal.toLowerCase();
      if ([ 'mixed', 'true' ].includes(ariaCheckedVal)) {
        return ariaCheckedVal;
      }
      return 'false';
    }
    var conditionalRoleMap = {
      row: ariaConditionalRowAttr,
      checkbox: ariaConditionalCheckboxAttr
    };
    function ariaConditionalAttrEvaluate(node, options, virtualNode) {
      var role = get_role_default(virtualNode);
      if (!conditionalRoleMap[role]) {
        return true;
      }
      return conditionalRoleMap[role].call(this, node, options, virtualNode);
    }
    function ariaBusyEvaluate(node, options, virtualNode) {
      return virtualNode.attr('aria-busy') === 'true';
    }
    function ariaAllowedRoleEvaluate(node) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var virtualNode = arguments.length > 2 ? arguments[2] : undefined;
      var _options$allowImplici = options.allowImplicit, allowImplicit = _options$allowImplici === void 0 ? true : _options$allowImplici, _options$ignoredTags = options.ignoredTags, ignoredTags = _options$ignoredTags === void 0 ? [] : _options$ignoredTags;
      var nodeName2 = virtualNode.props.nodeName;
      if (ignoredTags.map(function(tag) {
        return tag.toLowerCase();
      }).includes(nodeName2)) {
        return true;
      }
      var unallowedRoles = get_element_unallowed_roles_default(virtualNode, allowImplicit);
      if (unallowedRoles.length) {
        this.data(unallowedRoles);
        if (!_isVisibleToScreenReaders(virtualNode)) {
          return void 0;
        }
        return false;
      }
      return true;
    }
    var aria_allowed_role_evaluate_default = ariaAllowedRoleEvaluate;
    function ariaAllowedAttrEvaluate(node, options, virtualNode) {
      var invalid = [];
      var role = get_role_default(virtualNode);
      var allowed = allowed_attr_default(role);
      if (Array.isArray(options[role])) {
        allowed = unique_array_default(options[role].concat(allowed));
      }
      var _iterator21 = _createForOfIteratorHelper(virtualNode.attrNames), _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
          var attrName = _step21.value;
          if (validate_attr_default(attrName) && !allowed.includes(attrName) && !ignoredAttrs(attrName, virtualNode.attr(attrName), virtualNode)) {
            invalid.push(attrName);
          }
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      if (!invalid.length) {
        return true;
      }
      this.data(invalid.map(function(attrName) {
        return attrName + '="' + virtualNode.attr(attrName) + '"';
      }));
      if (!role && !is_html_element_default(virtualNode) && !_isFocusable(virtualNode)) {
        return void 0;
      }
      return false;
    }
    function ignoredAttrs(attrName, attrValue, vNode) {
      if (attrName === 'aria-required' && attrValue === 'false') {
        return true;
      }
      if (attrName === 'aria-multiline' && attrValue === 'false' && vNode.hasAttr('contenteditable')) {
        return true;
      }
      return false;
    }
    function abstractroleEvaluate(node, options, virtualNode) {
      var abstractRoles = token_list_default(virtualNode.attr('role')).filter(function(role) {
        return get_role_type_default(role) === 'abstract';
      });
      if (abstractRoles.length > 0) {
        this.data(abstractRoles);
        return true;
      }
      return false;
    }
    var abstractrole_evaluate_default = abstractroleEvaluate;
    function xmlLangMismatchMatches(node) {
      var primaryLangValue = get_base_lang_default(node.getAttribute('lang'));
      var primaryXmlLangValue = get_base_lang_default(node.getAttribute('xml:lang'));
      return valid_langs_default(primaryLangValue) && valid_langs_default(primaryXmlLangValue);
    }
    var xml_lang_mismatch_matches_default = xmlLangMismatchMatches;
    function windowIsTopMatches(node) {
      return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;
    }
    var window_is_top_matches_default = windowIsTopMatches;
    function svgNamespaceMatches(node, virtualNode) {
      try {
        var nodeName2 = virtualNode.props.nodeName;
        if (nodeName2 === 'svg') {
          return true;
        }
        return !!closest_default(virtualNode, 'svg');
      } catch (_unused21) {
        return false;
      }
    }
    var svg_namespace_matches_default = svgNamespaceMatches;
    function widgetNotInline(node, vNode) {
      return matchesFns.every(function(fn) {
        return fn(node, vNode);
      });
    }
    var matchesFns = [ function(node, vNode) {
      return isWidgetType(vNode);
    }, function(node, vNode) {
      return isNotAreaElement(vNode);
    }, function(node, vNode) {
      return !svg_namespace_matches_default(node, vNode);
    }, function(node, vNode) {
      return _isFocusable(vNode);
    }, function(node, vNode) {
      return _isInTabOrder(vNode) || !hasWidgetAncestorInTabOrder(vNode);
    }, function(node) {
      return !is_in_text_block_default(node, {
        noLengthCompare: true
      });
    } ];
    function isWidgetType(vNode) {
      return get_role_type_default(vNode) === 'widget';
    }
    function isNotAreaElement(vNode) {
      return vNode.props.nodeName !== 'area';
    }
    var hasWidgetAncestorInTabOrder = memoize_default(function hasWidgetAncestorInTabOrderMemoized(vNode) {
      if (!(vNode !== null && vNode !== void 0 && vNode.parent)) {
        return false;
      }
      if (isWidgetType(vNode.parent) && _isInTabOrder(vNode.parent)) {
        return true;
      }
      return hasWidgetAncestorInTabOrderMemoized(vNode.parent);
    });
    function tableOrGridRoleMatches(_, vNode) {
      var role = get_role_default(vNode);
      return [ 'treegrid', 'grid', 'table' ].includes(role);
    }
    function summaryIsInteractiveMatches(_, virtualNode) {
      var parent = virtualNode.parent;
      if (parent.props.nodeName !== 'details' || isSlottedElm(virtualNode)) {
        return false;
      }
      var firstSummary = parent.children.find(function(child) {
        return child.props.nodeName === 'summary';
      });
      if (firstSummary !== virtualNode) {
        return false;
      }
      return true;
    }
    function isSlottedElm(vNode) {
      var _vNode$actualNode;
      var domParent = (_vNode$actualNode = vNode.actualNode) === null || _vNode$actualNode === void 0 ? void 0 : _vNode$actualNode.parentElement;
      return domParent && domParent !== vNode.parent.actualNode;
    }
    function skipLinkMatches(node) {
      return _isSkipLink(node) && is_offscreen_default(node);
    }
    var skip_link_matches_default = skipLinkMatches;
    function scrollableRegionFocusableMatches(node, virtualNode) {
      return get_scroll_default(node, 13) !== void 0 && _isComboboxPopup(virtualNode) === false && isNoneEmptyElement(virtualNode);
    }
    function isNoneEmptyElement(vNode) {
      return query_selector_all_default(vNode, '*').some(function(elm) {
        return has_content_virtual_default(elm, true, true);
      });
    }
    function presentationRoleConflictMatches(node, virtualNode) {
      return implicit_role_default(virtualNode, {
        chromiumRoles: true
      }) !== null;
    }
    var presentation_role_conflict_matches_default = presentationRoleConflictMatches;
    function pAsHeadingMatches(node) {
      var children = Array.from(node.parentNode.childNodes);
      var nodeText = node.textContent.trim();
      var isSentence = /[.!?:;](?![.!?:;])/g;
      if (nodeText.length === 0 || (nodeText.match(isSentence) || []).length >= 2) {
        return false;
      }
      var siblingsAfter = children.slice(children.indexOf(node) + 1).filter(function(elm) {
        return elm.nodeName.toUpperCase() === 'P' && elm.textContent.trim() !== '';
      });
      return siblingsAfter.length !== 0;
    }
    var p_as_heading_matches_default = pAsHeadingMatches;
    function noExplicitNameRequired(node, virtualNode) {
      var role = get_explicit_role_default(virtualNode);
      if (!role || [ 'none', 'presentation' ].includes(role)) {
        return true;
      }
      var _ref141 = aria_roles_default[role] || {}, accessibleNameRequired = _ref141.accessibleNameRequired;
      if (accessibleNameRequired || _isFocusable(virtualNode)) {
        return true;
      }
      return false;
    }
    var no_explicit_name_required_matches_default = noExplicitNameRequired;
    var object_is_loaded_matches_default = function object_is_loaded_matches_default(node, vNode) {
      return [ no_explicit_name_required_matches_default, objectHasLoaded ].every(function(fn) {
        return fn(node, vNode);
      });
    };
    function objectHasLoaded(node) {
      var _node$ownerDocument;
      if (!(node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.createRange)) {
        return true;
      }
      var range2 = node.ownerDocument.createRange();
      range2.setStart(node, 0);
      range2.setEnd(node, node.childNodes.length);
      return range2.getClientRects().length === 0;
    }
    function notHtmlMatches(node, virtualNode) {
      return virtualNode.props.nodeName !== 'html';
    }
    var not_html_matches_default = notHtmlMatches;
    function noRoleMatches(node, vNode) {
      return !vNode.attr('role');
    }
    var no_role_matches_default = noRoleMatches;
    function noNegativeTabindexMatches(node, virtualNode) {
      var tabindex = parse_tabindex_default(virtualNode.attr('tabindex'));
      return tabindex === null || tabindex >= 0;
    }
    var no_negative_tabindex_matches_default = noNegativeTabindexMatches;
    function noNamingMethodMatches(node, virtualNode) {
      var _get_element_spec_def3 = get_element_spec_default(virtualNode), namingMethods = _get_element_spec_def3.namingMethods;
      if (namingMethods && namingMethods.length !== 0) {
        return false;
      }
      if (get_explicit_role_default(virtualNode) === 'combobox' && query_selector_all_default(virtualNode, 'input:not([type="hidden"])').length) {
        return false;
      }
      if (_isComboboxPopup(virtualNode, {
        popupRoles: [ 'listbox' ]
      })) {
        return false;
      }
      return true;
    }
    var no_naming_method_matches_default = noNamingMethodMatches;
    function noEmptyRoleMatches(node, virtualNode) {
      if (!virtualNode.hasAttr('role')) {
        return false;
      }
      if (!virtualNode.attr('role').trim()) {
        return false;
      }
      return true;
    }
    var no_empty_role_matches_default = noEmptyRoleMatches;
    function noAutoplayAudioMatches(node) {
      if (!node.currentSrc) {
        return false;
      }
      if (node.hasAttribute('paused') || node.hasAttribute('muted')) {
        return false;
      }
      return true;
    }
    var no_autoplay_audio_matches_default = noAutoplayAudioMatches;
    function nestedInteractiveMatches(node, virtualNode) {
      var role = get_role_default(virtualNode);
      if (!role) {
        return false;
      }
      return !!standards_default.ariaRoles[role].childrenPresentational;
    }
    var nested_interactive_matches_default = nestedInteractiveMatches;
    function linkInTextBlockMatches(node) {
      var text = sanitize_default(node.innerText);
      var role = node.getAttribute('role');
      if (role && role !== 'link') {
        return false;
      }
      if (!text) {
        return false;
      }
      if (!_isVisibleOnScreen(node)) {
        return false;
      }
      return is_in_text_block_default(node);
    }
    var link_in_text_block_matches_default = linkInTextBlockMatches;
    function dataTableMatches(node) {
      return !is_data_table_default(node) && !_isFocusable(node);
    }
    var layout_table_matches_default = dataTableMatches;
    function landmarkUniqueMatches(node, virtualNode) {
      return isLandmarkVirtual(virtualNode) && _isVisibleToScreenReaders(virtualNode);
    }
    function isLandmarkVirtual(vNode) {
      var landmarkRoles2 = get_aria_roles_by_type_default('landmark');
      var role = get_role_default(vNode);
      if (!role) {
        return false;
      }
      var nodeName2 = vNode.props.nodeName;
      if (nodeName2 === 'section' || nodeName2 === 'form') {
        var accessibleText2 = _accessibleTextVirtual(vNode);
        return !!accessibleText2;
      }
      return landmarkRoles2.indexOf(role) >= 0 || role === 'region';
    }
    function landmarkHasBodyContextMatches(node, virtualNode) {
      var nativeScopeFilter = 'article, aside, main, nav, section';
      return node.hasAttribute('role') || !find_up_virtual_default(virtualNode, nativeScopeFilter);
    }
    var landmark_has_body_context_matches_default = landmarkHasBodyContextMatches;
    function labelMatches(node, virtualNode) {
      if (virtualNode.props.nodeName !== 'input' || virtualNode.hasAttr('type') === false) {
        return true;
      }
      var type2 = virtualNode.attr('type').toLowerCase();
      return [ 'hidden', 'image', 'button', 'submit', 'reset' ].includes(type2) === false;
    }
    var label_matches_default = labelMatches;
    function labelContentNameMismatchMatches(node, virtualNode) {
      var role = get_role_default(node);
      if (!role) {
        return false;
      }
      var widgetRoles = get_aria_roles_by_type_default('widget');
      var isWidgetType2 = widgetRoles.includes(role);
      if (!isWidgetType2) {
        return false;
      }
      var rolesWithNameFromContents = get_aria_roles_supporting_name_from_content_default();
      if (!rolesWithNameFromContents.includes(role)) {
        return false;
      }
      if (!sanitize_default(_arialabelText(virtualNode)) && !sanitize_default(arialabelledby_text_default(node))) {
        return false;
      }
      if (!sanitize_default(visible_virtual_default(virtualNode))) {
        return false;
      }
      return true;
    }
    var label_content_name_mismatch_matches_default = labelContentNameMismatchMatches;
    function isVisibleOnScreenMatches(node, virtualNode) {
      return _isVisibleOnScreen(virtualNode);
    }
    function hasVisibleTextMatches(node) {
      return _isVisibleOnScreen(node);
    }
    function isInitiatorMatches(node, virtualNode, context) {
      return context.initiator;
    }
    var is_initiator_matches_default = isInitiatorMatches;
    function insertedIntoFocusOrderMatches(node) {
      return inserted_into_focus_order_default(node);
    }
    var inserted_into_focus_order_matches_default = insertedIntoFocusOrderMatches;
    function identicalLinksSamePurposeMatches(node, virtualNode) {
      var hasAccName = !!_accessibleTextVirtual(virtualNode);
      if (!hasAccName) {
        return false;
      }
      var role = get_role_default(node);
      if (role && role !== 'link') {
        return false;
      }
      return true;
    }
    var identical_links_same_purpose_matches_default = identicalLinksSamePurposeMatches;
    function htmlNamespaceMatches(node, virtualNode) {
      return !svg_namespace_matches_default(node, virtualNode);
    }
    var html_namespace_matches_default = htmlNamespaceMatches;
    function headingMatches(node, virtualNode) {
      return get_role_default(virtualNode) === 'heading';
    }
    function hasImplicitChromiumRoleMatches(node, virtualNode) {
      return implicit_role_default(virtualNode, {
        chromium: true
      }) !== null;
    }
    var has_implicit_chromium_role_matches_default = hasImplicitChromiumRoleMatches;
    function frameTitleHasTextMatches(node) {
      var title = node.getAttribute('title');
      return !!sanitize_default(title);
    }
    var frame_title_has_text_matches_default = frameTitleHasTextMatches;
    function frameFocusableContentMatches(node, virtualNode, context) {
      var _context$size, _context$size2;
      return !context.initiator && !context.focusable && ((_context$size = context.size) === null || _context$size === void 0 ? void 0 : _context$size.width) * ((_context$size2 = context.size) === null || _context$size2 === void 0 ? void 0 : _context$size2.height) > 1;
    }
    var frame_focusable_content_matches_default = frameFocusableContentMatches;
    function duplicateIdMiscMatches(node) {
      var id = node.getAttribute('id').trim();
      var idSelector = '*[id="'.concat(escape_selector_default(id), '"]');
      var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));
      return !is_accessible_ref_default(node) && idMatchingElms.every(function(elm) {
        return !_isFocusable(elm);
      });
    }
    var duplicate_id_misc_matches_default = duplicateIdMiscMatches;
    function duplicateIdAriaMatches(node) {
      return is_accessible_ref_default(node);
    }
    var duplicate_id_aria_matches_default = duplicateIdAriaMatches;
    function duplicateIdActiveMatches(node) {
      var id = node.getAttribute('id').trim();
      var idSelector = '*[id="'.concat(escape_selector_default(id), '"]');
      var idMatchingElms = Array.from(get_root_node_default2(node).querySelectorAll(idSelector));
      return !is_accessible_ref_default(node) && idMatchingElms.some(_isFocusable);
    }
    var duplicate_id_active_matches_default = duplicateIdActiveMatches;
    function dataTableMatches2(node) {
      return is_data_table_default(node);
    }
    var data_table_matches_default = dataTableMatches2;
    function dataTableLargeMatches(node) {
      if (is_data_table_default(node)) {
        var tableArray = to_grid_default(node);
        return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;
      }
      return false;
    }
    var data_table_large_matches_default = dataTableLargeMatches;
    function colorContrastMatches(node, virtualNode) {
      var _virtualNode$props2 = virtualNode.props, nodeName2 = _virtualNode$props2.nodeName, inputType = _virtualNode$props2.type;
      if (nodeName2 === 'option') {
        return false;
      }
      if (nodeName2 === 'select' && !node.options.length) {
        return false;
      }
      var nonTextInput = [ 'hidden', 'range', 'color', 'checkbox', 'radio', 'image' ];
      if (nodeName2 === 'input' && nonTextInput.includes(inputType)) {
        return false;
      }
      if (is_disabled_default(virtualNode) || _isInert(virtualNode)) {
        return false;
      }
      var formElements = [ 'input', 'select', 'textarea' ];
      if (formElements.includes(nodeName2)) {
        var style = window.getComputedStyle(node);
        var textIndent = parseInt(style.getPropertyValue('text-indent'), 10);
        if (textIndent) {
          var rect = node.getBoundingClientRect();
          rect = {
            top: rect.top,
            bottom: rect.bottom,
            left: rect.left + textIndent,
            right: rect.right + textIndent
          };
          if (!visually_overlaps_default(rect, node)) {
            return false;
          }
        }
        return true;
      }
      var nodeParentLabel = find_up_virtual_default(virtualNode, 'label');
      if (nodeName2 === 'label' || nodeParentLabel) {
        var labelNode = nodeParentLabel || node;
        var labelVirtual3 = nodeParentLabel ? get_node_from_tree_default(nodeParentLabel) : virtualNode;
        if (labelNode.htmlFor) {
          var doc = get_root_node_default2(labelNode);
          var explicitControl = doc.getElementById(labelNode.htmlFor);
          var explicitControlVirtual = explicitControl && get_node_from_tree_default(explicitControl);
          if (explicitControlVirtual && is_disabled_default(explicitControlVirtual)) {
            return false;
          }
        }
        var query = 'input:not([type="hidden"],[type="image"],[type="button"],[type="submit"],[type="reset"]), select, textarea';
        var implicitControl = query_selector_all_default(labelVirtual3, query)[0];
        if (implicitControl && is_disabled_default(implicitControl)) {
          return false;
        }
      }
      var ariaLabelledbyControls = [];
      var ancestorNode = virtualNode;
      while (ancestorNode) {
        if (ancestorNode.props.id) {
          var virtualControls = get_accessible_refs_default(ancestorNode).filter(function(control) {
            return token_list_default(control.getAttribute('aria-labelledby') || '').includes(ancestorNode.props.id);
          }).map(function(control) {
            return get_node_from_tree_default(control);
          });
          ariaLabelledbyControls.push.apply(ariaLabelledbyControls, _toConsumableArray(virtualControls));
        }
        ancestorNode = ancestorNode.parent;
      }
      if (ariaLabelledbyControls.length > 0 && ariaLabelledbyControls.every(is_disabled_default)) {
        return false;
      }
      if (!hasRealTextChildren(virtualNode)) {
        return false;
      }
      var range2 = document.createRange();
      var childNodes = virtualNode.children;
      for (var index = 0; index < childNodes.length; index++) {
        var child = childNodes[index];
        if (child.actualNode.nodeType === 3 && sanitize_default(child.actualNode.nodeValue) !== '') {
          range2.selectNodeContents(child.actualNode);
        }
      }
      var rects = Array.from(range2.getClientRects());
      var clippingAncestors = get_overflow_hidden_ancestors_default(virtualNode);
      return rects.some(function(rect) {
        var overlaps = visually_overlaps_default(rect, node);
        if (!clippingAncestors.length) {
          return overlaps;
        }
        var withinOverflow = clippingAncestors.some(function(overflowNode) {
          return _rectsOverlap(rect, overflowNode.boundingClientRect);
        });
        return overlaps && withinOverflow;
      });
    }
    var color_contrast_matches_default = colorContrastMatches;
    var removeUnicodeOptions = {
      emoji: true,
      nonBmp: false,
      punctuations: true
    };
    function hasRealTextChildren(virtualNode) {
      var visibleText = visible_virtual_default(virtualNode, false, true);
      if (visibleText === '' || remove_unicode_default(visibleText, removeUnicodeOptions) === '') {
        return false;
      }
      return virtualNode.children.some(function(vChild) {
        return vChild.props.nodeName === '#text' && !_isIconLigature(vChild);
      });
    }
    function bypassMatches(node, virtualNode, context) {
      if (is_initiator_matches_default(node, virtualNode, context)) {
        return !!node.querySelector('a[href]');
      }
      return true;
    }
    var bypass_matches_default = bypassMatches;
    function autocompleteMatches(node, virtualNode) {
      var autocomplete2 = virtualNode.attr('autocomplete');
      if (!autocomplete2 || sanitize_default(autocomplete2) === '') {
        return false;
      }
      var nodeName2 = virtualNode.props.nodeName;
      if ([ 'textarea', 'input', 'select' ].includes(nodeName2) === false) {
        return false;
      }
      var excludedInputTypes = [ 'submit', 'reset', 'button', 'hidden' ];
      if (nodeName2 === 'input' && excludedInputTypes.includes(virtualNode.props.type)) {
        return false;
      }
      var ariaDisabled = virtualNode.attr('aria-disabled') || 'false';
      if (virtualNode.hasAttr('disabled') || ariaDisabled.toLowerCase() === 'true') {
        return false;
      }
      var role = virtualNode.attr('role');
      var tabIndex = parse_tabindex_default(virtualNode.attr('tabindex'));
      if (tabIndex < 0 && role) {
        var roleDef = standards_default.ariaRoles[role];
        if (roleDef === void 0 || roleDef.type !== 'widget') {
          return false;
        }
      }
      if (tabIndex < 0 && virtualNode.actualNode && !_isVisibleOnScreen(virtualNode) && !_isVisibleToScreenReaders(virtualNode)) {
        return false;
      }
      return true;
    }
    var autocomplete_matches_default = autocompleteMatches;
    function ariaRequiredParentMatches(node, virtualNode) {
      var role = get_explicit_role_default(virtualNode);
      return !!required_context_default(role);
    }
    var aria_required_parent_matches_default = ariaRequiredParentMatches;
    function ariaRequiredChildrenMatches(node, virtualNode) {
      var role = get_explicit_role_default(virtualNode, {
        dpub: true
      });
      return !!required_owned_default(role);
    }
    var aria_required_children_matches_default = ariaRequiredChildrenMatches;
    function shouldMatchElement(el) {
      if (!el) {
        return true;
      }
      if (el.getAttribute('aria-hidden') === 'true') {
        return false;
      }
      return shouldMatchElement(get_composed_parent_default(el));
    }
    function ariaHiddenFocusMatches(node) {
      return shouldMatchElement(get_composed_parent_default(node));
    }
    var aria_hidden_focus_matches_default = ariaHiddenFocusMatches;
    function ariaHasAttrMatches(node, virtualNode) {
      var aria = /^aria-/;
      return virtualNode.attrNames.some(function(attr) {
        return aria.test(attr);
      });
    }
    var aria_has_attr_matches_default = ariaHasAttrMatches;
    function ariaAllowedRoleMatches(node, virtualNode) {
      return get_explicit_role_default(virtualNode, {
        dpub: true,
        fallback: true
      }) !== null;
    }
    var aria_allowed_role_matches_default = ariaAllowedRoleMatches;
    function ariaAllowedAttrMatches(node, virtualNode) {
      var aria = /^aria-/;
      var attrs = virtualNode.attrNames;
      if (attrs.length) {
        for (var _i43 = 0, l = attrs.length; _i43 < l; _i43++) {
          if (aria.test(attrs[_i43])) {
            return true;
          }
        }
      }
      return false;
    }
    var aria_allowed_attr_matches_default = ariaAllowedAttrMatches;
    var metadataFunctionMap = {
      'abstractrole-evaluate': abstractrole_evaluate_default,
      'accesskeys-after': accesskeys_after_default,
      'accesskeys-evaluate': accesskeys_evaluate_default,
      'alt-space-value-evaluate': alt_space_value_evaluate_default,
      'aria-allowed-attr-evaluate': ariaAllowedAttrEvaluate,
      'aria-allowed-attr-matches': aria_allowed_attr_matches_default,
      'aria-allowed-role-evaluate': aria_allowed_role_evaluate_default,
      'aria-allowed-role-matches': aria_allowed_role_matches_default,
      'aria-busy-evaluate': ariaBusyEvaluate,
      'aria-conditional-attr-evaluate': ariaConditionalAttrEvaluate,
      'aria-conditional-checkbox-attr-evaluate': ariaConditionalCheckboxAttr,
      'aria-conditional-row-attr-evaluate': ariaConditionalRowAttr,
      'aria-errormessage-evaluate': ariaErrormessageEvaluate,
      'aria-has-attr-matches': aria_has_attr_matches_default,
      'aria-hidden-body-evaluate': aria_hidden_body_evaluate_default,
      'aria-hidden-focus-matches': aria_hidden_focus_matches_default,
      'aria-label-evaluate': aria_label_evaluate_default,
      'aria-labelledby-evaluate': aria_labelledby_evaluate_default,
      'aria-level-evaluate': aria_level_evaluate_default,
      'aria-prohibited-attr-evaluate': ariaProhibitedAttrEvaluate,
      'aria-required-attr-evaluate': ariaRequiredAttrEvaluate,
      'aria-required-children-evaluate': ariaRequiredChildrenEvaluate,
      'aria-required-children-matches': aria_required_children_matches_default,
      'aria-required-parent-evaluate': aria_required_parent_evaluate_default,
      'aria-required-parent-matches': aria_required_parent_matches_default,
      'aria-roledescription-evaluate': aria_roledescription_evaluate_default,
      'aria-unsupported-attr-evaluate': aria_unsupported_attr_evaluate_default,
      'aria-valid-attr-evaluate': aria_valid_attr_evaluate_default,
      'aria-valid-attr-value-evaluate': ariaValidAttrValueEvaluate,
      'attr-non-space-content-evaluate': attr_non_space_content_evaluate_default,
      'autocomplete-appropriate-evaluate': autocomplete_appropriate_evaluate_default,
      'autocomplete-matches': autocomplete_matches_default,
      'autocomplete-valid-evaluate': autocomplete_valid_evaluate_default,
      'avoid-inline-spacing-evaluate': avoid_inline_spacing_evaluate_default,
      'braille-label-equivalent-evaluate': brailleLabelEquivalentEvaluate,
      'braille-roledescription-equivalent-evaluate': brailleRoleDescriptionEquivalentEvaluate,
      'bypass-matches': bypass_matches_default,
      'caption-evaluate': caption_evaluate_default,
      'caption-faked-evaluate': caption_faked_evaluate_default,
      'color-contrast-evaluate': colorContrastEvaluate,
      'color-contrast-matches': color_contrast_matches_default,
      'css-orientation-lock-evaluate': css_orientation_lock_evaluate_default,
      'data-table-large-matches': data_table_large_matches_default,
      'data-table-matches': data_table_matches_default,
      'deprecatedrole-evaluate': deprecatedroleEvaluate,
      'dlitem-evaluate': dlitem_evaluate_default,
      'doc-has-title-evaluate': doc_has_title_evaluate_default,
      'duplicate-id-active-matches': duplicate_id_active_matches_default,
      'duplicate-id-after': duplicate_id_after_default,
      'duplicate-id-aria-matches': duplicate_id_aria_matches_default,
      'duplicate-id-evaluate': duplicate_id_evaluate_default,
      'duplicate-id-misc-matches': duplicate_id_misc_matches_default,
      'duplicate-img-label-evaluate': duplicate_img_label_evaluate_default,
      'exists-evaluate': exists_evaluate_default,
      'explicit-evaluate': explicit_evaluate_default,
      'fallbackrole-evaluate': fallbackrole_evaluate_default,
      'focusable-content-evaluate': focusable_content_evaluate_default,
      'focusable-disabled-evaluate': focusable_disabled_evaluate_default,
      'focusable-element-evaluate': focusable_element_evaluate_default,
      'focusable-modal-open-evaluate': focusable_modal_open_evaluate_default,
      'focusable-no-name-evaluate': focusable_no_name_evaluate_default,
      'focusable-not-tabbable-evaluate': focusable_not_tabbable_evaluate_default,
      'frame-focusable-content-evaluate': frameFocusableContentEvaluate,
      'frame-focusable-content-matches': frame_focusable_content_matches_default,
      'frame-tested-after': frame_tested_after_default,
      'frame-tested-evaluate': frame_tested_evaluate_default,
      'frame-title-has-text-matches': frame_title_has_text_matches_default,
      'has-alt-evaluate': has_alt_evaluate_default,
      'has-descendant-after': has_descendant_after_default,
      'has-descendant-evaluate': has_descendant_evaluate_default,
      'has-global-aria-attribute-evaluate': has_global_aria_attribute_evaluate_default,
      'has-implicit-chromium-role-matches': has_implicit_chromium_role_matches_default,
      'has-lang-evaluate': has_lang_evaluate_default,
      'has-text-content-evaluate': hasTextContentEvaluate,
      'has-widget-role-evaluate': has_widget_role_evaluate_default,
      'heading-matches': headingMatches,
      'heading-order-after': headingOrderAfter,
      'heading-order-evaluate': heading_order_evaluate_default,
      'help-same-as-label-evaluate': help_same_as_label_evaluate_default,
      'hidden-content-evaluate': hidden_content_evaluate_default,
      'hidden-explicit-label-evaluate': hidden_explicit_label_evaluate_default,
      'html-namespace-matches': html_namespace_matches_default,
      'html5-scope-evaluate': html5_scop